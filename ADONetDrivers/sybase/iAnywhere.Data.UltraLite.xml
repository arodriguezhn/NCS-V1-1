<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iAnywhere.Data.UltraLite</name>
    </assembly>
    <members>
        <member name="T:iAnywhere.Data.UltraLite.ULActiveSyncListener">
            <summary>
				<para> <b>UL Ext.: </b> The listener interface for receiving ActiveSync events. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULActiveSyncListener.ActiveSyncInvoked(System.Boolean)">
            <summary>
				<para> Invoked when the MobiLink provider for ActiveSync calls the application to perform synchronization. </para>
		  </summary><remarks>
				<para> This method is invoked by a separate thread. To avoid multi-threading issues, it should post an event to the UI. If you are using multi-threading, it is recommended that you use a separate connection and use the lock keyword to access any objects shared with the rest of the application. The synchronization resulting from a call to ActiveSyncInvoked must specify the <see cref="F:iAnywhere.Data.UltraLite.ULStreamType.ACTIVE_SYNC"/> value for its connection's <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/> property. </para>
		  </remarks><param name="launchedByProvider">
				True if the application was launched by the MobiLink provider to perform ActiveSync synchronization. The application must then shut itself down after it has finished synchronizing. False if the application was already running when called by the MobiLink provider for ActiveSync. 
		  </param><example>
				The following code fragments demonstrate how to receive an ActiveSync request and perform a synchronization in the UI thread. 
				<code>
' Visual Basic
Imports iAnywhere.Data.UltraLite
   
Public Class MainWindow
  Inherits System.Windows.Forms.Form
  Implements ULActiveSyncListener
  Private conn As ULConnection
</code>
				<code>
  Public Sub New(ByVal args() As String)

    MyBase.New()

    'This call is required by the Windows Form Designer.
    InitializeComponent()

    'Add any initialization after the InitializeComponent() call
    ULConnection.DatabaseManager.SetActiveSyncListener( _
        "myCompany.myapp", Me _
      )
    'Create Connection
    ...
  End Sub
</code>
				<code>
  Protected Overrides Sub OnClosing( _
        ByVal e As System.ComponentModel.CancelEventArgs _
      )
    ULConnection.DatabaseManager.SetActiveSyncListener( _
        Nothing, Nothing _
      )
    MyBase.OnClosing(e)
  End Sub
</code>
				<code>
  Public Sub ActiveSyncInvoked( _
        ByVal launchedByProvider As Boolean _
      ) Implements ULActiveSyncListener.ActiveSyncInvoked
    Me.Invoke(New EventHandler(AddressOf Me.ActiveSyncAction))
  End Sub
</code>
				<code>
  Public Sub ActiveSyncAction( _
        ByVal sender As Object, ByVal e As EventArgs _
      )
    ' Do active sync
    conn.SyncParms.Stream = ULStreamType.ACTIVE_SYNC
    conn.Synchronize()
  End Sub
End Class
</code>
				<code>
// C#
using iAnywhere.Data.UltraLite;
public class Form1 : System.Windows.Forms.Form, ULActiveSyncListener
{
  private System.Windows.Forms.MainMenu mainMenu1;
  private ULConnection conn;
</code>
				<code>
  public Form1()
  {
    //
    // Required for Windows Form Designer support
    //
    InitializeComponent();

    //
    // TODO: Add any constructor code after
    // InitializeComponent call
    //
    ULConnection.DatabaseManager.SetActiveSyncListener(
        "myCompany.myapp", this
      );
    // Create connection
    ...
  }
</code>
				<code>
  protected override void Dispose( bool disposing )
  {
    base.Dispose( disposing );
  }
</code>
				<code>
  protected override void OnClosing(
      System.ComponentModel.CancelEventArgs e
    )
  {
    ULConnection.DatabaseManager.SetActiveSyncListener(
        null, null
      );
    base.OnClosing(e);
  }
</code>
				<code>
  public void ActiveSyncInvoked(bool launchedByProvider)
  {
    this.Invoke( new EventHandler( ActiveSyncHandler ) );
  }
</code>
				<code>
  internal void ActiveSyncHandler(object sender, EventArgs e)
  {
    conn.SyncParms.Stream = ULStreamType.ACTIVE_SYNC;
    conn.Synchronize();
  }
}
</code>











		  </example>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULAuthStatusCode">
            <summary>
				<para> <b>UL Ext.: </b> Enumerates the status codes that may be reported during MobiLink user authentication. </para>
		  </summary><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.AuthStatus"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.UNKNOWN">
            <summary>
				<para> Authorization status is unknown, possibly because the connection has not yet performed a synchronization (UNKNOWN = 0). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.VALID">
            <summary>
				<para> User ID and password were valid at time of synchronization (VALID = 1000). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.VALID_BUT_EXPIRES_SOON">
            <summary>
				<para> User ID and password were valid at time of synchronization, but will expire soon (VALID_BUT_EXPIRES_SOON = 2000). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.EXPIRED">
            <summary>
				<para> User ID or password has expired - authorization failed (EXPIRED = 3000). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.INVALID">
            <summary>
				<para> Bad user ID or password - authorization failed (INVALID = 4000). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULAuthStatusCode.IN_USE">
            <summary>
				<para> User ID is already in use - authorization failed (IN_USE = 5000). </para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULCommand">
            <summary>
				<para> Represents a pre-compiled SQL statement or query, with or without IN parameters. This object can be used to efficiently execute a statement or query multiple times. </para>
		  </summary><remarks>
				<para> ULCommand objects can be created directly, or with the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/> method. This method ensures that the command has the correct transaction for executing statements on the given connection. </para>
				<para> The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> property must be reset after the current transaction is committed or rolled back. </para>
				<para> ULCommand features the following methods for executing commands on an UltraLite.NET database: </para>
				<list type="table">
				<listheader>
					 <term>Method</term><term>Description</term> 
				</listheader>
				<item>
				<term><see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery"/></term> <term>Executes a statement that does not return a result set, such as a SQL INSERT, DELETE, or UPDATE statement. </term> 
				</item>
				<item>
				<term><see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/></term> <term>Executes a SQL SELECT statement and returns the result set in a <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/>. </term> 
				</item>
				<item>
				<term><see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar"/></term> <term>Executes a SQL SELECT statement and returns a single value. </term> 
				</item>
				<item>
				<term><see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/></term> <term><b>UL Ext.: </b> Retrieves a database table in a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> for direct manipulation. The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is interpreted as the name of the table and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> can be used to specify a table sorting order. <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> must be <see cref="F:System.Data.CommandType.TableDirect"/>. </term> 
				</item>
				</list>
				<para> You can reset most properties, including the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> property, and reuse the ULCommand object. </para>
				<para> For resource management reasons, it is recommended that you explicitly close commands when you are done with them. </para>
				<para> <b>Implements: </b> <see cref="T:System.Data.IDbCommand"/>, <see cref="T:System.IDisposable"/> </para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor">
            <summary>
				<para> Initializes a ULCommand object. </para>
		  </summary><remarks>
				<para> The ULCommand object needs to have the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>, <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/>, and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> properties set before a statement can be executed. </para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)">
            <summary>
				<para> Initializes a ULCommand object with the specified command text. </para>
		  </summary><remarks>
				<para> The ULCommand object needs to have the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> properties set before a statement can be executed. </para>
		  </remarks><param name="cmdText">
				The text of the SQL statement or name of the table when the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)">
            <summary>
				<para> Initializes a ULCommand object with the specified command text and connection. </para>
		  </summary><remarks>
				<para> The ULCommand object may need to have the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> property set before a statement can be executed. </para>
		  </remarks><param name="cmdText">
				The text of the SQL statement or name of the table when the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
		  </param><param name="connection">
				The current connection. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULTransaction)">
            <summary>
				<para> Initializes a ULCommand object with the specified command text, connection, and transaction. </para>
		  </summary><param name="cmdText">
				The text of the SQL statement or name of the table when the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>. For parameterized statements, use a question mark (?) placeholder to pass parameters. 
		  </param><param name="connection">
				The current connection. 
		  </param><param name="transaction">
				The <see cref="T:iAnywhere.Data.UltraLite.ULTransaction"/> in which the ULCommand executes. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.Dispose(System.Boolean)">
            <summary>
				<para> Releases the unmanaged resources used by the ULCommand and optionally releases the managed resources. </para>
		  </summary><param name="disposing">
				When true, disposes of both the managed and unmanaged resources. When false, disposes of only the unmanaged resources. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.System#Data#IDbCommand#CreateParameter">
            <summary>
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.CreateParameter">
            <summary>
				<para>Provides a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object for supplying parameters to ULCommand objects.</para>
		  </summary><remarks>
				<para>Some SQL statements can take parameters, indicated in the text of a statement by a question mark (?). The CreateParameter method provides a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object. You can set properties on the ULParameter to specify the value for the parameter. </para>
				<para>This is the strongly typed version of <see cref="M:System.Data.IDbCommand.CreateParameter"/>.</para>
		  </remarks><returns>
		  <para>A new parameter, as a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.System#Data#IDbCommand#ExecuteReader">
            <summary>
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader">
            <summary>
				<para>Executes a SQL SELECT statement and returns the result set. </para>
		  </summary><remarks>
				<para>The statement is the current ULCommand object, with the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/> as needed. The <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> object is a read-only result set. For editable result sets, use <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> or a <see cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/>.</para>
				<para>If the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>, ExecuteReader performs an <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> and returns a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> downcast as a <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/>.</para>
				<para>This is the strongly typed version of <see cref="M:System.Data.IDbCommand.ExecuteReader"/>.</para>
		  </remarks><returns>
		  The result set as a <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader(System.Data.CommandBehavior)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
				<para>Executes a SQL SELECT statement with the specified command behavior and returns the result set. </para>
		  </summary><remarks>
				<para>The statement is the current ULCommand object, with the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/> as needed. The <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> object is a read-only result set. For editable result sets, use <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/> or a <see cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/>.</para>
				<para>If the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>, ExecuteReader performs an <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/> and returns a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> downcast as a <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/>.</para>
				<para>This is the strongly typed version of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/>.</para>
		  </remarks><param name="cmdBehavior">
				A bitwise combination of <see cref="T:System.Data.CommandBehavior"/> flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the <see cref="F:System.Data.CommandBehavior.Default"/>, <see cref="F:System.Data.CommandBehavior.CloseConnection"/>, and <see cref="F:System.Data.CommandBehavior.SchemaOnly"/> flags. 
		  </param><returns>
		  The result set as a <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.Prepare">
            <summary>
				<para>Pre-compiles and stores the SQL statement of this command. </para>
		  </summary><remarks>
				<para>Pre-compiling statements allows for the efficient re-use of statements when just the parameter values are changed. Changing any other property on this command unprepares the statement.</para>
				<para>UltraLite.NET does not require you to explicitly prepare statements as all unprepared commands are prepared on calls to the various Execute methods.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable">
            <summary>
				<para><b>UL Ext.: </b> Retrieves in a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> a database table for direct manipulation. The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is interpreted as the name of the table and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> can be used to specify a table sorting order. </para>
		  </summary><remarks>
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> property must be set to <see cref="F:System.Data.CommandType.TableDirect"/>.</para>
				<para>If the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> property is a null reference (Nothing in Visual Basic), the primary key is used to open the table. Otherwise, the table is opened using the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> value as the name of the index to sort by.</para>
		  </remarks><returns>
		  The table as a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)">
            <summary>
				<para><b>UL Ext.: </b> Retrieves, with the specified command behavior, a database table for direct manipulation. The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is interpreted as the name of the table and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> can be used to specify a table sorting order. </para>
		  </summary><remarks>
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> property must be set to <see cref="F:System.Data.CommandType.TableDirect"/>.</para>
				<para>If the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> property is a null reference (Nothing in Visual Basic), the primary key is used to open the table. Otherwise, the table is opened using the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/> value as the name of the index to sort by.</para>
		  </remarks><param name="cmdBehavior">
				A bitwise combination of <see cref="T:System.Data.CommandBehavior"/> flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the <see cref="F:System.Data.CommandBehavior.Default"/>, <see cref="F:System.Data.CommandBehavior.CloseConnection"/>, and <see cref="F:System.Data.CommandBehavior.SchemaOnly"/> flags. 
		  </param><returns>
		  The table as a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery">
            <summary>
				<para>Executes a statement that does not return a result set, such as a SQL INSERT, DELETE, or UPDATE statement. </para>
		  </summary><remarks>
				<para>The statement is the current ULCommand object, with the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/> as needed. </para>
				<para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, and for rollbacks, the return value is -1.</para>
				<para> The <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> property cannot be <see cref="F:System.Data.CommandType.TableDirect"/>.</para>
		  </remarks><returns>
		  <para>The number of rows affected.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar">
            <summary>
				<para>Executes a SQL SELECT statement and returns a single value.</para>
		  </summary><remarks>
				<para>The statement is the current ULCommand object, with the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> and <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/> as needed. </para>
				<para>If this method is called on a query that returns multiple rows and columns, only the first column of the first row is returned.</para>
				<para> If the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>, ExecuteScalar performs an <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> and returns the first column of the first row.</para>
		  </remarks><returns>
		  <para>The first column of the first row in the result set, or a null reference (Nothing in Visual Basic) if the result set is empty.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The command is in an invalid state. Either the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> is missing or closed, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> value does not match the current transaction state of the connection, or the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> is invalid.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCommand.Cancel">
            <summary>
				<para>This method is not supported in UltraLite.NET.</para>
		  </summary><remarks>
				<para>This method does nothing. UltraLite.NET commands cannot be interrupted while they are executing.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.IndexName">
            <summary>
				<para> <b>UL Ext.: </b> Specifies the name of the index to open (sort) the table with when the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>.</para>
		  </summary><value>A string specifying the name of the index. The default is a null reference (Nothing in Visual Basic), meaning the table is opened with its primary key.</value><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.CommandText">
            <summary>
				<para> Specifies the text of the SQL statement or the name of the table when the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandType"/> is <see cref="F:System.Data.CommandType.TableDirect"/>. For parameterized statements, use a question mark (?) placeholder to pass parameters. </para>
		  </summary><value> A string specifying the text of the SQL statement or the name of the table. The default is an empty string (invalid command). </value><example>
				The following example demonstrates the use of the parameterized placeholder: 
				<code>
' Visual Basic
myCmd.CommandText = "SELECT * FROM Customers WHERE CustomerID = ?"

// C#
myCmd.CommandText = "SELECT * FROM Customers WHERE CustomerID = ?";
</code>

		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.CommandTimeout">
            <summary>
				<para> This feature is not supported by UltraLite.NET. </para>
		  </summary><value> 
		  <para> The value is always zero. </para>
		  </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				Setting the value is not supported in UltraLite.NET. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.CommandType">
            <summary>
				<para> Specifies the type of command to be executed. </para>
		  </summary><value>One of the <see cref="T:System.Data.CommandType"/> values. The default is <see cref="F:System.Data.CommandType.Text"/>. </value><remarks>
				<para> Supported command types are as follows: </para>
				<list type="bullet">
				<item>
				<see cref="F:System.Data.CommandType.TableDirect"/> - <b>UL Ext.: </b> When you specify this CommandType, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> must be the name of a database table. You can also specify the index used to open (sort) the table with <see cref="P:iAnywhere.Data.UltraLite.ULCommand.IndexName"/>. Use <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> or <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/> to access the table. 
				</item>
				<item>
				<see cref="F:System.Data.CommandType.Text"/> - When you specify this CommandType, the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> must be a SQL statement or query. Use <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteNonQuery"/> to execute a non-query SQL statement and use either <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteReader"/> or <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteScalar"/> to execute a query. 
				</item>
				</list>
		  </remarks><exception cref="T:System.ArgumentException">
				CommandType.StoredProcedure is not supported in UltraLite.NET. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.System#Data#IDbCommand#Connection">
            <summary>
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Connection">
            <summary>
				<para> The connection object on which to execute the ULCommand object. </para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULConnection"/> object on which to execute the command.</value><remarks>
				<para> ULCommand objects must have an open connection before they can be executed. </para>
				<para> The default is a null reference (Nothing in Visual Basic). </para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbCommand.Connection"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.System#Data#IDbCommand#Parameters">
            <summary>
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Parameters">
            <summary>
				<para>Specifies the parameters for the current statement. </para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULParameterCollection"/> holding the parameters of the SQL statement. The default value is the empty collection.</value><remarks>
				<para>Use question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> to indicate parameters. The parameters in the collection are specified in the same order as the question mark placeholders. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in this collection.</para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbCommand.Parameters"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.System#Data#IDbCommand#Transaction">
            <summary>
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Transaction">
            <summary>
				<para>Specifies the <see cref="T:iAnywhere.Data.UltraLite.ULTransaction"/> in which the ULCommand executes. </para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULTransaction"/> in which the ULCommand executes. This should be the current transaction of the connection specified by the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Connection"/> property. The default is a null reference (Nothing in Visual Basic).</value><remarks>
				<para>If a command is reused after a transaction has been committed or rolled back, this property needs to be reset.</para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbCommand.Transaction"/>.</para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.UpdatedRowSource">
            <summary>
				<para>Specifies how command results are applied to the DataRow when used by the Update method of the ULDataAdapter.</para>
		  </summary><value> 
		  <para>One of the <see cref="T:System.Data.UpdateRowSource"/> values. The default value is <see cref="F:System.Data.UpdateRowSource.Both"/>.</para>
		  </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCommand.Plan">
            <summary>
				<para><b>UL Ext.: </b> Returns the access plan UltraLite.NET will use to execute a query. This property is intended primarily for use during development.</para>
		  </summary><value> 
		  <para>A string containing the text-based description of the query execution plan.</para>
		  </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULPreparedStatement">
            <summary>
            UL prepared statement can only have one resultset.  To overcome,
            we use a holder class to attach and count who is using each prepared
            statement.
            
            We use manual reference count to speed up freeing of native objects.
            </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionOptions">
            <summary>
            Summary description for ULConnectionOptions
            </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs">
            <summary>
				<para>Provides data for the <see cref="F:iAnywhere.Data.UltraLite.ULConnection.InfoMessage"/> event.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.ToString">
            <summary>
				<para>Returns the string representation of the <see cref="F:iAnywhere.Data.UltraLite.ULConnection.InfoMessage"/> event.</para>
		  </summary><value>The string "UltraLite.NET Data Provider".</value><returns>
		  <para>The informational or warning message string.</para>
		  </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.NativeError">
            <summary>
				<para>The SQL code corresponding to the informational message or warning returned by the database.</para>
		  </summary><value>An informational or warning <see cref="T:iAnywhere.Data.UltraLite.ULSQLCode"/> value.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.Message">
            <summary>
				<para>The informational or warning message string returned by the database.</para>
		  </summary><value>A string containing the informational or warning message.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs.Source">
            <summary>
				<para>The name of the ADO.NET data provider returning the message.</para>
		  </summary><value>The string "UltraLite.NET Data Provider".</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULInfoMessageEventHandler">
            <summary>
				<para>Represents the method that will handle the <see cref="F:iAnywhere.Data.UltraLite.ULConnection.InfoMessage"/> event. </para>
		  </summary><param name="obj">
				The connection sending the event. 
		  </param><param name="args">
				The <see cref="T:iAnywhere.Data.UltraLite.ULInfoMessageEventArgs"/> object that contains the event data. 
		  </param>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnection">
            <summary>
				<para>Represents a connection to an UltraLite.NET database. </para>
		  </summary><remarks>
				<para>To use the UltraLite Engine runtime of UltraLite.NET, set <see cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/> to the appropriate value before using any other UltraLite.NET API.</para>
				<para>A connection to an existing database is opened using the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/> method. You can create a new database and connect to it using the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/> method. </para>
				<para>You must open a connection before carrying out any other operation, and you must close the connection after you have finished all operations on the connection and before your application terminates. In addition, you must close all result sets and tables opened on a connection before closing the connection.</para>
				<para> The schema of the database can be accessed using an open connection's <see cref="P:iAnywhere.Data.UltraLite.ULConnection.Schema"/> property.</para>
				<para> <b>Implements: </b> <see cref="T:System.Data.IDbConnection"/>, <see cref="T:System.IDisposable"/> </para>
		  </remarks>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULConnection.INVALID_DATABASE_ID">
            <summary>
				<para><b>UL Ext.: </b> A database ID constant indicating that the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID"/> has not been set.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.#ctor">
            <summary>
				<para> Initializes a ULConnection object. The connection must be opened before you can perform any operations against the database. </para>
		  </summary><remarks>
				<para>To use the UltraLite Engine runtime of UltraLite.NET, set <see cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/> to the appropriate value before using any other UltraLite.NET API.</para>
				<para> The ULConnection object needs to have the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/> property set before it can be opened. </para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.#ctor(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.#ctor(System.String)">
            <summary>
				<para> Initializes a ULConnection object with the specified connection string. The connection must be opened before you can perform any operations against the database. </para>
		  </summary><remarks>
				<para>To use the UltraLite Engine runtime of UltraLite.NET, set <see cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/> to the appropriate value before using any other UltraLite.NET API.</para>
				<para> The connection string can be supplied using a <see cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/> object.</para>
		  </remarks><param name="connectionString">
				<para>An UltraLite.NET connection string. A connection string is a semicolon-separated list of keyword-value pairs.</para>
				<para>For a list of parameters, see the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/> property. </para>
		  </param><exception cref="T:System.ArgumentException">
				<para>The supplied connection string is invalid.</para>
		  </exception><example>
				<para>The following code creates and opens a connection to the existing database \UltraLite\MyDatabase.udb on a Windows CE device.</para>
				<code>
' Visual Basic
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnCE = "\UltraLite\MyDatabase.udb"
Dim conn As ULConnection = _
  New ULConnection( openParms.ToString() )
conn.Open()

// C#
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnCE = @"\UltraLite\MyDatabase.udb";
ULConnection conn = new ULConnection( openParms.ToString() );
conn.Open();
</code>

		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.#ctor"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Open">
            <summary>
				<para>Opens a connection to a database using the previously-specified connection string. </para>
		  </summary><remarks>
				<para>You should explicitly close or dispose of the connection when you are done with it.</para>
		  </remarks><exception cref="T:System.InvalidOperationException">
				<para>The connection is already open or the connection string is not specified in the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/> property.</para>
		  </exception><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred while attempting to open the database.</para>
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.State"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate">
            <summary>
				<para><b>UL Ext.: </b> Opens a connection to a database using the previously-specified connection string. If the database does not exist, a new database is created.</para>
		  </summary><remarks>
				<para>To create a new database, the connection string must contain the location of the new database's schema file.</para>
				<para>You should explicitly close or dispose of the connection when you are done with it.</para>
		  </remarks><exception cref="T:System.InvalidOperationException">
				<para>The connection is already open or the connection string is not specified in the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/> property.</para>
		  </exception><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred while attempting to open or create the database.</para>
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.SchemaOnCE"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.SchemaOnDesktop"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.State"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.DropDatabase(iAnywhere.Data.UltraLite.ULConnectionParms)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction">
            <summary>
				<para>Returns a transaction object. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with a <see cref="M:iAnywhere.Data.UltraLite.ULTransaction.Commit"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback"/>.</para>
		  </summary><remarks>
				<para>To associate a command with a transaction object, use the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> property. The current transaction is automatically associated to commands created by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/>.</para>
				<para>By default, the connection does not use transactions and all commands are automatically committed as they are executed. Once the current transaction is committed or rolled back, the connection reverts to auto commit mode until the next call to BeginTransaction.</para>
				<para>This is the strongly typed version of <see cref="M:System.Data.IDbConnection.BeginTransaction"/>.</para>
		  </remarks><returns>
		  <para>A <see cref="T:iAnywhere.Data.UltraLite.ULTransaction"/> object representing the new transaction.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>The connection is closed.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>ULConnection does not support parallel transactions.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction(System.Data.IsolationLevel)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
				<para>Returns a transaction object with the specified isolation level. Commands associated with a transaction object are executed as a single transaction. The transaction is terminated with a <see cref="M:iAnywhere.Data.UltraLite.ULTransaction.Commit"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback"/>.</para>
		  </summary><remarks>
				<para>To associate a command with a transaction object, use the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> property. The current transaction is automatically associated to commands created by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand"/>.</para>
				<para>By default, the connection does not use transactions and all commands are automatically committed as they are executed. Once the current transaction is committed or rolled back, the connection reverts to auto commit mode until the next call to BeginTransaction.</para>
				<para>This is the strongly typed version of <see cref="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)"/>.</para>
		  </remarks><param name="isolationLevel">
				The required isolation level for the transaction. UltraLite.NET only supports <see cref="F:System.Data.IsolationLevel.ReadUncommitted"/>. 
		  </param><returns>
		  <para>A <see cref="T:iAnywhere.Data.UltraLite.ULTransaction"/> object representing the new transaction.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>The connection is closed or an unsupported isolation level was specified.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>ULConnection does not support parallel transactions.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ChangeDatabase(System.String)">
            <summary>
				<para>Changes the current database for an open ULConnection.</para>
		  </summary><remarks>
				<para>The connection to the current database is closed even if there are parameter errors.</para>
				<para><b>UL Ext.: </b> <paramref name="connectionString"/> is a full connection string, not a dbn or dbf.</para>
		  </remarks><param name="connectionString">
				A complete connection string to open the connection to a new database. 
		  </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CreateCommand">
            <summary>
				<para>Creates and initializes a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object associated with this connection and its current transaction. You can use the properties of the ULCommand to control its behavior.</para>
		  </summary><remarks>
				<para>You must set the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> property before the command can be executed.</para>
				<para>This is the strongly typed version of <see cref="M:System.Data.IDbConnection.CreateCommand"/>.</para>
		  </remarks><returns>
		  <para>A new <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object.</para>
		  </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetNewUUID">
            <summary>
				<para><b>UL Ext.: </b> Generates a new UUID (<see cref="T:System.Guid"/>).</para>
		  </summary><remarks>
				<para>This method is provided here as it is not included in the .NET Compact Framework.</para>
		  </remarks><returns>
		  <para>A new UUID as a <see cref="T:System.Guid"/>.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.RollbackPartialDownload">
            <summary>
				<para><b>UL Ext.: </b> Rolls back outstanding changes to the database from a partial download.</para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CountUploadRows(System.Int32,System.UInt32)">
            <summary>
				<para><b>UL Ext.: </b> Returns the number of rows that need to be uploaded when the next synchronization takes place.</para>
		  </summary><param name="mask">
				The set of publications to check for rows. See the <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> class for more information. 
		  </param><param name="threshold">
				The maximum number of rows to count, limiting the amount of time taken by CountUploadRows. A value of 0 corresponds to the maximum limit. A value of 1 determines if any rows need to be synchronized. 
		  </param><returns>
		  <para>The number of rows that need to be uploaded from the specified publication(s).</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CountUploadRows(System.Int32,System.Int64)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.CountUploadRows(System.Int32,System.Int64)">
            <summary>
				<para><b>UL Ext.: </b> Returns the number of rows that need to be uploaded when the next synchronization takes place.</para>
		  </summary><remarks>
				<para>This method is provided for languages that do not support the System.UInt32 type natively. Use the other form of this method if your application supports it.</para>
		  </remarks><param name="mask">
				The set of publications to check for rows. See the <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> class for more information. 
		  </param><param name="threshold">
				The maximum number of rows to count, limiting the amount of time taken by CountUploadRows. A value of 0 corresponds to the maximum limit. A value of 1 determines if any rows need to be synchronized. The threshold value must be in the range [0,0x0ffffffff]. 
		  </param><returns>
		  <para>The number of rows that need to be uploaded from the specified publication(s).</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CountUploadRows(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GetLastDownloadTime(System.Int32)">
            <summary>
				<para><b>UL Ext.: </b> Returns the time of the most recent download of the specified publication.</para>
		  </summary><remarks>
				<para>The parameter <paramref name="mask"/> must reference a single publication or be the special constant <see cref="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_DB"/> for the time of the last download of the full database.</para>
		  </remarks><param name="mask">
				The mask of the publication to check. See the <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> class for more information. 
		  </param><returns>
		  <para>The timestamp of the last download.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ResetLastDownloadTime(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ResetLastDownloadTime(System.Int32)">
            <summary>
				<para><b>UL Ext.: </b> Resets the time of the most recent download.</para>
		  </summary><param name="mask">
				The set of publications to reset. See <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> class for more information. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetLastDownloadTime(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)">
            <summary>
				<para><b>UL Ext.: </b> Grants access to an UltraLite database for a user ID with a specified password.</para>
		  </summary><remarks>
				<para>If an existing user ID is specified, this function updates the password for the user. UltraLite supports a maximum of 4 users. This method is enabled only if user authentication was enabled when the connection was opened.</para>
		  </remarks><param name="uid">
				The user ID to receive access to the database. The maximum length of the user ID is 16 characters. 
		  </param><param name="pwd">
				The password to be associated with the user ID. The maximum length is 16 characters. 
		  </param><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)">
            <summary>
				<para><b>UL Ext.: </b> Revokes access to an UltraLite database from the specified user ID.</para>
		  </summary><param name="uid">
				The user ID whose access to the database is being revoked. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)">
            <summary>
				<para><b>UL Ext.: </b> Changes the database's encryption key to the specified new key.</para>
		  </summary><remarks>
				<para>If the encryption key is lost, it is not possible to open the database.</para>
		  </remarks><param name="newKey">
				The new encryption key for the database. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete">
            <summary>
				<para><b>UL Ext.: </b> Marks all subsequent deletes made by this connection for synchronization.</para>
		  </summary><remarks>
				<para>Once this function is called, all delete operations are again synchronized, causing the rows deleted from the UltraLite database to be removed from the consolidated database as well.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Truncate"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete">
            <summary>
				<para><b>UL Ext.: </b> Prevents delete operations from being synchronized.</para>
		  </summary><remarks>
				<para>This method is useful for deleting old information on an UltraLite database to save space, while not deleting this information on the consolidated database.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String)">
            <summary>
				<para><b>UL Ext.: </b> Retrieves in a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> a database table for direct manipulation. The table is opened (sorted) using the table's primary key.</para>
		  </summary><remarks>
				<para>This method is a shortcut for the <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> method that does not require a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> instance. It is provided to help users porting from earlier versions of UltraLite.NET (it replaces iAnywhere.UltraLite.Connection.GetTable() and iAnywhere.UltraLite.Table.Open()).</para>
		  </remarks><param name="tableName">
				The name of the table to open. 
		  </param><returns>
		  The table as a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <paramref name="tableName"/> is invalid.</para>
		  </exception><example>
				<para>The following code opens the table named MyTable using the table's primary key. It assumes an open ULConnection instance called conn.</para>
				<code>
' Visual Basic
Dim t As ULTable = conn.ExecuteTable("MyTable")
' The line above is equivalent to
' Dim cmd As ULCommand = conn.CreateCommand()
' cmd.CommandText = "MyTable"
' cmd.CommandType = CommandType.TableDirect
' Dim t As ULTable = cmd.ExecuteTable()
' cmd.Dispose()
</code>
				<code>
// C#
ULTable t = conn.ExecuteTable("MyTable");
// The line above is equivalent to
// ULTable t;
// using(ULCommand cmd = conn.CreateCommand())
// {
//     cmd.CommandText = "MyTable";
//     cmd.CommandType = CommandType.TableDirect;
//     t = cmd.ExecuteTable();
// }
</code>


		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String,System.Data.CommandBehavior)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String)">
            <summary>
				<para><b>UL Ext.: </b> Retrieves in a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> a database table for direct manipulation. The table is opened (sorted) using the specified index.</para>
		  </summary><remarks>
				<para>This method is a shortcut for the <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> method that does not require a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> instance. It is provided to help users porting from earlier versions of UltraLite.NET (it replaces iAnywhere.UltraLite.Connection.GetTable() and iAnywhere.UltraLite.Table.Open()).</para>
		  </remarks><param name="tableName">
				The name of the table to open. 
		  </param><param name="indexName">
				The name of the index to open (sort) the table with. 
		  </param><returns>
		  The table as a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <paramref name="tableName"/> is invalid.</para>
		  </exception><example>
				<para>The following code opens the table named MyTable using the index named MyIndex. It assumes an open ULConnection instance called conn.</para>
				<code>
' Visual Basic
Dim t As ULTable = conn.ExecuteTable("MyTable", "MyIndex")
' The line above is equivalent to
' Dim cmd As ULCommand = conn.CreateCommand()
' cmd.CommandText = "MyTable"
' cmd.IndexName = "MyIndex"
' cmd.CommandType = CommandType.TableDirect
' Dim t As ULTable = cmd.ExecuteTable()
' cmd.Dispose()
</code>
				<code>
// C#
ULTable t = conn.ExecuteTable("MyTable", "MyIndex");
// The line above is equivalent to
// ULTable t;
// using(ULCommand cmd = conn.CreateCommand())
// {
//     cmd.CommandText = "MyTable";
//     cmd.IndexName = "MyIndex";
//     cmd.CommandType = CommandType.TableDirect;
//     t = cmd.ExecuteTable();
// }
</code>


		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String,System.Data.CommandBehavior)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String,System.Data.CommandBehavior)">
            <summary>
				<para><b>UL Ext.: </b> Retrieves, with the specified command behavior, a database table for direct manipulation. The table is opened (sorted) using the specified index.</para>
		  </summary><remarks>
				<para>This method is a shortcut for the <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable(System.Data.CommandBehavior)"/> method that does not require a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> instance. It is provided to help users porting from earlier versions of UltraLite.NET (it replaces iAnywhere.UltraLite.Connection.GetTable() and iAnywhere.UltraLite.Table.Open()).</para>
		  </remarks><param name="tableName">
				The name of the table to open. 
		  </param><param name="indexName">
				The name of the index to open (sort) the table with. 
		  </param><param name="cmdBehavior">
				A bitwise combination of <see cref="T:System.Data.CommandBehavior"/> flags describing the results of the query and its effect on the connection. UltraLite.NET respects only the <see cref="F:System.Data.CommandBehavior.Default"/>, <see cref="F:System.Data.CommandBehavior.CloseConnection"/>, and <see cref="F:System.Data.CommandBehavior.SchemaOnly"/> flags. 
		  </param><returns>
		  The table as a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> object. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <paramref name="tableName"/> is invalid.</para>
		  </exception><example>
				<para>The following code opens the table named MyTable using the index named MyIndex. It assumes an open ULConnection instance called conn.</para>
				<code>
' Visual Basic
Dim t As ULTable = conn.ExecuteTable( _
    "MyTable", "MyIndex", CommandBehavior.Default _
  )
' The line above is equivalent to
' Dim cmd As ULCommand = conn.CreateCommand()
' cmd.CommandText = "MyTable"
' cmd.IndexName = "MyIndex"
' cmd.CommandType = CommandType.TableDirect
' Dim t As ULTable = cmd.ExecuteTable(CommandBehavior.Default)
' cmd.Dispose()
</code>
				<code>
// C#
ULTable t = conn.ExecuteTable(
    "MyTable", "MyIndex", CommandBehavior.Default
  );
// The line above is equivalent to
// ULTable t;
// using(ULCommand cmd = conn.CreateCommand())
// {
//     cmd.CommandText = "MyTable";
//     cmd.IndexName = "MyIndex";
//     cmd.CommandType = CommandType.TableDirect;
//     t = cmd.ExecuteTable(CommandBehavior.Default);
// }
</code>


		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ExecuteTable(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize">
            <summary>
				<para><b>UL Ext.: </b> Synchronize the database using the current <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/>.</para>
		  </summary><remarks>
				<para>A detailed result status is reported in this connection's <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/> property.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize(iAnywhere.Data.UltraLite.ULSyncProgressListener)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize(iAnywhere.Data.UltraLite.ULSyncProgressListener)">
            <summary>
				<para> <b>UL Ext.: </b> Synchronize the database using the current <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/> with progress events posted to the specified listener.</para>
		  </summary><remarks>
				<para>The last event posted to the listener will have a state of <see cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_LAST"/>.</para>
				<para>Errors during synchronization will be posted as <see cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/> events and then thrown as <see cref="T:iAnywhere.Data.UltraLite.ULException"/>s.</para>
				<para>A detailed result status will be reported in this connection's <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/> property.</para>
		  </remarks><param name="listener">
				The object that will receive synchronization progress events. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressListener"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.RuntimeError(iAnywhere.Data.UltraLite.ULSQLCode)">
            <summary>Throws runtime ULLException
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Finalize">
            <summary>
				<para>Releases unmanaged resources and performs other cleanup operations before the ULConnection is reclaimed by garbage collection. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Close">
            <summary>
				<para>Closes the database connection.</para>
		  </summary><remarks>
				<para>The Close method rolls back any pending transactions and then closes the connection. An application can call Close multiple times.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.Dispose(System.Boolean)">
            <summary>
				<para> Releases the unmanaged resources used by the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> and optionally releases the managed resources. </para>
		  </summary><param name="disposing">
				When true, dispose of both managed and unmanaged resources. When false, dispose of only the unmanaged resources. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnection.ULNET_Con_GetKey(System.Int32,System.Int32,System.Boolean)">
            <summary> Acquire the nat key of an object (0 if closed by
            runtime).
            </summary>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULConnection.InfoMessage">
            <summary>
				<para>Occurs when UltraLite.NET sends a warning or an informational message on this connection.</para>
		  </summary><remarks>
				<para>To process UltraLite.NET warnings or informational messages, you must create a <see cref="T:iAnywhere.Data.UltraLite.ULInfoMessageEventHandler"/> delegate and attach it to this event. </para>
		  </remarks><example>
				<para>The following code defines an informational message event handler.</para>
				<code>
' Visual Basic
Private Sub MyInfoMessageHandler( _
      obj As Object, args As ULInfoMessageEventArgs _
    )
  System.Console.WriteLine( _
      "InfoMesageHandler: " + args.NativeError + ", " _
      + args.Message _
    )
End Sub

// C#
private void MyInfoMessageHandler(
      object obj, ULInfoMessageEventArgs args
    )
{
  System.Console.WriteLine(
      "InfoMesageHandler: " + args.NativeError + ", "
      + args.Message
    );
}
</code>
				<para>The following code adds the MyInfoMessageHandler to the connection named conn.</para>
				<code>
' Visual Basic
AddHandler conn.InfoMessage, AddressOf MyInfoMessageHandler

// C#
conn.InfoMessage +=
  new ULInfoMessageEventHandler(MyInfoMessageHandler);
</code>


		  </example>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULConnection.StateChange">
            <summary>
				<para>Occurs when this connection changes state.</para>
		  </summary><remarks>
				<para>To process state change messages, you must create a <see cref="T:System.Data.StateChangeEventHandler"/> delegate and attach it to this event. </para>
		  </remarks><example>
				<para>The following code defines a state change event handler.</para>
				<code>
' Visual Basic
Private Sub MyStateHandler( _
      obj As Object, args As StateChangeEventArgs _
    )
  System.Console.WriteLine( _
      "StateHandler: " + args.OriginalState + " to " _
      + args.CurrentState _
    )
End Sub

// C#
private void MyStateHandler(
      object obj, StateChangeEventArgs args
    )
{
  System.Console.WriteLine(
      "StateHandler: " + args.OriginalState + " to "
      + args.CurrentState
    );
}
</code>
				<para>The following code adds the MyStateHandler to the connection named conn.</para>
				<code>
' Visual Basic
AddHandler conn.StateChange, AddressOf MyStateHandler

// C#
conn.StateChange += new StateChangeEventHandler(MyStateHandler);
</code>


		  </example>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString">
            <summary>
				<para> Specifies the parameters to use for opening a connection to an UltraLite.NET database. The connection string can be supplied using a <see cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/> object.</para>
		  </summary><value> 
		  <para>The parameters used to open this connection in the form of a semicolon-separated list of keyword-value pairs. The default is an empty string (an invalid connection string).</para>
		  </value><remarks>
				<para><b>UL Ext.: </b> The parameters used by UltraLite.NET are specific to UltraLite databases and therefore the connection string is not compatible with Adaptive Server Anywhere connection strings. For a list of parameters, see @olink targetdoc="ulfoundations" targetptr="connparms"@Connection Parameters@/olink@.</para>
		  </remarks><exception cref="T:System.InvalidOperationException">
				<para>The value cannot be set while the connection is open.</para>
		  </exception><exception cref="T:System.ArgumentException">
				<para>The supplied connection string is invalid.</para>
		  </exception><example>
				<para>The following code creates and opens a connection to the existing database \UltraLite\MyDatabase.udb on a Windows CE device.</para>
				<code>
' Visual Basic
Dim openParms As ULConnectionParms = New ULConnectionParms
openParms.DatabaseOnCE = "\UltraLite\MyDatabase.udb"
Dim conn As ULConnection = New ULConnection
conn.ConnectionString = openParms.ToString()
conn.Open()

// C#
ULConnectionParms openParms = new ULConnectionParms();
openParms.DatabaseOnCE = @"\UltraLite\MyDatabase.udb";
ULConnection conn = new ULConnection();
conn.ConnectionString = openParms.ToString();
conn.Open();
</code>

		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionTimeout">
            <summary>
				<para> This feature is not supported by UltraLite.NET. </para>
		  </summary><value>The value is always zero. </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				Setting the value is not supported in UltraLite.NET. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.Database">
            <summary>
				<para> Returns the name of the database that the connection will be opened to.</para>
		  </summary><value>A string containing the name of the database.</value><remarks>
				<para>On Windows CE devices, ULConnection looks in the connection string in the following order: dbn, ce_file.</para>
				<para> On desktop machines, ULConnection looks in the connection string in the following order: dbn, nt_file.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.State">
            <summary>
				<para>Returns the current state of the connection. </para>
		  </summary><value><see cref="F:System.Data.ConnectionState.Open"/> if the connection is open, <see cref="F:System.Data.ConnectionState.Closed"/> if the connection is closed.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULConnection.StateChange"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseManager">
            <summary>
				<para><b>UL Ext.: </b> Provides access to the singleton <see cref="T:iAnywhere.Data.UltraLite.ULDatabaseManager"/> object. </para>
		  </summary><value>A reference to the singleton <see cref="T:iAnywhere.Data.UltraLite.ULDatabaseManager"/> object.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.Schema">
            <summary>
				<para><b>UL Ext.: </b> Provides access to the schema of the current database associated with this connection.</para>
		  </summary><value>A reference to the <see cref="T:iAnywhere.Data.UltraLite.ULDatabaseSchema"/> object representing the schema of the database that this connection is opened on.</value><remarks>
				<para>This property is only valid while its connection is open. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.LastIdentity">
            <summary>
				<para> <b>UL Ext.: </b> Returns the most recent identity value used.</para>
		  </summary><value>The most recently-used identity value as an unsigned long.</value><remarks>
				<para>The most recent identity value used. This property is equivalent to the Adaptive Server Anywhere SQL statement:</para>
				<code>SELECT @@identity</code>
				<para> LastIdentity is particularly useful in the context of global autoincrement columns.</para>
				<para>Since this property only allows you to determine the most recently assigned default value, you should retrieve this value soon after executing the insert statement to avoid spurious results. </para>
				<para> Occasionally, a single insert statement may include more than one column of type global autoincrement. In this case, LastIdentity is one of the generated default values, but there is no reliable means to determine which column the value is from. For this reason, you should design your database and write your insert statements so as to avoid this situation.</para>

		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID">
            <summary>
				<para> <b>UL Ext.: </b> Specifies the Database ID value to be used for global autoincrement columns. </para>
		  </summary><value>The Database ID value of the current database.</value><remarks>
				<para>The database ID value must be in the range [0,<see cref="F:System.UInt32.MaxValue"/>]. A value of <see cref="F:iAnywhere.Data.UltraLite.ULConnection.INVALID_DATABASE_ID"/> is used to indicate that the database ID has not been set for the current database.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>The specified new database ID is invalid.</para>
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.GlobalAutoIncrementUsage">
            <summary>
				<para><b>UL Ext.: </b> Returns the percentage of available global autoincrement values that have been used.</para>
		  </summary><value>The percentage of available global autoincrement values that have been used. It is an integer in the range [0-100], inclusive.</value><remarks>
				<para>If the percentage approaches 100, your application should set a new value for the global database ID using <see cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID"/>.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>A SQL error occurred.</para>
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms">
            <summary>
				<para><b>UL Ext.: </b> Specifies the synchronization settings for this connection.</para>
		  </summary><value>A reference to the parameters used for synchronization by this connection. Modifications to the parameters affect the next synchronization made over this connection. </value><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult">
            <summary>
				<para><b>UL Ext.: </b> Returns the results of the last synchronization for this connection.</para>
		  </summary><value>A reference to the results of the last synchronization for this connection. </value><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionParms">
            <summary>
				<para> <b>UL Ext.: </b> Builds a connection string for opening a connection to an UltraLite database. The frequently-used connection parameters are individual properties on the ULConnectionParms object.</para>
		  </summary><remarks>
				<para>A ULConnectionParms object is used to specify the parameters for opening a connection (<see cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/>), creating a database (<see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>), dropping a database (<see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.DropDatabase(iAnywhere.Data.UltraLite.ULConnectionParms)"/>), or specifying a schema file (<see cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.ApplyFile(iAnywhere.Data.UltraLite.ULConnectionParms,iAnywhere.Data.UltraLite.ULSchemaUpgradeListener)"/>).</para>
				<para>Leading and trailing spaces are ignored and values must not contain semicolons (;), parentheses (), or curly braces {}. For future compatibility it is strongly recommended that values do not contain single (') or double (") quotes.</para>
				<para> When building a connection string, you need to identify the database, specify any optional connection settings, and specify the database schema file if you wish to create the database with <see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>. Once you have supplied all the connection parameters by setting the appropriate properties on a ULConnectionParms object, you create a connection string using the <see cref="M:iAnywhere.Data.UltraLite.ULConnectionParms.ToString"/> method. The resulting string is used to create a new <see cref="T:iAnywhere.Data.UltraLite.ULConnection"/> with the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.#ctor(System.String)"/> constructor or set the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.ConnectionString"/> property of an existing <see cref="T:iAnywhere.Data.UltraLite.ULConnection"/> object.</para>
				<para> <b>Identifying the database</b> </para>
				<para> Each instance contains platform-specific paths to the database. Only the value corresponding to the executing platform is used. For example, in the code below the path \UltraLite\mydb1.udb would be used on Windows CE, while mydb2.db would be used on other platforms.</para>
				<code>
' Visual Basic
Dim dbName As ULConnectionParms = new ULConnectionParms
dbName.DatabaseOnCE = "\UltraLite\mydb1.udb"
dbName.DatabaseOnDesktop = "mydb2.udb"

// C#
ULConnectionParms dbName = new ULConnectionParms();
dbName.DatabaseOnCE = "\\UltraLite\\mydb1.udb";
dbName.DatabaseOnDesktop = "mydb2.udb";
</code>
				<para> The recommended extension for UltraLite database files is .udb. On Windows CE devices, the default database is \UltraLiteDB\ulstore.udb. On other Windows platforms, the default database is ulstore.udb. In C#, you must escape any backslash characters in paths or use @-quoted string literals. </para>
				<para>If you are using multiple databases, you should specify a database name for each database. See the <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.AdditionalParms"/> property for more information.</para>
				<para><b>Optional connection settings</b></para>
				<para>Depending on your application's needs and how the database was created, you may need to supply a non-default <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/> and <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/>, a database <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey"/>, and the connection <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.CacheSize"/>. If your application is using multiple connections, you should provide a unique <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.ConnectionName"/> for each connection.</para>
				<para>Databases are created with a single authenticated user, DBA, whose initial password is SQL. By default, connections are opened using the user ID DBA and password SQL. To disable the default user, use the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)"/> method. To add a user or change a user's password, use the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/> method. </para>
				<para>If an encryption key was supplied when the database was created, all subsequent connections to the database must use the same encryption key. To change a database's encryption key, use the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)"/> method.</para>
				<para><b>Identifying the schema</b></para>
				<para>When creating a database, you must supply a schema. The path to the schema file is specified using the platform-specific properties <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.SchemaOnCE"/> and <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.SchemaOnDesktop"/>. Only the value corresponding to the executing platform is used.</para>
				<para>For more information, see @olink targetdoc="ulfoundations" targetptr="connparms"@Connection Parameters@/olink@.</para>

		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionParms.#ctor">
            <summary>
				<para> Initializes a ULConnectionParms instance with its default values. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULConnectionParms.ToString">
            <summary>
				<para>Returns the string representation of this instance. </para>
		  </summary><returns>
		  The string representation of this instance as a semicolon-separated list keyword=value pairs. 
		  </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnCE">
            <summary>
				<para> Specifies the path and filename of the UltraLite database on Windows CE.</para>
		  </summary><value>A string specifying the full path to the database. If the value is a null reference (Nothing in Visual Basic), the default database \UltraLiteDB\ulstore.udb is used. In C#, you must escape any backslash characters in paths or use @-quoted string literals.</value><exception cref="T:System.ArgumentException">
				The value contained a semicolon (;), parentheses (), or curly braces {}. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnDesktop">
            <summary>
				<para> Specifies the path and filename of the UltraLite database on Windows desktop platforms.</para>
		  </summary><value>A string specifying the absolute or relative path to the database. If the value is a null reference (Nothing in Visual Basic), the default database ulstore.udb is used. In C#, you must escape any backslash characters in paths or use @-quoted string literals.</value><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.SchemaOnCE">
            <summary>
				<para> Specifies the path and filename of the UltraLite schema on Windows CE.</para>
		  </summary><value>A string specifying the full path to the schema file. The default is a null reference (Nothing in Visual Basic) meaning no schema file is specified for this platform.</value><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.SchemaOnDesktop">
            <summary>
				<para> Specifies the path and filename of the UltraLite schema on Windows desktop platforms. </para>
		  </summary><value>A string specifying the absolute or relative path to the schema file. The default is a null reference (Nothing in Visual Basic) meaning no schema file is specified for this platform.</value><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.ConnectionName">
            <summary>
				<para> Specifies a name for the connection. This is only needed if you create more than one connection to the database. </para>
		  </summary><value>A string specifying the name of the connection. The default is a null reference (Nothing in Visual Basic).</value><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID">
            <summary>
				<para> Specifies an authenticated user for the database. </para>
		  </summary><value>A string specifying a database user ID. The default value is DBA.</value><remarks>
				Databases are initially created with a single authenticated user named DBA. User IDs are case-insensitive if the database is case-insensitive and case-sensitive if the database is case-sensitive. 
		  </remarks><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly-braces {}. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GrantConnectTo(System.String,System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RevokeConnectFrom(System.String)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.IsCaseSensitive"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password">
            <summary>
				<para> Specifies the password for the authenticated user. </para>
		  </summary><value>A string specifying a database user ID. The default is SQL.</value><remarks>
				When a database is created, the password for the DBA user ID is set to SQL. Passwords are case-insensitive if the database is case-insensitive and case-sensitive if the database is case-sensitive. 
		  </remarks><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.EncryptionKey">
            <summary>
				<para> Specifies a key for encrypting the database. </para>
		  </summary><value>A string specifying the encryption key. The default is a null reference (Nothing in Visual Basic) meaning no encryption.</value><remarks>
				<para> All connections must use the same key as was specified when the database was created. Lost or forgotten keys result in completely inaccessible databases. </para>
				<para> As with all passwords, it is best to choose a key value that cannot be easily guessed. The key can be of arbitrary length, but generally the longer the key, the better, because a shorter key is easier to guess than a longer one. As well, including a combination of numbers, letters, and special characters decreases the chances of someone guessing the key. </para>
		  </remarks><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.ChangeEncryptionKey(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.CacheSize">
            <summary>
				<para> Specifies the size of the cache. </para>
		  </summary><value>A string specifying the cache size. The default is a null reference (Nothing in Visual Basic) meaning the default of 16 pages is used.</value><remarks>
				<para> The values for the cache size are specified in units of bytes. Use the suffix k or K to indicate units of kilobytes and the suffix of m or M to indicate megabytes. </para>
				<para> For example, the following sets the cache size to 128 KB. </para>
				<code>connParms.<b>CacheSize = "128k"</b></code>
				<para> The default cache size is sixteen pages. Using the default page size of 4 KB, the default cache size is therefore 64 KB. The minimum cache size is platform dependent. </para>
				<para> The default cache size is conservative. If your testing shows the need for better performance, you should increase the cache size. </para>
				<para> Increasing the cache size beyond the size of the database itself provides no performance improvement and large cache sizes may interfere with the number of other applications you can use. </para>
				<para> If the cache size is unspecified or improperly specified, the default size is used. </para>

		  </remarks><exception cref="T:System.ArgumentException">
				The value contained a semi-colon (;), parentheses () or curly braces {}. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULConnectionParms.AdditionalParms">
            <summary>
				<para> Specifies additional parameters as a semicolon-separated list of name=value pairs. These are less commonly used parameters. </para>
		  </summary><value>A semicolon-separated list of keyword=value additional parameters. The default is a null reference (Nothing in Visual Basic).</value><remarks>
				<para> The values for the page size and reserve size parameters are specified in units of bytes. Use the suffix k or K to indicate units of kilobytes and the suffix m or M to indicate megabytes. </para>
				<para> Additional parameters are: </para>
				<list type="table">
				<listheader>
					 <term>Keyword</term> <term>Description</term> 
				</listheader>
				<item>
				<term>dbn</term> <term> 
				<para> Identifies a loaded database to which a connection needs to be made. </para>
				<para> When a database is started, it is assigned a database name, either explicitly with the dbn parameter, or by UltraLite using the base of the filename with the extension and path removed. </para>
				<para> When opening connections, UltraLite first searches for a running database with a matching dbn. If one is not found, UltraLite starts a new database using the appropriate database filename parameter (<see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnCE"/> or <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.DatabaseOnDesktop"/>). </para>
				<para> This parameter is required if the application (or UltraLite engine) needs to access two different databases that have the same base filename.</para>
				<para> This parameter is only used when opening a connection with <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/> or <see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>.</para>
				</term> 
				</item>
				<item>
				<term>obfuscate</term> <term> 
				<para> When set to one (1), specifies that the database is to be created with obfuscation. For example: </para>
				<code> createParms.<b>AdditionalParms = "obfuscate=1"</b></code>
				<para> Obfuscation provides security against straightforward attempts to view data in the database directly using a viewing tool. It is not proof against skilled and determined attempts to gain access to the data. Obfuscation has little or no performance impact.</para>
				<para> This parameter is only used when creating a new database with <see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>. </para>

				</term> 
				</item>
				<item>
				</item>
				<item>
				<term>page_size</term> <term> 
				<para> UltraLite databases are stored in pages. I/O operations are carried out one page at a time. The default page size for UltraLite databases is 4 KB. You can specify 2 KB pages using the following storage parameters string:</para>
				<code> connParms.<b>AdditionalParms = "page_size=2k"</b></code>
				<para> Setting a page size of 2 KB reduces the maximum number of tables to approximately 500.</para>
				<para> This parameter is only used when creating a new database with <see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>.</para>

				</term> 
				</item>
				<item>
				</item>
				<item>
				<term>reserve_size</term> <term> 
				<para> Reserves file system space for storage of UltraLite persistent data.</para>
				<para> The reserve_size parameter allows you to pre-allocate the file system space required for your UltraLite database without inserting any data. Reserving file system space can improve performance slightly and also prevent out of memory failures. By default, the persistent storage file only grows when required as the application updates the database.</para>
				<para> Note that reserve_size reserves file system space, which includes the metadata in the persistent store file, and not just the raw data. The metadata overhead, as well as data compression, must be considered when deriving the required file system space from the amount of database data. Running the database with test data and observing the persistent store file size is recommended.</para>
				<para> The reserve_size parameter reserves space by growing the persistent store file to the given reserve size on startup, regardless of whether the file previously existed. The file is never truncated.</para>
				<para> The following parameter string ensures that the persistent store file is at least 2 MB upon startup.</para>
				<code> createParms.<b>AdditionalParms = "reserve_size=2m"</b></code>
				<para> This parameter is only used when opening a connection with <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Open"/> or <see cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>. </para>

				</term> 
				</item>
				</list>
		  </remarks><exception cref="T:System.ArgumentException">
				The value contained parentheses () or curly braces {}. 
		  </exception>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULConnectionParms.UnusedEvent">
            <summary>
				<para> Unused. </para>
		  </summary><remarks>
				This public Event is provided to fix a Visual Studio .NET bug relating to the integration of this class in Visual Basic .NET projects. It has no functional use. 
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULConnectionParms.UnusedEventHandler">
            <summary>
				<para> <b>UL Ext.: </b> Unused.</para>
		  </summary><remarks>
				<para>This public Delegate is provided to fix a Visual Studio .NET bug relating to the integration of this class in Visual Basic .NET projects. It has no functional use.</para>
		  </remarks><param name="sender">
				Object that is the sender. 
		  </param><param name="args">
				Event arguments. 
		  </param>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULCursorSchema">
            <summary>
				<para><b>UL Ext.: </b> Represents the schema of an UltraLite.NET cursor. </para>
		  </summary><remarks>
				<para> This class is an abstract base class of the <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/> and <see cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/> classes. </para>
				<para><b>Note to users porting from the iAnywhere.UltraLite namespace: </b> Column IDs are 0-based, not 1-based as they are in the iAnywhere.UltraLite namespace.</para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.#ctor">
            <summary> Constructor.
            Public to assembly only.
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.Open(iAnywhere.Data.UltraLite.ULConnection,System.Int32)">
            <summary>
            Opens this schema instance for use.  Public to package only.
            Assumes cursorSchemaSlot >= 0.
            </summary>
            <param name="conn">Connection that opened the cursor schema</param>
            <param name="cursorSchemaSlot">jni slot for key of cursor schema</param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnID(System.String)">
            <summary>
				<para> Returns the column ID of the named column. </para>
		  </summary><remarks>
				<para> Column IDs range from 0 to <see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1, inclusively. </para>
				<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
				<para> Column IDs and counts may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		  </remarks><param name="name">
				The name of the column. 
		  </param><returns>
		  The column ID of the named column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnName(System.Int32)">
            <summary>
				<para> Returns the name of the column identified by the specified column ID. </para>
		  </summary><remarks>
				<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
				<para> Column IDs and count may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		  </remarks><param name="columnID">
				ID of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. 
		  </param><returns>
		  The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)">
            <summary>
				<para>Returns the UltraLite.NET data type of the column identified by the specified column ID. </para>
		  </summary><param name="columnID">
				ID of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. 
		  </param><returns>
		  A ULDbType enumerated integer. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="T:iAnywhere.Data.UltraLite.ULDbType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSize(System.Int32)">
            <summary>
				<para> Returns the size of the column identified by the specified column ID if the column is a sized column (SQL type BINARY or CHAR). </para>
		  </summary><param name="columnID">
				ID of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. 
		  </param><returns>
		  The size of the specified sized column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnScale(System.Int32)">
            <summary>
				<para> Returns the scale of the column identified by the specified column ID if the column is a numeric column (SQL type NUMERIC). </para>
		  </summary><param name="columnID">
				ID of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. 
		  </param><returns>
		  The scale of the specified numeric column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnPrecision(System.Int32)">
            <summary>
				<para> Returns the precision of the column identified by the specified column ID if the column is a numeric column (SQL type NUMERIC). </para>
		  </summary><param name="columnID">
				ID of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. 
		  </param><returns>
		  The precision of the specified numeric column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetSchemaTable">
            <summary>
				<para>Returns a <see cref="T:System.Data.DataTable"/> that describes the column schema of the <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/>. </para>
		  </summary><remarks>
				<para>For more information see <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/>.</para>
		  </remarks><returns>
		  <para>A <see cref="T:System.Data.DataTable"/> that describes the column schema.</para>
		  </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.Finalize">
            <summary>
				<para> Releases the unmanaged resources used by the ULCursorSchema. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetNativeKey">
            <summary>
            Help function to get the native key associated with this schema.
            </summary>
            <returns>The key</returns>
            <exception cref="T:iAnywhere.Data.UltraLite.ULException">If schema is closed.</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCursorSchema.Name">
            <summary>
				<para>Returns the name of the cursor. </para>
		  </summary><value>The name of the cursor as a string.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCursorSchema.IsOpen">
            <summary>
				<para>Checks whether the cursor schema is currently open. </para>
		  </summary><value>True if the cursor schema is currently open, false if the cursor schema is closed.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount">
            <summary>
				<para> Returns the number of columns in the cursor. </para>
		  </summary><value>The number of columns in the cursor or 0 if the cursor schema is closed.</value><remarks>
				<para> Column IDs range from 0 to ColumnCount-1, inclusively. </para>
				<para> Column IDs and count may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs">
            <summary>
				<para>Provides data for the <see cref="F:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdated"/> event.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
				<para>Initializes a new instance of the ULRowUpdatedEventArgs class.</para>
		  </summary><param name="row">
				The <see cref="T:System.Data.DataRow"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>. 
		  </param><param name="command">
				The <see cref="T:System.Data.IDbCommand"/> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> is called. 
		  </param><param name="statementType">
				One of the <see cref="T:System.Data.StatementType"/> values that specifies the type of query executed. 
		  </param><param name="tableMapping">
				The <see cref="T:System.Data.Common.DataTableMapping"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>. 
		  </param>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs.Command">
            <summary>
				<para>Returns the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> is called.</para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object executed by the update.</value><remarks>
				<para>This is the strongly typed version of <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs.RecordsAffected">
            <summary>
				<para>Returns the number of rows changed, inserted, or deleted by the execution of the SQL statement. For SELECT statements this value is -1.</para>
		  </summary><value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs">
            <summary>
				<para>Provides data for the <see cref="F:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdating"/> event.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
				<para>Initializes a new instance of the ULRowUpdatingEventArgs class.</para>
		  </summary><param name="row">
				The <see cref="T:System.Data.DataRow"/> to update. 
		  </param><param name="command">
				The <see cref="T:System.Data.IDbCommand"/> to execute during the update. 
		  </param><param name="statementType">
				One of the <see cref="T:System.Data.StatementType"/> values that specifies the type of query executed. 
		  </param><param name="tableMapping">
				The <see cref="T:System.Data.Common.DataTableMapping"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>. 
		  </param>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs.Command">
            <summary>
				<para>Specifies the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> to execute when performing the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object to execute when updating.</value><remarks>
				<para>This is the strongly typed version of <see cref="P:System.Data.Common.RowUpdatingEventArgs.Command"/>.</para>
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventHandler">
            <summary>
				<para>Represents the method that will handle the <see cref="F:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdated"/> event.</para>
		  </summary><param name="sender">
				The connection sending the event. 
		  </param><param name="e">
				The <see cref="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventArgs"/> object that contains the event data. 
		  </param>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventHandler">
            <summary>
				<para>Represents the method that will handle the <see cref="F:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdating"/> event.</para>
		  </summary><param name="sender">
				The connection sending the event. 
		  </param><param name="e">
				The <see cref="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventArgs"/> object that contains the event data. 
		  </param>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDataAdapter">
            <summary>
				<para>Represents a set of commands and a database connection used to fill a <see cref="T:System.Data.DataSet"/> and to update a database.</para>
		  </summary><remarks>
				<para> The <see cref="T:System.Data.DataSet"/> provides a way to work with data offline; that is, away from your UltraLite database. The ULDataAdapter provides methods to associate a <see cref="T:System.Data.DataSet"/> with a set of SQL statements. </para>
				<para>Since UltraLite is a local database and MobiLink has conflict resolution, the use of the ULDataAdapter is limitted. For most purposes, the <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> or <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> classes provide more efficient access to data.</para>
				<para><b>Inherits: </b> <see cref="T:System.Data.Common.DbDataAdapter"/></para>
				<para><b>Implements: </b> <see cref="T:System.Data.IDbDataAdapter"/>, <see cref="T:System.Data.IDataAdapter"/>, <see cref="T:System.IDisposable"/></para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor">
            <summary>
				<para>Initializes a ULDataAdapter object.</para>
		  </summary><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)">
            <summary>
				<para>Initializes a ULDataAdapter object with the specified SELECT statement.</para>
		  </summary><param name="selectCommand">
				A <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is used during <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)"/> to select records from the data source for placement in the <see cref="T:System.Data.DataSet"/>. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)">
            <summary>
				<para>Initializes a ULDataAdapter object with the specified SELECT statement and connection.</para>
		  </summary><param name="selectCommandText">
				A SELECT statement to be used by the <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property of the ULDataAdapter. 
		  </param><param name="selectConnection">
				A <see cref="T:iAnywhere.Data.UltraLite.ULConnection"/> object that defines a connection to a database. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)">
            <summary>
				<para>Initializes a ULDataAdapter object with the specified SELECT statement and connection string.</para>
		  </summary><param name="selectCommandText">
				A SELECT statement to be used by the <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property of the ULDataAdapter. 
		  </param><param name="selectConnectionString">
				A connection string for an UltraLite.NET database. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Dispose">
            <summary>
				<para> Releases the unmanaged resources used by the ULDataAdapter and optionally releases the managed resources. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Dispose(System.Boolean)">
            <summary>
				<para> Releases the unmanaged resources used by the ULDataAdapter and optionally releases the managed resources. </para>
		  </summary><param name="disposing">
				When true, disposes of both managed and unmanaged resources. When false, disposes of only the unmanaged resources. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataSet)">
            <summary>
				<para>Adds or refreshes rows into the <see cref="T:System.Data.DataTable"/> named "Table" of the specified <see cref="T:System.Data.DataSet"/>. The <see cref="T:System.Data.DataTable"/> named "Table" is created and added to the <see cref="T:System.Data.DataSet"/> if necessary.</para>
		  </summary><remarks>
				<para>For large result sets, this can have a significant performance impact. An alternative is to use a <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> when a read-only result set is sufficient, perhaps with SQL statements (ExecuteNonQuery) to carry out modifications. Another alternative is to use a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> that allows read-write access to the database.</para>
				<para> If <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> does not return any rows, no tables are added to the <see cref="T:System.Data.DataSet"/> and no exception is raised. </para>
				<para>For more information, see <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to fill with records and optionally schema. 
		  </param><returns>
		  <para>The number of rows successfully added or refreshed in the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/> or, the <see cref="T:System.Data.DataTable"/> is missing from the <see cref="T:System.Data.DataSet"/> and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingSchemaAction"/> is set to <see cref="F:System.Data.MissingSchemaAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataSet,System.String)">
            <summary>
				<para>Adds or refreshes rows into the named <see cref="T:System.Data.DataTable"/> of the specified <see cref="T:System.Data.DataSet"/>. The <see cref="T:System.Data.DataTable"/> named is created and added to the <see cref="T:System.Data.DataSet"/> if neccessary.</para>
		  </summary><remarks>
				<para>For large result sets, this can have a significant performance impact. An alternative is to use an <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> when a read-only result set is sufficient, perhaps with SQL statements (ExecuteNonQuery) to carry out modifications. Another alternative is to use a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> that allows read-write access to the database.</para>
				<para> If <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> does not return any rows, no tables are added to the <see cref="T:System.Data.DataSet"/> and no exception is raised. </para>
				<para>For more information, see <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to fill with records and optionally schema. 
		  </param><param name="srcTable">
				The name of the source table to use for table mapping. 
		  </param><returns>
		  <para>The number of rows successfully added or refreshed in the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> or <paramref name="srcTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/> or, the <see cref="T:System.Data.DataTable"/> is missing from the <see cref="T:System.Data.DataSet"/> and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingSchemaAction"/> is set to <see cref="F:System.Data.MissingSchemaAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
            <summary>
				<para>Adds or refreshes the specified range of rows into the named <see cref="T:System.Data.DataTable"/> of the specified <see cref="T:System.Data.DataSet"/>. The <see cref="T:System.Data.DataTable"/> named is created and added to the <see cref="T:System.Data.DataSet"/> if neccessary.</para>
		  </summary><remarks>
				<para>Even if you use the startRecord argument to limit the number of records that are copied to the <see cref="T:System.Data.DataSet"/>, all records in the ULDataAdapter query are fetched from the database to the client. For large result sets, this can have a significant performance impact. An alternative is to use an <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> when a read-only result set is sufficient, perhaps with SQL statements (ExecuteNonQuery) to carry out modifications. Another alternative is to use a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> that allows read-write access to the database.</para>
				<para> If <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> does not return any rows, no tables are added to the <see cref="T:System.Data.DataSet"/> and no exception is raised. </para>
				<para>For more information, see <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to fill with records and optionally schema. 
		  </param><param name="startRecord">
				The zero-based record number to start with. 
		  </param><param name="maxRecords">
				The maximum number of records to be read into the <see cref="T:System.Data.DataSet"/>. A value of 0 gets all records found after the start record. 
		  </param><param name="srcTable">
				The name of the source table to use for table mapping. 
		  </param><returns>
		  <para>The number of rows successfully added or refreshed in the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> or <paramref name="srcTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.ArgumentException">
				<para>The <paramref name="startRecord"/> or <paramref name="maxRecords"/> parameter was less than zero.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/> or, the <see cref="T:System.Data.DataTable"/> is missing from the <see cref="T:System.Data.DataSet"/> and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingSchemaAction"/> is set to <see cref="F:System.Data.MissingSchemaAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataTable)">
            <summary>
				<para>Adds or refreshes rows into the specified <see cref="T:System.Data.DataTable"/>.</para>
		  </summary><remarks>
				<para>For large result sets, this can have a significant performance impact. An alternative is to use an <see cref="T:iAnywhere.Data.UltraLite.ULDataReader"/> when a read-only result set is sufficient, perhaps with SQL statements (ExecuteNonQuery) to carry out modifications. Another alternative is to use a <see cref="T:iAnywhere.Data.UltraLite.ULTable"/> that allows read-write access to the database.</para>
				<para> If <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> does not return any rows, no tables are added to the and no exception is raised. </para>
				<para>For more information, see <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)"/>.</para>
		  </remarks><param name="dataTable">
				A <see cref="T:System.Data.DataTable"/> to fill with records and optionally schema. 
		  </param><returns>
		  <para>The number of rows successfully added or refreshed in the <see cref="T:System.Data.DataTable"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
            <summary>
				<para>Adds a <see cref="T:System.Data.DataTable"/> named "Table" to a <see cref="T:System.Data.DataSet"/> and configures the schema to match the schema in the data source.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to fill with the schema. 
		  </param><param name="schemaType">
				One of the <see cref="T:System.Data.SchemaType"/> values that specify how to insert the schema. 
		  </param><returns>
		  <para>A reference to a collection of <see cref="T:System.Data.DataTable"/> objects that were added to the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
            <summary>
				<para>Adds a <see cref="T:System.Data.DataTable"/> named "Table" to a <see cref="T:System.Data.DataSet"/> and configures the schema to match the schema in the data source.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to fill with the schema. 
		  </param><param name="schemaType">
				One of the <see cref="T:System.Data.SchemaType"/> values that specify how to insert the schema. 
		  </param><param name="srcTable">
				The name of the source table to use for table mapping. 
		  </param><returns>
		  <para>A reference to a collection of <see cref="T:System.Data.DataTable"/> objects that were added to the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> or <paramref name="srcTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
            <summary>
				<para>Configures the schema of a <see cref="T:System.Data.DataTable"/> to match the schema in the data source.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)"/>.</para>
		  </remarks><param name="dataTable">
				A <see cref="T:System.Data.DataTable"/> to fill with the schema. 
		  </param><param name="schemaType">
				One of the <see cref="T:System.Data.SchemaType"/> values that specify how to insert the schema. 
		  </param><returns>
		  <para>A reference to the <see cref="T:System.Data.DataTable"/> object that contains the schema.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.GetFillParameters">
            <summary>
				<para>Returns the parameters set by the user when executing a SELECT statement.</para>
		  </summary><returns>
		  <para>An array of <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> objects that contains the parameters set by the user.</para>
		  </returns>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Update(System.Data.DataSet)">
            <summary>
				<para>Updates the rows in the database with the changes made to the <see cref="T:System.Data.DataTable"/> named "Table" of the specified <see cref="T:System.Data.DataSet"/>.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to update with records from. 
		  </param><returns>
		  <para>The number of rows successfully updated from the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/> or, the <see cref="T:System.Data.DataTable"/> is missing from the <see cref="T:System.Data.DataSet"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Update(System.Data.DataSet,System.String)">
            <summary>
				<para>Updates the rows in the database with the changes made to the named <see cref="T:System.Data.DataTable"/> of the specified <see cref="T:System.Data.DataSet"/>.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)"/>.</para>
		  </remarks><param name="dataSet">
				A <see cref="T:System.Data.DataSet"/> to update with records from. 
		  </param><param name="srcTable">
				The name of the source table to use for table mapping. 
		  </param><returns>
		  <para>The number of rows successfully updated from the <see cref="T:System.Data.DataSet"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataSet"/> or <paramref name="srcTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/> or, the <see cref="T:System.Data.DataTable"/> is missing from the <see cref="T:System.Data.DataSet"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Update(System.Data.DataTable)">
            <summary>
				<para>Updates the rows in the database with the changes made to the specified <see cref="T:System.Data.DataTable"/>.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)"/>.</para>
		  </remarks><param name="dataTable">
				A <see cref="T:System.Data.DataTable"/> to update from. 
		  </param><returns>
		  <para>The number of rows successfully updated from the <see cref="T:System.Data.DataTable"/>.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataTable"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataAdapter.Update(System.Data.DataRow[])">
            <summary>
				<para>Updates the rows in the database with the changes made to the specified <see cref="T:System.Data.DataRow"/> array.</para>
		  </summary><remarks>
				<para>For more information, see <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])"/>.</para>
		  </remarks><param name="dataRows">
				An array of <see cref="T:System.Data.DataRow"/> to update from. 
		  </param><returns>
		  <para>The number of rows successfully updated from the <see cref="T:System.Data.DataRow"/> array.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="dataRows"/> parameter is invalid.</para>
		  </exception><exception cref="T:System.InvalidOperationException">
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand"/> property is invalid or, the table mapping is missing and <see cref="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction"/> is set to <see cref="F:System.Data.MissingMappingAction.Error"/>.</para>
		  </exception>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdated">
            <summary>
				<para>Occurs during an update after a command is executed against the data source. When an attempt to update is made, the event fires.</para>
		  </summary><remarks>
				<para>To process row updated events, you must create a <see cref="T:iAnywhere.Data.UltraLite.ULRowUpdatedEventHandler"/> delegate and attach it to this event.</para>
		  </remarks>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULDataAdapter.RowUpdating">
            <summary>
				<para>Occurs during an update before a command is executed against the data source. When an attempt to update is made, the event fires.</para>
		  </summary><remarks>
				<para>To process row updating events, you must create a <see cref="T:iAnywhere.Data.UltraLite.ULRowUpdatingEventHandler"/> delegate and attach it to this event.</para>
		  </remarks>
        </member>
        <member name="E:iAnywhere.Data.UltraLite.ULDataAdapter.FillError">
            <summary>
				<para>Occurs when an error is detected during a fill operation.</para>
		  </summary><remarks>
				<para>The FillError event allows you to determine whether or not the fill operation should continue after the error occurs.</para>
				<para> Examples of when the FillError event might occur are: </para>
				<list type="bullet">
				<item>
				The data being added to a DataSet cannot be converted to a common language runtime type without losing precision. 
				</item>
				<item>
				The row being added contains data that violates a Constraint that must be enforced on a DataColumn in the DataSet. 
				</item>
				</list>
				<para>To process row fill error events, you must create a <see cref="T:System.Data.FillErrorEventHandler"/> delegate and attach it to this event.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.DeleteCommand">
            <summary>
				<para>Specifies a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed against the database when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> is called to delete rows in the database that correspond to deleted rows in the <see cref="T:System.Data.DataSet"/>.</para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed to delete rows in the database that correspond to deleted rows in the <see cref="T:System.Data.DataSet"/>.</value><remarks>
				<para>When DeleteCommand is assigned to an existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object, the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object is not cloned. The DeleteCommand maintains a reference to the existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>.</para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbDataAdapter.DeleteCommand"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.InsertCommand">
            <summary>
				<para>Specifies a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed against the database when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> is called to insert rows in the database that correspond to inserted rows in the <see cref="T:System.Data.DataSet"/>.</para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed to insert rows in the database that correspond to inserted rows in the <see cref="T:System.Data.DataSet"/>.</value><remarks>
				<para>When InsertCommand is assigned to an existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object, the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object is not cloned. The InsertCommand maintains a reference to the existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>.</para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbDataAdapter.InsertCommand"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.SelectCommand">
            <summary>
				<para>Specifies a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> that is used during <see cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.Fill(System.Data.DataSet)"/> or <see cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)"/> to obtain a result set from the database for copying into a <see cref="T:System.Data.DataSet"/>.</para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed to fill the <see cref="T:System.Data.DataSet"/>.</value><remarks>
				<para>When SelectCommand is assigned to an existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object, the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object is not cloned. The SelectCommand maintains a reference to the existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>.</para>
				<para>If the SelectCommand does not return any rows, no tables are added to the <see cref="T:System.Data.DataSet"/>, and no exception is raised. The SELECT statement can also be specified in the <see cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(iAnywhere.Data.UltraLite.ULCommand)"/>, <see cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,iAnywhere.Data.UltraLite.ULConnection)"/>, or <see cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.#ctor(System.String,System.String)"/> constructors. </para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbDataAdapter.SelectCommand"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.UpdateCommand">
            <summary>
				<para>Specifies a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed against the database when <see cref="M:iAnywhere.Data.UltraLite.ULDataAdapter.Update(System.Data.DataSet)"/> is called to update rows in the database that correspond to updated rows in the <see cref="T:System.Data.DataSet"/>.</para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object that is executed to update rows in the database that correspond to updated rows in the <see cref="T:System.Data.DataSet"/>.</value><remarks>
				<para>When UpdateCommand is assigned to an existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object, the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object is not cloned. The UpdateCommand maintains a reference to the existing <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>.</para>
				<para>If execution of this command returns rows, these rows may be merged with the <see cref="T:System.Data.DataSet"/> depending on how you set the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.UpdatedRowSource"/> property of the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> object.</para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbDataAdapter.UpdateCommand"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingMappingAction">
            <summary>
				<para>Determines the action to take when incoming data does not have a matching table or column.</para>
		  </summary><value>One of the <see cref="T:System.Data.MissingMappingAction"/> values. The default is <see cref="F:System.Data.MissingMappingAction.Passthrough"/>.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.MissingSchemaAction">
            <summary>
				<para>Determines the action to take when the existing <see cref="T:System.Data.DataSet"/> schema does not match incoming data.</para>
		  </summary><value>One of the <see cref="T:System.Data.MissingSchemaAction"/> values. The default is <see cref="F:System.Data.MissingSchemaAction.Add"/>.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.TableMappings">
            <summary>
				<para>Returns a collection that provides the master mapping between a source table and a <see cref="T:System.Data.DataTable"/></para>
		  </summary><value>A collection of <see cref="T:System.Data.Common.DataTableMapping"/> objects providing the master mapping between source tables and <see cref="T:System.Data.DataTable"/>s. The default value is an empty collection.</value><remarks>
				<para>When reconciling changes, the ULDataAdapter uses the <see cref="T:System.Data.Common.DataTableMappingCollection"/> collection to associate the column names used by the data source with the column names used by the <see cref="T:System.Data.DataSet"/>. </para>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDataAdapter.TableMappings"/>.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.ContinueUpdateOnError">
            <summary>
				<para>Specifies whether to generate an exception when an error is encountered during a row update.</para>
		  </summary><value>True to continue the update without generating an exception, false to generate an exception. The default is false. </value><remarks>
				<para>If ContinueUpdateOnError is true, no exception is thrown when an error occurs during the update of a row. The update of the row is skipped and the error information is placed in the <see cref="P:System.Data.DataRow.RowError"/> property of the row. The ULDataAdapter continues to update subsequent rows.</para>
				<para> If ContinueUpdateOnError is false, an exception is thrown when an error occurs. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataAdapter.AcceptChangesDuringFill">
            <summary>
				<para>Specifies whether <see cref="M:System.Data.DataRow.AcceptChanges"/> is called on a <see cref="T:System.Data.DataRow"/> after it is added to the <see cref="T:System.Data.DataTable"/>. </para>
		  </summary><value>True to specify that the ULDataAdapter should call the <see cref="M:System.Data.DataRow.AcceptChanges"/> function on the <see cref="T:System.Data.DataRow"/>; false if AcceptChanges is not to be called, and the newly added rows are treated as inserted rows. The default is true. </value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDatabaseManager">
            <summary>
				<para><b>UL Ext.: </b> Manages synchronization listeners and the UltraLite.NET runtime type. The ULDatabaseManager class also allows you to drop (delete) UltraLite.NET databases. </para>
		  </summary><remarks>
				<para> This class is a singleton class whose only instance is accessible only through the static (Shared in Visual Basic) <see cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseManager"/> property. </para>
				<para>To use the UltraLite Engine runtime of UltraLite.NET, set <see cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/> to the appropriate value before using any other UltraLite.NET API.</para>
		  </remarks><example>
				<para>The following example selects the UltraLite Engine runtime and creates a connection.</para>
				<code>
' Visual Basic
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT
Dim conn As ULConnection = new ULConnection
' The RuntimeType is now locked

// C#
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT;
ULConnection conn = new ULConnection();
// The RuntimeType is now locked
</code>

		  </example>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.#ctor">
            <summary><para>User access through ULConnection class.
            </para><para>
            Initializes the iAnywhere.Data.UltraLite assembly using the
            runtime specified to the static ULRuntimeType property.
            Only one
            instance of ULDatabaseManager can be created per application.
            </para></summary>
            <seealso cref="T:iAnywhere.Data.UltraLite.ULRuntimeType"/>
            <exception cref="T:iAnywhere.Data.UltraLite.ULException">if called more than once per
            application.
            </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)">
            <summary>
				<para> Specifies the listener object used to process the specified server synchronization message. </para>
		  </summary><remarks>
				<para> The parameter <paramref name="appClassName"/> is the unique identifier used to identify the application. The application may only use one <paramref name="appClassName"/> at a time. While a listener is registered with a particular <paramref name="appClassName"/>, calls to <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/> or <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/> with a different <paramref name="appClassName"/> fail.</para>
				<para>To remove the listener for a particular message, call <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/> with a null reference (Nothing in Visual Basic) as the <paramref name="listener"/> parameter.</para>
				<para> To remove all listeners, call <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/> with a null reference (Nothing in Visual Basic) for all parameters. </para>
				<para> Applications should remove all listeners before exiting.</para>
		  </remarks><param name="messageName">
				The name of the message. 
		  </param><param name="appClassName">
				The unique class name for the application. This is a unique identifier used to identify the application. 
		  </param><param name="listener">
				The <see cref="T:iAnywhere.Data.UltraLite.ULServerSyncListener"/> object. Use null (Nothing in Visual Basic) to remove the previous listener. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><example>
				<para>Refer to the <see cref="M:iAnywhere.Data.UltraLite.ULServerSyncListener.ServerSyncInvoked(System.String)"/> documentation for an example of <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/>.</para>
		  </example>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)">
            <summary>
				<para> Specifies the listener object used to process ActiveSync calls from the MobiLink provider for ActiveSync. </para>
		  </summary><remarks>
				<para>The parameter <paramref name="appClassName"/> is the unique identifier used to identify the application. The application can only use one <paramref name="appClassName"/> at a time. While a listener is registered with a particular <paramref name="appClassName"/>, calls to <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/> or <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/> with a different <paramref name="appClassName"/> fail. </para>
				<para>To remove the ActiveSync listener, call <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/> with a null reference (Nothing in Visual Basic) as the <paramref name="listener"/> parameter.</para>
				<para> To remove all listeners, call <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.Data.UltraLite.ULServerSyncListener)"/> with a null reference (Nothing in Visual Basic) for all parameters. </para>
				<para> Applications should remove all listeners prior to exiting.</para>
		  </remarks><param name="appClassName">
				The unique class name for the application. This is the class name used when the application is registered for use with ActiveSync. 
		  </param><param name="listener">
				The <see cref="T:iAnywhere.Data.UltraLite.ULActiveSyncListener"/> object. Use null (Nothing in Visual Basic) to remove the previous listener. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><example>
				<para>Refer to the <see cref="M:iAnywhere.Data.UltraLite.ULActiveSyncListener.ActiveSyncInvoked(System.Boolean)"/> documentation for an example of <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/>.</para>
		  </example><seealso cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.DropDatabase(iAnywhere.Data.UltraLite.ULConnectionParms)">
            <summary>
				<para>Deletes the specified database. </para>
				<para>You cannot drop a database that has open connections.</para>
		  </summary><param name="parms">
				The parameters for identifying a database. See <see cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/> for more information. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.OpenWithCreate"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeError(iAnywhere.Data.UltraLite.ULConnection,iAnywhere.Data.UltraLite.ULSQLCode)">
            <summary>Throws runtime ULLException
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseManager.Finalize">
            <summary>
				<para> Releases the unmanaged resources used by the ULDatabaseManager. </para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType">
            <summary>
				<para>Specifies the UltraLite.NET runtime type. The runtime type must be selected before using any other UltraLite.NET API. </para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULRuntimeType"/> value identifying the type of the unmanaged UltraLite.NET runtime.</value><example>
				<para>The following example selects the UltraLite Engine runtime and creates a connection.</para>
				<code>
' Visual Basic
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT
Dim conn As ULConnection = new ULConnection
' The RuntimeType is now locked

// C#
ULDatabaseManager.RuntimeType = ULRuntimeType.UL_ENGINE_CLIENT;
ULConnection conn = new ULConnection();
// The RuntimeType is now locked
</code>

		  </example>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRuntimeType">
            <summary>
				<para><b>UL Ext.: </b> Enumerates the types of UltraLite.NET runtimes.</para>
		  </summary><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseManager.RuntimeType"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULRuntimeType.STANDALONE_UL">
            <summary>
				<para>Selects the standalone UltraLite.NET runtime.</para>
				<para>The standalone runtime accesses databases directly. Databases are accessed more quickly this way, but cannot be shared.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULRuntimeType.UL_ENGINE_CLIENT">
            <summary>
				<para>Selects the UltraLite engine runtime.</para>
				<para>The UltraLite.NET engine client communicates with the UltraLite engine to access databases. This means that databases can be shared by different applications.</para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDatabaseSchema">
            <summary>
				<para> <b>UL Ext.: </b> Represents the schema of an UltraLite.NET database. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. A <see cref="T:iAnywhere.Data.UltraLite.ULDatabaseSchema"/> object is attached to a connection as its <see cref="P:iAnywhere.Data.UltraLite.ULConnection.Schema"/> property and is only valid while that connection is open. </para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.#ctor(iAnywhere.Data.UltraLite.ULConnection)">
            <summary> Constructor. (should only be called by
            ULConnection._schema = new ULDatabaseSchema( this )).
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetDatabaseProperty(System.String)">
            <summary>
				<para>Returns the value of the specified database property. </para>
		  </summary><remarks>
				<para> Recognized properties are: </para>
				<list type="bullet">
				<item>
				<para>"DATE_FORMAT" The date format used for string conversions by the database. </para>
				<para> This format is not necessarily the same as the one used by <see cref="T:System.DateTime"/>. </para>
				</item>
				<item>
				<para>"DATE_ORDER" The date order used for string conversions by the database. </para>
				</item>
				<item>
				<para>"NEAREST_CENTURY" The nearest century used for string conversions by the database. </para>
				</item>
				<item>
				<para>"PRECISION" The floating point precision used for string conversions by the database. </para>
				</item>
				<item>
				<para>"SCALE" The minimum number of digits after the decimal point when an arithmetic result is truncated to the maximum PRECISION during string conversions by the database. </para>
				</item>
				<item>
				<para>"TIME_FORMAT" The time format used for string conversions by the database. </para>
				<para> This format is not necessarily the same as the one used by <see cref="T:System.TimeSpan"/>. </para>
				</item>
				<item>
				<para>"TIMESTAMP_FORMAT" The timestamp format used for string conversions by the database. </para>
				<para> This format is not necessarily the same as the one used by <see cref="T:System.DateTime"/>. </para>
				</item>
				<item>
				<para>"TIMESTAMP_INCREMENT" The minimum difference between two unique timestamps, in nanoseconds (1,000,000th of a second). </para>
				</item>
				</list>
		  </remarks><param name="name">
				The name of the database property to inquire about.
		  </param><returns>
		  The value of the property as a string.
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.ApplyFile(iAnywhere.Data.UltraLite.ULConnectionParms,iAnywhere.Data.UltraLite.ULSchemaUpgradeListener)">
            <summary>
				<para>Applies a database schema file to the database while allowing a listener to monitor the progress.</para>
		  </summary><remarks>
				<para>All instances of <see cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/>, <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/>, <see cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/>, and <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> will be invalidated and will need to be replaced. </para>
		  </remarks><param name="parms">
				Parameters for specifying the schema to be applied to the database. See <see cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/> for more information. 
		  </param><param name="listener">
				The <see cref="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeListener"/> object to receive schema upgrade progress events. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.ApplyFile(iAnywhere.Data.UltraLite.ULConnectionParms)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.ApplyFile(iAnywhere.Data.UltraLite.ULConnectionParms)">
            <summary>
				<para>Applies a database schema file to the database.</para>
		  </summary><remarks>
				<para>All instances of <see cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/>, <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/>, <see cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/>, and <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> will be invalidated and will need to be replaced. </para>
		  </remarks><param name="parms">
				Parameters for specifying the schema to be applied to the database. See <see cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/> for more information. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.ApplyFile(iAnywhere.Data.UltraLite.ULConnectionParms,iAnywhere.Data.UltraLite.ULSchemaUpgradeListener)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULConnectionParms"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetTableName(System.Int32)">
            <summary>
				<para> Returns the name of the table identified by the specified table ID. </para>
		  </summary><remarks>
				<para> Table IDs may change during a schema upgrade. To correctly identify a table, access it by name or refresh the cached IDs after a schema upgrade. </para>
		  </remarks><param name="tableID">
				The ID of the table. The value must be in range [1,TableCount].
		  </param><returns>
		  The table name as a string.
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.TableCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationName(System.Int32)">
            <summary>
				<para> Returns the name of the publication identified by the specified publication ID. Publication IDs are not publication masks. </para>
		  </summary><remarks>
				<para> Note: Publication IDs, masks, and counts may change during a schema upgrade. To correctly identify a publication, access it by name or refresh the cached IDs, masks, and counts after a schema upgrade. </para>
		  </remarks><param name="pubID">
				The ID of the publication. The value must be in the range [1,<see cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.PublicationCount"/>]. 
		  </param><returns>
		  The publication name as a string.
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.PublicationCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationSchema(System.String)">
            <summary>
				<para> Returns the publication schema corresponding to the named publication. </para>
		  </summary><param name="name">
				The name of the publication. 
		  </param><returns>
		  The <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> object representing the named publication.
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationName(System.Int32)"/><seealso cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetTableCountInPublications(System.Int32)">
            <summary>
				<para> Returns the number of tables included in the specified publication mask. </para>
		  </summary><remarks>
				<para> The count will not include tables whose names end in _nosync. </para>
				<para> Note: Publication IDs, masks, and counts may change during a schema upgrade. To correctly identify a publication, access it by name or refresh the cached IDs, masks, and counts after a schema upgrade. </para>
		  </remarks><param name="mask">
				The set of publications to check. See <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> for information on building publication masks.
		  </param><returns>
		  The number of tables included in set of publications. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDatabaseSchema._conn">
            <summary> Does not have it's own _jniSlot because it is really
            part of a connection and is open when the connection is open
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.TableCount">
            <summary>
				<para>The number of tables in the database. </para>
		  </summary><value>The number of tables in the database or zero if the connection is not open.</value><remarks>
				<para> Table IDs range from 1 to TableCount, inclusively. </para>
				<para> Note: Table IDs and counts may change during a schema upgrade. To correctly identify a table, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.PublicationCount">
            <summary>
				<para> The number of publications in the database.</para>
		  </summary><value>The numberof publications in the database or zero if the connection is not open.</value><remarks>
				<para> Publication IDs range from 1 to PublicationCount, inclusively. Publication IDs are not publication masks.</para>
				<para> Note: Publication IDs, masks, and counts may change during a schema upgrade. To correctly identify a publication, access it by name or refresh the cached IDs, masks, and counts after a schema upgrade. </para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationName(System.Int32)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.Signature">
            <summary>
				<para>The signature of this database. </para>
		  </summary><value>A string representing the signature of the currently opened database.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred.
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.IsOpen">
            <summary>
				<para> Whether or not the database schema is open. </para>
		  </summary><value>True if this database schema is currently open, false if this database schema is currently closed. </value><remarks>
				<para>A ULDatabaseSchema object is open only if the connection it is attached to is open.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.IsCaseSensitive">
            <summary>
				<para> Checks whether the database is case sensitive. </para>
		  </summary><value>True if the database is case sensitive, and false if the database is case insensitive. </value><remarks>
				<para> Database case sensitivity affects how indexes on tables and result sets are sorted. Case sensitivity also affects how <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.UserID"/> and <see cref="P:iAnywhere.Data.UltraLite.ULConnectionParms.Password"/> are verified. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.CollationName">
            <summary>
				<para> The name of the database's collation sequence. </para>
		  </summary><value>A string representing the database's collation sequence.</value><remarks>
				<para> The database collation sequence affects how indexes on tables and result sets are sorted. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDataConvert">
            <summary>
            Summary description for XXXDataConvert.
            </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDataReader">
            <summary>
				<para> Represents a read-only bi-directional cursor in an UltraLite database. Cursors are sets of rows from either a table or the result set from a query. </para>
		  </summary><remarks>
				<para>There is no constructor for ULDataReader. To get a ULDataReader object, execute a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>:</para>
				<code>
' Visual Basic
Dim cmd As ULCommand = new ULCommand( _
    "SELECT emp_id FROM employee", conn _
  )
Dim reader As ULDataReader = cmd.ExecuteReader()

// C#
ULCommand cmd = new ULCommand(
    "SELECT emp_id FROM employee", conn
  );
ULDataReader reader = cmd.ExecuteReader();
</code>
				<para><b>UL Ext.: </b> The ADO.NET standard only requires forward-only motion through the result set, but ULDataReader is bi-directional. ULDataReader's Move methods provide you with full flexibility when moving through results. </para>
				<para> ULDataReader is a read-only result set. If you need a more flexible object to manipulate results, use a <see cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/>. The ULDataReader retrieves rows as needed, whereas the <see cref="T:iAnywhere.Data.UltraLite.ULDataAdapter"/> must retrieve all rows of a result set before you can carry out any action on the object. For large result sets, this difference gives the ULDataReader a much faster response time. </para>
				<para><b>UL Ext.: </b> All columns of a ULDataReader may be retrieved using <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetString(System.Int32)"/>.</para>
				<para><b> Implements: </b> <see cref="T:System.Data.IDataReader"/>, <see cref="T:System.Data.IDataRecord"/>, <see cref="T:System.IDisposable"/></para>

		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.#ctor(iAnywhere.Data.UltraLite.ULConnection,System.Int32,iAnywhere.Data.UltraLite.ULCursorSchema,iAnywhere.Data.UltraLite.ULPreparedStatement,System.Data.CommandBehavior)">
            <summary> Constructor.  Public to package only.
            </summary>
            <param name="conn">Connection to open the cursor with</param>
            <param name="cSlot">Cursor's native slot (or -1)</param>
            <param name="schema">schema of cursor</param>
            <param name="cmd">Command that opened the result set</param>
            <param name="cmdBehavior">Behavior flags</param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Close">
            <summary>
				<para> Closes the cursor. </para>
		  </summary><remarks>
				<para> It is not an error to close a cursor that is already closed. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Dispose">
            <summary>
				<para> Releases the unmanaged resources used by the ULDataReader and optionally releases the managed resources. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable">
            <summary>
				<para> Returns a <see cref="T:System.Data.DataTable"/> that describes the column metadata of the ULDataReader. </para>
		  </summary><remarks>
				<para>The GetSchemaTable method returns metadata about each column in the following order: </para>
				<list type="table">
				<listheader>
					 <term>DataTable Column</term> <term>Description</term> 
				</listheader>
				<item>
				<term>ColumnName</term> <term>The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. Note that in result sets, not all columns have names and not all column names are unique. </term> 
				</item>
				<item>
				<term>ColumnOrdinal</term> <term>The ID of the column. The value is in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1].</term> 
				</item>
				<item>
				<term>ColumnSize</term> <term>For sized columns, the maximum length of a value in the column. For other columns, this is the size in bytes of the data type.</term> 
				</item>
				<item>
				<term>NumericPrecision</term> <term>The precision of a numeric column (ProviderType <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Decimal"/> or <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Numeric"/>) or DBNull if the column is not numeric.</term> 
				</item>
				<item>
				<term>NumericScale</term> <term>The scale of a numeric column (ProviderType <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Decimal"/> or <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Numeric"/>) or DBNull if the column is not numeric.</term> 
				</item>
				<item>
				<term>IsUnique</term> <term>True if the column is a non-computed unique column in the table (BaseTableName) it is taken from.</term> 
				</item>
				<item>
				<term>IsKey</term> <term>True if the column is one of a set of columns in the result set that taken together from a unique key for the result set. The set of columns with IsKey set to true does not need to be the minimal set that uniquely identifies a row in the result set. </term> 
				</item>
				<item>
				<term>BaseCatalogName</term> <term>The name of the catalog in the database that contains the column. For UltraLite.NET, this value is always DBNull.</term> 
				</item>
				<item>
				<term>BaseColumnName</term><term>The original name of the column in the table BaseTableName of the database or DBNull if the column is computed or if this information cannot be determined.</term> 
				</item>
				<item>
				<term>BaseSchemaName</term> <term>The name of the schema in the database that contains the column. For UltraLite.NET, this value is always DBNull.</term> 
				</item>
				<item>
				<term>BaseTableName</term> <term>The name of the table in the database that contains the column, or DBNull if column is computed or if this information cannot be determined.</term> 
				</item>
				<item>
				<term>DataType</term> <term>The .NET data type that is most appropriate for this type of column.</term> 
				</item>
				<item>
				<term>AllowDBNull</term> <term>True if the column is nullable, false if the column is not nullable or if this information can not be determined. </term> 
				</item>
				<item>
				<term>ProviderType</term> <term>The <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> of the column.</term> 
				</item>
				<item>
				<term>IsIdentity</term> <term>True if the column is an identity column, false if it is not an identity column. For UltraLite.NET, this value is always false.</term> 
				</item>
				<item>
				<term>IsAutoIncrement</term> <term>True if the column is an autoincrement or global autoincrement column, false otherwise (or if this information can not be determined).</term> 
				</item>
				<item>
				<term>IsRowVersion</term> <term>True if the column contains a persistent row identifier that cannot be written to, and has no meaningful value except to identity the row. For UltraLite.NET, this value is always false.</term> 
				</item>
				<item>
				<term>IsLong</term> <term>True if the column is a <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar"/> or a <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/> column, false otherwise.</term> 
				</item>
				<item>
				<term>IsReadOnly</term> <term>True if the column is read-only, false if the column is modifiable or if its access cannot be determined.</term> 
				</item>
				<item>
				BaseCatalogName BaseCatalogName 
				</item>
				<item>
				h</item>
				</list>
		  </remarks><returns>
		  <para>A <see cref="T:System.Data.DataTable"/> describing the schema of each column in the ULDataReader.</para>
		  </returns><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.NextResult">
            <summary>
				<para>Advances the ULDataReader to the next result when reading the results of batch SQL statements. </para>
		  </summary><remarks>
				<para><b>UL Ext.: </b> UltraLite.NET does not support batches of SQL statements, hence the ULDataReader is always positioned on the first and only result set. Calling NextResult has no effect.</para>
		  </remarks><returns>
		  <para>True if there are more result sets, false otherwise. For UltraLite.NET, always returns false.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				The ULDataReader is not opened. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Read">
            <summary>
				<para>Positions the cursor to the next row, or after the last row if the cursor was already on the last row. </para>
		  </summary><remarks>
				<para>This method is identical to the <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.MoveNext"/> method.</para>
		  </remarks><returns>
		  True if successful, false otherwise. For example, the method fails if there are no more rows. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetBoolean(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.Boolean"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.Boolean"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetByte(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as an unsigned 8-bit value (<see cref="T:System.Byte"/>).</para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.Byte"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
				<para>Copies a subset of the value for the specified <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/> column, beginning at the specified offset, to the specified offset of the destination <see cref="T:System.Byte"/> array. </para>
		  </summary><remarks>
				<para> If you pass a <paramref name="dst"/> buffer that is a null reference (Nothing in Visual Basic), GetBytes returns the length of the field in bytes.</para>
				<para>The bytes at position <paramref name="srcOffset"/> through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the value are copied into positions <paramref name="dstOffset"/> through <paramref name="dstOffset"/>+<paramref name="count"/>-1, respectively, of the destination array. If the end of the value is encountered before <paramref name="count"/> bytes are copied, the remainder of the destination array is left unchanged. </para>
				<para> If any of the following is true, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with code <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/> is thrown and the destination is not modified: </para>
				<list type="bullet">
				<item>
				<paramref name="srcOffset"/> is negative. 
				</item>
				<item>
				<paramref name="dstOffset"/> is negative. 
				</item>
				<item>
				<paramref name="count"/> is negative. 
				</item>
				<item>
				<paramref name="dstOffset"/>+<paramref name="count"/> is greater than <paramref name="dst"/>.Length. 
				</item>
				</list>
				<para> For other errors, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with the appropriate error code is thrown. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="srcOffset">
				The start position in the column value. Zero is the beginning of the value. 
		  </param><param name="dst">
				The destination array. 
		  </param><param name="dstOffset">
				The start position in the destination array. 
		  </param><param name="count">
				The number of bytes to be copied. 
		  </param><returns>
		  The actual number of bytes copied. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetChar(System.Int32)">
            <summary>
				<para> This method is not supported in UltraLite.NET.</para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  This method is not supported in UltraLite.NET. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				This method is not supported in UltraLite.NET. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetString(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
				<para>Copies a subset of the value for the specified <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar"/> column, beginning at the specified offset, to the specified offset of the destination <see cref="T:System.Char"/> array. </para>
		  </summary><remarks>
				<para> If you pass a <paramref name="dst"/> buffer that is a null reference (Nothing in Visual Basic), GetChars returns the length of the field in characters.</para>
				<para> The characters at position <paramref name="srcOffset"/> through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the value are copied into positions <paramref name="dstOffset"/> through <paramref name="dstOffset"/>+<paramref name="count"/>-1, respectively, of the destination array. If the end of the value is encountered before <paramref name="count"/> characters are copied, the remainder of the destination array is left unchanged. </para>
				<para> If any of the following is true, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with code <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/> is thrown and the destination is not modified: </para>
				<list type="bullet">
				<item>
				<paramref name="srcOffset"/> is negative. 
				</item>
				<item>
				<paramref name="dstOffset"/> is negative. 
				</item>
				<item>
				<paramref name="count"/> is negative. 
				</item>
				<item>
				<paramref name="dstOffset"/>+<paramref name="count"/> is greater than <paramref name="dst"/>.Length. 
				</item>
				</list>
				<para> For other errors, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with the appropriate error code is thrown. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="srcOffset">
				The start position in the column value. Zero is the beginning of the value. 
		  </param><param name="dst">
				The destination array. 
		  </param><param name="dstOffset">
				The start position in the destination array. 
		  </param><param name="count">
				The number of characters to be copied. 
		  </param><returns>
		  The actual number of characters copied. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetData(System.Int32)">
            <summary>
				<para> This method is not supported in UltraLite.NET.</para>
		  </summary><param name="i">
				An integer value. 
		  </param><returns>
		  This method is not supported in UltraLite.NET. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				This method is not supported in UltraLite.NET. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDataTypeName(System.Int32)">
            <summary>
				<para> Returns the name of the specified column's provider data type.</para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  <para>A string corresponding to the column's <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/>.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDateTime(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.DateTime"/> with millisecond accuracy. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.DateTime"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDecimal(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.Decimal"/>.</para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.Decimal"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetDouble(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.Double"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.Double"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)">
            <summary>
				<para> Returns the <see cref="T:System.Type"/> most appropriate for the specified column.</para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  <para>A <see cref="T:System.Type"/> value for the column.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetDataTypeName(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetFloat(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.Single"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.Single"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetGuid(System.Int32)">
            <summary>
				<para>Returns the value for the specified column as a UUID (<see cref="T:System.Guid"/>). </para>
		  </summary><remarks>
				<para>This method is only valid for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/> or for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/> with length 16. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.Guid"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSize(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetInt16(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as an <see cref="T:System.Int16"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as an <see cref="T:System.Int16"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetInt32(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as an <see cref="T:System.Int32"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as an <see cref="T:System.Int32"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetInt64(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as an <see cref="T:System.Int64"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as an <see cref="T:System.Int64"/> 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetName(System.Int32)">
            <summary>
				<para> Returns the name of the specified column.</para>
		  </summary><remarks>
				<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
				<para>This method is identical to the <see cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnName(System.Int32)"/> method.</para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The name of the column or a null reference (Nothing in Visual Basic) if the column has no name. If the column is aliased in the SQL query, the alias is returned. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)">
            <summary>
				<para> Returns the column ID of the named column. </para>
		  </summary><remarks>
				<para> Column IDs range from 0 to <see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1, inclusively. </para>
				<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
				<para> Column IDs and counts may change during a schema upgrade. To correctly identify a column, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
				<para>This method is identical to the <see cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnID(System.String)"/> method.</para>
		  </remarks><param name="columnName">
				The name of the column. 
		  </param><returns>
		  The column ID of the named column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetString(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.String"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.String"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)">
            <summary>
				<para> Returns the value of the specified column in its native format.</para>
		  </summary><remarks>
				<para>This method is identical in functionality to the <see cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)"/> property.</para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  <para>The column value as the .NET type most appropriate for the column or DBNull if column is NULL.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetValues(System.Object[])">
            <summary>
				<para> Returns all the column values for the current row.</para>
		  </summary><remarks>
				<para>For most applications, the GetValues method provides an efficient means for retrieving all columns, rather than retrieving each column individually.</para>
				<para> You can pass an <see cref="T:System.Object"/> array that contains fewer than the number of columns contained in the resulting row. Only the amount of data the <see cref="T:System.Object"/> array holds is copied to the array. You can also pass an <see cref="T:System.Object"/> array whose length is more than the number of columns contained in the resulting row.</para>
				<para> This method returns DBNull for NULL database columns. For other columns, it returns the value of the column in its native format. </para>
		  </remarks><param name="values">
				The array of <see cref="T:System.Object"/>s to hold the entire row. 
		  </param><returns>
		  <para>The number of column values retrieved. If the length of the array is greater than the number of columns (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>), only FieldCount items are retrieved and the rest of the array is left unchanged.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				<para>The <paramref name="values"/> array is NULL or has zero length.</para>
		  </exception><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.IsDBNull(System.Int32)">
            <summary>
				<para> Checks whether the value from the specified column is NULL. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  True if value is NULL, false if value is not NULL. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetUInt16(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.UInt16"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as an <see cref="T:System.UInt16"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetUInt32(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.UInt32"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as an <see cref="T:System.UInt32"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetUInt64(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.UInt64"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.UInt64"/> 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetTimeSpan(System.Int32)">
            <summary>
				<para> Returns the value for the specified column as a <see cref="T:System.TimeSpan"/> with millisecond accuracy. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as a <see cref="T:System.TimeSpan"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveAfterLast">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor to after the last row of the cursor. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveBeforeFirst">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor to before the first row of the cursor. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveFirst">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor to the first row of the cursor. </para>
		  </summary><returns>
		  True if successful, false otherwise. For example, the method fails if there are no rows. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveLast">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor to the last row of the cursor. </para>
		  </summary><returns>
		  True if successful, false otherwise. For example, the method fails if there are no rows. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveNext">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor to the next row or after the last row if the cursor was already on the last row. </para>
		  </summary><remarks>
				<para>This method is identical to the <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.Read"/> method.</para>
		  </remarks><returns>
		  True if successful, false otherwise. For example, the method fails if there are no more rows. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MovePrevious">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor to the previous row or before the first row. </para>
		  </summary><returns>
		  True if successful, false otherwise. For example, the method fails if there are no more rows. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.MoveRelative(System.Int32)">
            <summary>
				<para><b>UL Ext.: </b> Positions the cursor relative to the current row. </para>
		  </summary><remarks>
				<para> If the row does not exist, the method returns false, and the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>) if <paramref name="offset"/> is positive, and before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>) if the <paramref name="offset"/> is negative. </para>
		  </remarks><param name="offset">
				The number of rows to move. Negative values correspond to moving backwards. 
		  </param><returns>
		  True if successful, false otherwise. For example, the method fails if it positions beyond the first or last row. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32)">
            <summary>
				<para> <b>UL Ext.: </b> Returns the value for the specified column as an array of <see cref="T:System.Byte"/>s. Only valid for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/>, <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/>, or <see cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/>. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  The column value as an array of <see cref="T:System.Byte"/>s. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULDataReader.Finalize">
            <summary>
				<para>Releases the unmanaged resources used by the ULDataReader.</para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.IsClosed">
            <summary>
				<para>Checks whether the cursor is currently open. </para>
		  </summary><value>True if the cursor is currently open, false if the cursor is closed. </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Depth">
            <summary>
				<para> Returns the depth of nesting for the current row. The outermost table has a depth of zero. </para>
		  </summary><value> All UltraLite.NET result sets have a depth of zero. </value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				The ULDataReader is not opened. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.RecordsAffected">
            <summary>
				<para>Returns the number of rows changed, inserted, or deleted by execution of the SQL statement. For SELECT statements or <see cref="F:System.Data.CommandType.TableDirect"/> tables, this value is -1.</para>
		  </summary><value>The number of rows changed, inserted, or deleted by execution of the SQL statement. </value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)">
            <summary>
				<para> Returns the value of the specified column in its native format. In C#, this property is the indexer for the ULDataReader class.</para>
		  </summary><remarks>
				<para>This method is identical in functionality to the <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/> method.</para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><returns>
		  <para>The column value as the .NET type most appropriate for the column or DBNull if column is NULL.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.String)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.String)">
            <summary>
				<para> Returns the value of the specified named column in its native format. In C#, this property is the indexer for the ULDataReader class.</para>
		  </summary><remarks>
				<para>Note that in result sets, not all columns have names and not all column names are unique. If you are not using aliases, the name of a non-computed column is prefixed with the name of the table the column is from. For example, MyTable.ID is the name of the only column in the result set for the query "SELECT ID FROM MyTable".</para>
				<para>When accessing columns multiple times, it is more efficient to access columns by column ID than by name.</para>
				<para>This method is equivalent to:</para>
				<code>dataReader.GetValue( dataReader.GetOrdinal( name ) )</code>

		  </remarks><param name="name">
				The name of the column. 
		  </param><returns>
		  <para>The column value as the .NET type most appropriate for the column or DBNull if column is NULL.</para>
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount">
            <summary>
				<para> Returns the number of columns in the cursor.</para>
		  </summary><remarks>
				<para>This method is identical to the <see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/> property.</para>
		  </remarks><returns>
		  <para>The number of columns in the cursor as an integer. Returns 0 if the cursor is closed.</para>
		  </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.RowCount">
            <summary>
				<para><b>UL Ext.: </b> Returns the number of rows in the cursor. </para>
		  </summary><value>The number of rows in the cursor.</value><remarks>
				<para> One use for RowCount is to decide when to delete old rows to save space. Old rows can be deleted from the UltraLite database without being deleted from the consolidated database using the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/> method. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF">
            <summary>
				<para><b>UL Ext.: </b> Checks whether the current row position is before the first row or not. </para>
		  </summary><value>True if the current row position is before the first row, false otherwise.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF">
            <summary>
				<para><b>UL Ext.: </b> Checks whether the current row position is after the last row or not. </para>
		  </summary><value>True if the current row position is after the last row, false otherwise.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULDataReader.Schema">
            <summary>
				<para><b>UL Ext.: </b> Holds the schema of this cursor.</para>
		  </summary><value>For result sets, the <see cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/> object representing the schema of the result set. For tables, the <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/> object representing the schema of the table.</value><remarks>
				<para>This property represents the complete schema of the cursor, including UltraLite.NET extended information which is not represented in the results from <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/>.</para>
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULDbType">
            <summary>
				<para> Enumerates the UltraLite.NET database data types. </para>
		  </summary><remarks>
				<para>The table below lists which .NET types are compatible with each ULDbType. In the case of integral types, table columns can always be set using smaller integer types, but can also be set using larger types as long as the actual value is within the range of the type.</para>
				<list type="table">
				<listheader>
					 <term>ULDbType</term><term>Compatible .NET type</term> <term>C# built-in type</term>	<term>Visual Basic built-in type</term> 
				</listheader>
				<item>
				<term><b>Binary</b>, <b>VarBinary</b></term>	<term>System.<see cref="T:System.Byte"/>[], or System.<see cref="T:System.Guid"/> if size is 16</term> <term>byte[]</term> <term>Byte()</term> 
				</item>
				<item>
				<term><b>Bit</b></term> <term>System.<see cref="T:System.Boolean"/></term> <term>bool</term> <term>Boolean</term> 
				</item>
				<item>
				<term><b>Char</b>, <b>VarChar</b></term> <term>System.<see cref="T:System.String"/></term> <term>String</term> <term>String</term> 
				</item>
				<item>
				<term><b>Date</b></term> <term>System.<see cref="T:System.DateTime"/></term> <term>DateTime No built-in type.</term>	<term>Date</term> 
				</item>
				<item>
				<term><b>Double</b></term>	<term>System.<see cref="T:System.Double"/></term> <term>double</term> <term>Double</term> 
				</item>
				<item>
				<term><b>LongBinary</b></term>	<term>System.<see cref="T:System.Byte"/>[]</term> <term>byte[]</term> <term>Byte()</term> 
				</item>
				<item>
				<term><b>LongVarchar</b></term> <term>System.<see cref="T:System.String"/></term> <term>String</term> <term>String</term> 
				</item>
				<item>
				<term><b>Decimal</b>, <b>Numeric</b></term>	<term>System.<see cref="T:System.String"/></term> <term>decimal</term> <term>Decimal</term> 
				</item>
				<item>
				<term><b>Float</b>, <b>Real</b></term> <term>System.<see cref="T:System.Single"/></term> <term>float</term> <term>Single</term> 
				</item>
				<item>
				<term><b>BigInt</b></term>	<term>System.<see cref="T:System.Int64"/></term> <term>long</term> <term>Long</term> 
				</item>
				<item>
				<term><b>Integer</b></term>	<term>System.<see cref="T:System.Int32"/></term> <term>int</term> <term>Integer</term> 
				</item>
				<item>
				<term><b>SmallInt</b></term>	<term>System.<see cref="T:System.Int16"/></term> <term>short</term> <term>Short</term> 
				</item>
				<item>
				<term><b>Time</b></term> <term>System.<see cref="T:System.TimeSpan"/></term> <term>TimeSpan No built-in type.</term>	<term>TimeSpan No built-in type.</term> 
				</item>
				<item>
				<term><b>DateTime</b>, <b>TimeStamp</b></term>	<term>System.<see cref="T:System.DateTime"/></term> <term>DateTime No built-in type.</term>	<term>Date</term> 
				</item>
				<item>
				<term><b>TinyInt</b></term> <term>System.<see cref="T:System.Byte"/></term> <term>byte</term> <term>Byte</term> 
				</item>
				<item>
				<term><b>UnsignedBigInt</b></term>	<term>System.<see cref="T:System.UInt64"/></term> <term>ulong</term> <term>UInt64 No built-in type.</term> 
				</item>
				<item>
				<term><b>UnsignedInt</b></term>	<term>System.<see cref="T:System.UInt32"/></term> <term>uint</term> <term>UInt32 No built-in type.</term> 
				</item>
				<item>
				<term><b>UnsignedSmallInt</b></term>	<term>System.<see cref="T:System.UInt16"/></term> <term>ushort</term> <term>UInt16 No built-in type.</term> 
				</item>
				<item>
				<term><b>UniqueIdentifier</b></term> <term>System.<see cref="T:System.Guid"/></term> <term>Guid No built-in type.</term> <term>Guid No built-in type.</term> 
				</item>
				</list>
				<para> Binary columns of length 16 are fully compatible with the UniqueIdentifier type.</para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetDataTypeName(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnULDbType(System.Int32)"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.BigInt">
            <summary>
				<para>Signed 64-bit integer.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Binary">
            <summary>
				<para>Binary data, with a specified maximum length. The enumeration values <b>Binary</b> and <b>VarBinary</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Bit">
            <summary>
				<para>1-bit flag. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Char">
            <summary>
				<para>Character data, with a specified length. In UltraLite.NET, this type always supports Unicode characters. The types <b>Char</b> and <b>VarChar</b> are fully compatible.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Date">
            <summary>
				<para>Date information. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.DateTime">
            <summary>
				<para>Timestamp information (date, time). The enumeration values <b>DateTime</b> and <b>TimeStamp</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Decimal">
            <summary>
				<para>Exact numerical data, with a specified precision and scale. The enumeration values <b>Decimal</b> and <b>Numeric</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Double">
            <summary>
				<para>Double precision floating point number (8 bytes). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Float">
            <summary>
				<para>Single precision floating point number (4 bytes). The enumeration values <b>Float</b> and <b>Real</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Integer">
            <summary>
				<para>Unsigned 32-bit integer. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary">
            <summary>
				<para>Binary data, with variable length. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar">
            <summary>
				<para>Character data, with variable length. In UltraLite.NET, this type always supports Unicode characters.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Numeric">
            <summary>
				<para>Exact numerical data, with a specified precision and scale. The enumeration values <b>Decimal</b> and <b>Numeric</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Real">
            <summary>
				<para>Single precision floating point number (4 bytes). The enumeration values <b>Float</b> and <b>Real</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.SmallInt">
            <summary>
				<para>Signed 16-bit integer. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.Time">
            <summary>
				<para>Time information. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.TimeStamp">
            <summary>
				<para>Timestamp information (date, time). The enumeration values <b>DateTime</b> and <b>TimeStamp</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.TinyInt">
            <summary>
				<para>Unsigned 8-bit integer. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier">
            <summary>
				<para>Universally Unique Identifier (UUID/GUID). </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UnsignedBigInt">
            <summary>
				<para>Unsigned 64-bit integer. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UnsignedInt">
            <summary>
				<para>Unsigned 32-bit integer. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.UnsignedSmallInt">
            <summary>
				<para>Unsigned 16-bit integer. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.VarBinary">
            <summary>
				<para>Binary data, with a specified maximum length. The enumeration values <b>Binary</b> and <b>VarBinary</b> are aliases of each other.</para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULDbType.VarChar">
            <summary>
				<para>Character data, with a specified maximum length. In UltraLite.NET, this type always supports Unicode characters. The types <b>Char</b> and <b>VarChar</b> are fully compatible.</para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULIndexSchema">
            <summary>
				<para><b>UL Ext.: </b> Represents the schema of an UltraLite table index. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. Index schemas are created using the <see cref="P:iAnywhere.Data.UltraLite.ULTableSchema.PrimaryKey"/>, <see cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetIndex(System.String)"/>, and <see cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetOptimalIndex(System.Int32)"/> methods of the <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/> class. </para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.#ctor">
            <summary> Constructor.  Public to package only (should only
            be called by TableSchema.GetIndex(), TableSchema.GetPrimaryKey()
            and TableSchema.GetOptimalIndex()).
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.open(iAnywhere.Data.UltraLite.ULConnection,System.Int32)">
            <summary>
            Opens this schema instance for use.  Public to package only (should
            only be called by TableSchema.GetIndex(), TableSchema.GetPrimaryKey()
            and TableSchema.GetOptimalIndex()).  Assumes indexSlot >= 0.
            </summary>
            <param name="conn">Connection that opened the table index schema
            </param>
            <param name="indexSlot">jni slot for key of index schema
            </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.GetColumnName(System.Int16)">
            <summary>
				<para> Returns the name of the <paramref name="colOrdinalInIndex"/>'th column in this index. </para>
		  </summary><remarks>
				<para> Column ordinals and count may change during a schema upgrade. Column ordinals from an index are different than the column IDs in a table or another index, even if they refer to the same physical column in a particular table. </para>
		  </remarks><param name="colOrdinalInIndex">
				The ordinal of the desired column in the index. The value must be in the range [1,<see cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount"/>]. 
		  </param><returns>
		  The name of the column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.IsColumnDescending(System.String)">
            <summary>
				<para> Checks whether the named column is used in descending order by the index. </para>
		  </summary><param name="name">
				The name of the column. 
		  </param><returns>
		  True if the column is used in descending order, false if the column is used in ascending order. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULIndexSchema.GetColumnName(System.Int16)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.Finalize">
            <summary>
				<para>Releases the unmanaged resources used by ULIndexSchema.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULIndexSchema.GetNativeKey">
            <summary>
            Help function to get the native key associated with this schema.
            </summary>
            <returns>The key</returns>
            <exception cref="T:iAnywhere.Data.UltraLite.ULException">If schema is closed.</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.Name">
            <summary>
				<para> Returns the name of the index. </para>
		  </summary><value>A string specifying the name of the index.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.ColumnCount">
            <summary>
				<para> Returns the number of columns in the index. </para>
		  </summary><value>The number of columns in the index. </value><remarks>
				<para> Column ordinals in indexes range from 1 to ColumnCount, inclusively. </para>
				<para> Column ordinals and count may change during a schema upgrade. Column ordinals from an index are different than the column IDs in a table or another index, even if they refer to the same physical column in a particular table. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.ReferencedIndexName">
            <summary>
				<para> The name of the referenced primary index if the index is a foreign key. </para>
		  </summary><value>A string specifying the name of the referenced primary index.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.ReferencedTableName">
            <summary>
				<para> The name of the referenced primary table if the index is a foreign key. </para>
		  </summary><value>A string specifying the name of the referenced primary table.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsUniqueIndex">
            <summary>
				<para> Checks whether the index is unique. </para>
		  </summary><value>True if the index is unique, false if the index is not unique. </value><remarks>
				<para> Columns in a unique index may be null. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsUniqueKey">
            <summary>
				<para>Checks whether the index is a unique key. </para>
		  </summary><value>True if the index is a unique key, false if the index is not a unique key. </value><remarks>
				<para> Columns in a unique key may not be null. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsPrimaryKey">
            <summary>
				<para> Checks whether the index is the primary key. </para>
		  </summary><value>True if the index is the primary key, false if the index is not the primary key. </value><remarks>
				<para> Columns in the primary key may not be null. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey">
            <summary>
				<para> Checks whether the index is a foreign key. </para>
		  </summary><value>True if the index is the foreign key, false if the index is not the foreign key. </value><remarks>
				<para> Columns in a foreign key may reference another table's non-null, unique index. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKeyNullable">
            <summary>
				<para>Checks whether the foreign key is nullable. </para>
		  </summary><value>True if the foreign key is nullable, false if the foreign key is not nullable.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKeyCheckOnCommit">
            <summary>
				<para> Checks whether referential integrity for the foreign key is performed on commits or on inserts and updates. </para>
		  </summary><value>True if referential integrity is checked on commits, false if it is checked on inserts and updates.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred (including index is not a foreign key). 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULIndexSchema.IsOpen">
            <summary>
				<para> Determines whether the index schema is open or closed. </para>
		  </summary><value>True if the index schema is open, otherwise false. </value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULParameter">
            <summary>
				<para>Represents a parameter to a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. </para>
		  </summary><remarks>
				<para>A ULParameter object can be created directly using one of its many constructors, or using the <see cref="M:iAnywhere.Data.UltraLite.ULCommand.CreateParameter"/> method. Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, it is highly recommended that you explicitly cast constant values to type object when using the <see cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/> constructor. For example: </para>
				<code>
' Visual Basic
Dim p As ULParameter = New ULParameter( "", CType( 0, Object ) )

// C#
ULParameter p = new ULParameter( "", (object)0 );
</code>
				<para> Parameters (including those created by <see cref="M:iAnywhere.Data.UltraLite.ULCommand.CreateParameter"/>) must be added to a <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/> collection to be used. All parameters are treated as positional parameters and are used by a command in the order that they were added.</para>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
				<para> <b>Implements: </b> <see cref="T:System.Data.IDbDataParameter"/>, <see cref="T:System.Data.IDataParameter"/> </para>

		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor">
            <summary>
				<para> Initializes a ULParameter object with null (Nothing in Visual Basic) as its value. </para>
		  </summary><example>
				<para>The following code creates a ULParameter with the value 3 and adds it to a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> called cmd.</para>
				<code>
' Visual Basic
Dim p As ULParameter = New ULParameter
p.Value = 3
cmd.Parameters.Add( p )

// C#
ULParameter p = new ULParameter();
p.Value = 3;
cmd.Parameters.Add( p );
</code>

		  </example><seealso cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)">
            <summary>
				<para> Initializes a ULParameter object with the specified parameter name and value. </para>
		  </summary><remarks>
				<para> Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, it is highly recommended that you explicitly cast constant values to type object when using this constructor. </para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="value">
				An <see cref="T:System.Object"/> that is to be the value of the parameter. 
		  </param><example>
				<para>The following code creates a ULParameter with the value 0 and adds it to a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> called cmd.</para>
				<code>
' Visual Basic
cmd.Parameters.Add( New ULParameter( "", CType( 0, Object ) ) )

// C#
cmd.Parameters.Add( new ULParameter( "", (object)0 ) );
</code>

		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType)">
            <summary>
				<para> Initializes a ULParameter object with the specified parameter name and data type. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
		  </summary><remarks>
				<para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="dbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32)">
            <summary>
				<para> Initializes a ULParameter object with the specified parameter name and data type. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
		  </summary><remarks>
				<para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="dbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><param name="size">
				The length of the parameter. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32,System.String)">
            <summary>
				<para> Initializes a ULParameter object with the specified parameter name, data type, and length. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
		  </summary><remarks>
				<para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="dbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><param name="size">
				The length of the parameter. 
		  </param><param name="sourceColumn">
				The name of the source column to map. 
		  </param><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
				<para> Initializes a ULParameter object with the specified parameter name, data type, length, direction, nullability, numeric precision, numeric scale, source column, source version, and value. This constructor is not recommended; it is provided for compatibility with other data providers.</para>
		  </summary><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="dbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><param name="size">
				The length of the parameter. 
		  </param><param name="direction">
				One of the <see cref="T:System.Data.ParameterDirection"/> values. 
		  </param><param name="isNullable">
				True if the value of the field can be null; otherwise, false. 
		  </param><param name="precision">
				The total number of digits to the left and right of the decimal point to which Value is resolved. 
		  </param><param name="scale">
				The total number of decimal places to which Value is resolved. 
		  </param><param name="sourceColumn">
				The name of the source column to map. 
		  </param><param name="sourceVersion">
				One of the <see cref="T:System.Data.DataRowVersion"/> values. 
		  </param><param name="value">
				An <see cref="T:System.Object"/> that is to be the value of the parameter. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>Only the <see cref="F:System.Data.ParameterDirection.Input"/> direction is supported in UltraLite.NET.</para>
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameter.#ctor(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameter.ToString">
            <summary>
				<para> Returns the string representation of this instance.</para>
		  </summary><returns>
		  <para>The name of the parameter.</para>
		  </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.DbType">
            <summary>
				<para>Specifies the <see cref="T:System.Data.DbType"/> of the parameter</para>
		  </summary><value>One of the <see cref="T:System.Data.DbType"/> values.</value><remarks>
				<para>The <see cref="P:iAnywhere.Data.UltraLite.ULParameter.ULDbType"/> and DbType properties are linked. Therefore, setting the DbType changes the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.ULDbType"/> to a supporting <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/>. </para>
		  </remarks><exception cref="T:System.ArgumentException">
				<para>There is no mapping from the specified value to a <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/>, hence, the specified value is not supported.</para>
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Direction">
            <summary>
				<para>A value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</para>
		  </summary><value>One of the <see cref="T:System.Data.ParameterDirection"/> values.</value><remarks>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				<para>Only the <see cref="F:System.Data.ParameterDirection.Input"/> direction is supported in UltraLite.NET.</para>
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.IsNullable">
            <summary>
				<para>Specifies whether the parameter accepts null values.</para>
		  </summary><value>True if null values are accepted, false otherwise. The default is false. Null values are handled using the DBNull class.</value><remarks>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Offset">
            <summary>
				<para>Specifies the offset to the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property.</para>
		  </summary><value>The offset to the value. The default is 0.</value><remarks>
				<para> In UltraLite.NET parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.ParameterName">
            <summary>
				<para>Specifies the name of the parameter.</para>
		  </summary><value>A string representing the name of the parameter, or an empty string ("') for unnamed parameters. Specifying a null reference (Nothing in Visual Basic) results in an empty string being used.</value><remarks>
				<para>In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. All parameters are treated as positional parameters and are used by a command in the order that they were added.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Precision">
            <summary>
				<para>Specifies the maximum number of digits used to represent the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property.</para>
		  </summary><value>The maximum number of digits used to represent the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property. The default value is 0, which indicates that the data provider sets the precision for the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property.</value><remarks>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks><exception cref="T:System.ArgumentException">
				<para>The value is greater then 38.</para>
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Scale">
            <summary>
				<para>Specifies the number of decimal places to which <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> is resolved.</para>
		  </summary><value>The number of decimal places to which <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> is resolved. The default is 0.</value><remarks>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Size">
            <summary>
				<para>Specifies the maximum size of the data within the column.</para>
		  </summary><value>The maximum size of the data within the column. The default value is inferred from the parameter value. The Size property is used for binary and string types. </value><remarks>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.SourceColumn">
            <summary>
				<para>Specifies the name of the source column mapped to the DataSet and used for loading or returning the value.</para>
		  </summary><value>A string specifying the name of the source column mapped to the DataSet and used for loading or returning the value.</value><remarks>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.SourceVersion">
            <summary>
				<para>The <see cref="T:System.Data.DataRowVersion"/> to use when loading <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/>.</para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.ULDbType">
            <summary>
				<para>Specifies the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> of the parameter</para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values.</value><remarks>
				<para>The ULDbType and <see cref="P:iAnywhere.Data.UltraLite.ULParameter.DbType"/> properties are linked. Therefore, setting the ULDbType changes the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.DbType"/> to a supporting <see cref="T:System.Data.DbType"/>. </para>
				<para> In UltraLite.NET, parameters can only be used as IN parameters and all mapping information is ignored. Only the <see cref="P:iAnywhere.Data.UltraLite.ULParameter.Value"/> property is important.</para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameter.Value">
            <summary>
				<para>Specifies the value of the parameter.</para>
		  </summary><value>An <see cref="T:System.Object"/> that specifies the value of the parameter.</value><remarks>
				<para>The value is sent as-is to the data provider without any type conversion or mapping. When the command is executed, the command attempts to convert the value to the required type, signaling a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONVERSION_ERROR"/> if it cannot convert the value.</para>
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULParameterCollection">
            <summary>
				<para>Represents all parameters to a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. </para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and are specified in the same order as the question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
				<para>There is no constructor for ULParameterCollection. You obtain a ULParameterCollection from the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Parameters"/> property. </para>
				<para><b>Implements: </b> <see cref="T:System.Data.IDataParameterCollection"/></para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.Object)">
            <summary>
				<para>Adds a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> to the collection. </para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
		  </remarks><param name="value">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object to add to the collection. 
		  </param><returns>
		  <para>The index of the new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				The value cannot be null (Nothing in Visual Basic). 
		  </exception><exception cref="T:System.InvalidCastException">
				The value specified must be a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>. 
		  </exception><exception cref="T:System.ArgumentException">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object can only be added to the collection once. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)">
            <summary>
				<para>Adds a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> to the collection. </para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
		  </remarks><param name="value">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object to add to the collection. 
		  </param><returns>
		  <para>The new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns><exception cref="T:System.ArgumentNullException">
				The value cannot be null (Nothing in Visual Basic). 
		  </exception><exception cref="T:System.ArgumentException">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object can only be added to the collection once. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)">
            <summary>
				<para>Adds a new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>, created using the specified parameter name and value, to the collection.</para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
				<para>Because of the special treatment of the 0 and 0.0 constants and the way overloaded methods are resolved, it is highly recommended that you explicitly cast constant values to type object when using this method. </para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="value">
				An <see cref="T:System.Object"/> that is to be the value of the parameter. 
		  </param><returns>
		  <para>The new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns><example>
				<para>The following code adds a ULParameter with the value 0 to a <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> called cmd.</para>
				<code>
' Visual Basic
cmd.Parameters.Add( "", CType( 0, Object ) )

// C#
cmd.Parameters.Add( "", (object)0 );
</code>

		  </example><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,iAnywhere.Data.UltraLite.ULDbType)">
            <summary>
				<para>Adds a new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>, created using the specified parameter name and data type, to the collection.</para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="ulDbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><returns>
		  <para>The new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32)">
            <summary>
				<para>Adds a new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>, created using the specified parameter name, data type, and length, to the collection.</para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="ulDbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><param name="size">
				The length of the parameter. 
		  </param><returns>
		  <para>The new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,iAnywhere.Data.UltraLite.ULDbType,System.Int32,System.String)">
            <summary>
				<para>Adds a new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>, created using the specified parameter name, data type, length, and source column name, to the collection.</para>
		  </summary><remarks>
				<para>All parameters in the collection are treated as positional parameters and must be added to the collection in the same order as the corresponding question mark placeholders in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/>. For example, the first parameter in the collection corresponds to the first question mark in the SQL statement, the second parameter in the collection corresponds to the second question mark in the SQL statement, and so on. There must be at least as many question marks in the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.CommandText"/> as there are parameters in the collection. Nulls are substituted for missing parameters.</para>
		  </remarks><param name="parameterName">
				The name of the parameter. For unnamed parameters, use an empty string ("") or a null reference (Nothing in Visual Basic) for this value. In UltraLite.NET, parameter names are not used by <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/>. 
		  </param><param name="ulDbType">
				One of the <see cref="T:iAnywhere.Data.UltraLite.ULDbType"/> values. 
		  </param><param name="size">
				The length of the parameter. 
		  </param><param name="sourceColumn">
				The name of the source column to map. 
		  </param><returns>
		  <para>The new <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object.</para>
		  </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(iAnywhere.Data.UltraLite.ULParameter)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Add(System.String,System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Clear">
            <summary>
				<para>Removes all the parameters from the collection.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.Object)">
            <summary>
				<para>Checks whether a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> exists in the collection. </para>
		  </summary><param name="value">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object to check for. 
		  </param><returns>
		  <para>True if the collection contains the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>, false otherwise. </para>
		  </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.String)">
            <summary>
				<para>Checks whether a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> with the specified name exists in the collection. </para>
		  </summary><param name="value">
				The name of the parameter to search for. 
		  </param><returns>
		  <para>True if the collection contains the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>, false otherwise. </para>
		  </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.Contains(System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
				<para>Copies <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> objects from the ULParameterCollection to the specified array. </para>
		  </summary><param name="array">
				The array into which to copy the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> objects. 
		  </param><param name="index">
				The starting index of the array. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.Object)">
            <summary>
				<para>Returns the location of the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> in the collection. </para>
		  </summary><param name="value">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object to locate. 
		  </param><returns>
		  <para>The zero-based index of the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> in the collection or -1 if the parameter is not found.</para>
		  </returns><exception cref="T:System.InvalidCastException">
				The value specified must be a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.String)">
            <summary>
				<para>Returns the location of the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> with the specified name in the collection.</para>
		  </summary><param name="parameterName">
				The name of the parameter to locate. 
		  </param><returns>
		  <para>The zero-based index of the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> in the collection or -1 if the parameter is not found.</para>
		  </returns><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.IndexOf(System.Object)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
				<para>Inserts an <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> in the collection at the specified index. </para>
		  </summary><param name="index">
				The zero-based index where the parameter is to be inserted within the collection. 
		  </param><param name="value">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object to insert. 
		  </param><exception cref="T:System.IndexOutOfRangeException">
				The index is invalid. 
		  </exception><exception cref="T:System.ArgumentNullException">
				You cannot set a parameter using a null reference (Nothing in Visual Basic). 
		  </exception><exception cref="T:System.InvalidCastException">
				The value specified must be a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.Remove(System.Object)">
            <summary>
				<para>Removes an <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> from the collection. </para>
		  </summary><param name="value">
				The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> object to insert. 
		  </param><exception cref="T:System.ArgumentNullException">
				You cannot set a parameter using a null reference (Nothing in Visual Basic). 
		  </exception><exception cref="T:System.InvalidCastException">
				The value specified must be a <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/>. 
		  </exception><exception cref="T:System.ArgumentException">
				The collection does not contain the specified parameter. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.Int32)">
            <summary>
				<para>Removes the parameter at the specified index in the collection.</para>
		  </summary><param name="index">
				The zero-based index of the parameter to remove. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULParameterCollection.Count"/>-1]. The first parameter in the collection has an index value of zero. 
		  </param><exception cref="T:System.IndexOutOfRangeException">
				The index is invalid. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.String)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.String)">
            <summary>
				<para>Removes the parameter with the specified name from the collection.</para>
		  </summary><param name="parameterName">
				The name of the parameter to retrieve. 
		  </param><exception cref="T:System.IndexOutOfRangeException">
				There is no parameter with the specified name. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULParameterCollection.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULParameterCollection.GetEnumerator">
            <summary>
				<para>Returns an enumerator for the collection.</para>
		  </summary><returns>
		  <para>An ArrayList enumerator enumerating the parameters in the collection.</para>
		  </returns>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.Count">
            <summary>
				<para>Returns the number of <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> objects in the collection.</para>
		  </summary><value>The number of <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> objects in the collection.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.Item(System.Int32)">
            <summary>
				<para> Returns the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> at the specified index. In C#, this property is the indexer for the ULParameterCollection class.</para>
		  </summary><param name="index">
				The zero-based index of the parameter to retrieve. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULParameterCollection.Count"/>-1]. The first parameter in the collection has an index value of zero. 
		  </param><returns>
		  <para>The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> at the specified index.</para>
		  </returns><exception cref="T:System.IndexOutOfRangeException">
				The index is invalid. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULParameterCollection.Item(System.String)">
            <summary>
				<para> Returns the <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> with the specified name. In C#, this property is the indexer for the ULParameterCollection class.</para>
		  </summary><param name="parameterName">
				The name of the parameter to retrieve. 
		  </param><returns>
		  <para>The <see cref="T:iAnywhere.Data.UltraLite.ULParameter"/> with the specified name.</para>
		  </returns><exception cref="T:System.IndexOutOfRangeException">
				There is no parameter with the specified name. 
		  </exception><exception cref="T:System.ArgumentNullException">
				You cannot set a parameter using a null (Nothing in Visual Basic) parameter name. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULDataReader.Item(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetValue(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULPublicationSchema">
            <summary>
				<para><b>UL Ext.: </b> Represents the schema of an UltraLite publication. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. Publication schemas are created using the <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.GetPublicationSchema(System.String)"/> method of the <see cref="T:iAnywhere.Data.UltraLite.ULDatabaseSchema"/> class. </para>
				<para> UltraLite methods requiring a publication mask actually require a set of publications to check. A set is formed by or'ing the publication masks of individual publications. For example: </para>
				<code>
' Visual Basic
Dim mask As Integer = pub1.Mask Or pub2.Mask

// C#
int mask = pub1.Mask | pub2.Mask;
</code>
				<para> Two special mask values are also provided by this class. <see cref="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_DB"/> corresponds to the entire database. <see cref="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_PUBS"/> corresponds to all publications. </para>
				<para> Note: Publication masks may change during a schema upgrade. To correctly identify a publication, access it by name or refresh the cached masks after a schema upgrade. </para>

		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULPublicationSchema.Mask"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetLastDownloadTime(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.CountUploadRows(System.Int32,System.UInt32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.Schema"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_DB">
            <summary>
				<para> Publication mask corresponding to the entire database. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_PUBS">
            <summary>
				<para> Publication mask corresponding to all publications. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULPublicationSchema.#ctor(iAnywhere.Data.UltraLite.ULConnection,System.String)">
            <summary> Constructor.  Public to package only (should only be
            called by ULDatabaseSchema.GetPublicationSchema).
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULPublicationSchema.Name">
            <summary>
				<para> Returns the name of this publication. </para>
		  </summary><value>A string specifying the name of the publication.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. PUBLICATION_NOT_FOUND is issued if a schema upgrade has deleted or renamed the publication. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULPublicationSchema.Mask">
            <summary>
				<para>Returns the publication mask of the publication. </para>
		  </summary><value>The publication mask of the publication.</value><remarks>
				<para> Publication IDs, masks, and counts may change during a schema upgrade. To correctly identify a publication, access it by name, or refresh the cached masks and counts after a schema upgrade. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				If a SQL error exception occurs. PUBLICATION_NOT_FOUND is issued if a schema upgrade has deleted or renamed this publication. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULPublicationSchema.IsOpen">
            <summary>
				<para> Determines whether the publication schema is open or closed. </para>
		  </summary><value>True if the publication schema is open, false if the publication schema closed. </value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULResultSetSchema">
            <summary>
				<para><b>UL Ext.: </b> Represents the schema of an UltraLite result set. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. A <see cref="T:iAnywhere.Data.UltraLite.ULResultSetSchema"/> object is attached to a result set as its <see cref="P:iAnywhere.Data.UltraLite.ULDataReader.Schema"/> property. </para>
				<para> A result set schema is only valid while the data reader is open. </para>
		  </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULCommand"/><seealso cref="T:iAnywhere.Data.UltraLite.ULDataReader"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSetSchema.#ctor">
            <summary> Constructor.
            Constructor.  Public to package only (should only be called by
            ResultSet.schema = new ULResultSetSchema() or
            PreparedStatement.getULResultSetSchema()).
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSetSchema.Open(iAnywhere.Data.UltraLite.ULConnection,System.Int32,System.String)">
            <summary>
            Opens this schema instance for use.  Public to package only.
            Assumes cursorSchemaSlot >= 0.
            </summary>
            <param name="conn">Connection that opened the cursor schema</param>
            <param name="cursorSchemaSlot">jni slot for key of cursor schema</param>
            <param name="sqlStatement">sql statement that generated this ULResultSetSchema</param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULResultSetSchema.Finalize">
            <summary>
				<para> Releases the unmanaged resources used by the ULResultSetSchema. </para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULResultSetSchema.Name">
            <summary>
				<para> Returns the name of the cursor. </para>
		  </summary><value>The SQL statement that generated the ULResultSetSchema.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeData">
            <summary>
				<para><b>UL Ext.: </b> Returns schema upgrade monitoring data. </para>
		  </summary><seealso cref="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeListener"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.#ctor(iAnywhere.Data.UltraLite.ULSchemaUpgradeState,System.Int64,System.Int64,System.Int64)">
            <summary> Constructs a ULSchemaUpgradeData object with the specified
            progress information.
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.State">
            <summary>
				<para>Returns the current schema upgrade state. </para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeState"/> values.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.ProgressCounter">
            <summary>
				<para>Returns the schema upgrade progress counter. This number is an approximation of the progress so far. </para>
		  </summary><value>The schema upgrade progress counter as a number between 0 and <see cref="P:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.FinalProgressCount"/>.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_UPGRADING"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.FinalProgressCount">
            <summary>
				<para>Returns an estimate of the final progress count. </para>
		  </summary><value>The estimated final progress count.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_UPGRADING"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.ProgressCounter"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSchemaUpgradeData.UpgradeOperations">
            <summary>
				<para> Returns the number of schema upgrade operations performed. </para>
		  </summary><value>The number of schema operations performed so far.</value><remarks>
				<para> This number is an approximation of the amount of work done during the schema upgrade. This number starts at zero and increases as the update proceeds. This number is updated more frequently than the progress counter and can be used as a relative measure to compare against other schema upgrades. </para>
		  </remarks><seealso cref="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_UPGRADING"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeState">
            <summary>
				<para><b>UL Ext.: </b> Enumerates all the states that can occur while upgrading a schema. </para>
		  </summary><remarks>
				<para> <b>STATE_STARTING</b> is the only state during which the upgrade may be cancelled. If the upgrade is cancelled, you will receive a second event with state <b>STATE_ERROR</b>. </para>
		  </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeData"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_STARTING">
            <summary>
				<para>The schema upgrade is starting. </para>
				<para> This is the only state during which the upgrade may be cancelled. If the upgrade is cancelled, you will receive a second event with state <b>STATE_ABORT</b>. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_UPGRADING">
            <summary>
				<para>The schema upgrade is in progress. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_ABORT">
            <summary>
				<para>The schema upgrade has been aborted and the old database is preserved. This state may occur as the result of a recoverable error or user abort. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_ERROR">
            <summary>
				<para>A critical error occurred and the database is unusable. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_DONE">
            <summary>
				<para>The schema upgrade completed successfully. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_LAST">
            <summary>
				<para>Internally used state not sent to <see cref="M:iAnywhere.Data.UltraLite.ULSchemaUpgradeListener.SchemaUpgrading(iAnywhere.Data.UltraLite.ULSchemaUpgradeData)"/>. </para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeListener">
            <summary>
				<para> <b>UL Ext.: </b> The listener interface for receiving schema upgrade progress events. </para>
		  </summary><seealso cref="M:iAnywhere.Data.UltraLite.ULDatabaseSchema.ApplyFile(iAnywhere.Data.UltraLite.ULConnectionParms,iAnywhere.Data.UltraLite.ULSchemaUpgradeListener)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSchemaUpgradeListener.SchemaUpgrading(iAnywhere.Data.UltraLite.ULSchemaUpgradeData)">
            <summary>
				<para> Invoked during schema upgrade to inform the user of progress. When the state is <see cref="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_STARTING"/>, this method should return true to cancel the schema upgrade or return false to continue. For other states, this method's return value is ignored. </para>
		  </summary><remarks>
				<para> No UltraLite.NET API methods should be invoked during a SchemaUpgrading call. </para>
		  </remarks><param name="data">
				A <see cref="T:iAnywhere.Data.UltraLite.ULSchemaUpgradeData"/> object containing the latest schema upgrade progress data. 
		  </param><returns>
		  This method should return false to continue or true to cancel the schema upgrade (the state must be <see cref="F:iAnywhere.Data.UltraLite.ULSchemaUpgradeState.STATE_STARTING"/> to cancel). 
		  </returns>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULServerSyncListener">
            <summary>
				<para> <b>UL Ext.: </b> The listener interface for receiving server synchronization messages. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULServerSyncListener.ServerSyncInvoked(System.String)">
            <summary>
				<para> Invoked when the MobiLink Listener for server-initiated synchronizations calls the application to perform synchronization. </para>
		  </summary><remarks>
				<para> This method is invoked by a separate thread. To avoid multi-threading issues, it should post an event to the UI. If you are using multi-threading, it is recommended that you use a separate connection and use the lock keyword to access any objects shared with the rest of the application. </para>
		  </remarks><param name="messageName">
				The name of the message sent to the application. 
		  </param><example>
				The following code fragments demonstrate how to receive a server synchronization request and perform a synchronization in the UI thread. 
				<code>
' Visual Basic
Imports iAnywhere.Data.UltraLite
   
Public Class MainWindow
  Inherits System.Windows.Forms.Form
  Implements ULServerSyncListener
  Private conn As ULConnection
</code>
				<code>
  Public Sub New(ByVal args() As String)

    MyBase.New()

    'This call is required by the Windows Form Designer.
    InitializeComponent()

    'Add any initialization after the InitializeComponent() call
    ULConnection.DatabaseManager.SetServerSyncListener( _
        "myCompany.mymsg", "myCompany.myapp", Me _
      )
    'Create Connection
    ...
  End Sub
</code>
				<code>
  Protected Overrides Sub OnClosing( _
        ByVal e As System.ComponentModel.CancelEventArgs _
      )
    ULConnection.DatabaseManager.SetServerSyncListener( _
        Nothing, Nothing, Nothing _
      )
    MyBase.OnClosing(e)
  End Sub
</code>
				<code>
  Public Sub ServerSyncInvoked(ByVal messageName As String) _
      Implements ULServerSyncListener.ServerSyncInvoked
    Me.Invoke(New EventHandler(AddressOf Me.ServerSyncAction))
  End Sub
</code>
				<code>
  Public Sub ServerSyncAction( _
        ByVal sender As Object, ByVal e As EventArgs _
      )
    ' Do Server sync
    conn.Synchronize()
  End Sub
End Class
</code>
				<code>
// C#
using iAnywhere.Data.UltraLite;
public class Form1 : System.Windows.Forms.Form, ULServerSyncListener
{
  private System.Windows.Forms.MainMenu mainMenu1;
  private ULConnection conn;
</code>
				<code>
  public Form1()
  {
    //
    // Required for Windows Form Designer support
    //
    InitializeComponent();

    //
    // TODO: Add any constructor code after
    // InitializeComponent call
    //
    ULConnection.DatabaseManager.SetServerSyncListener(
        "myCompnay.mymsg", "myCompany.myapp", this
      );
    // Create connection
    ...
  }
</code>
				<code>
  protected override void Dispose( bool disposing )
  {
    base.Dispose( disposing );
  }
</code>
				<code>
  protected override void OnClosing(
      System.ComponentModel.CancelEventArgs e
    )
  {
    ULConnection.DatabaseManager.SetServerSyncListener(
        null, null, null
      );
    base.OnClosing(e);
  }
</code>
				<code>
  public void ServerSyncInvoked( string messageName )
  {
    this.Invoke( new EventHandler( ServerSyncHandler ) );
  }
</code>
				<code>
  internal void ServerSyncHandler(object sender, EventArgs e)
  {
    conn.Synchronize();
  }
}
</code>











		  </example>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSQLCode">
            <summary><para>
            <b>UL Ext.: </b> Enumerates the SQL codes that may be reported by UltraLite.NET.
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOERROR">
            <summary><para>SQLE_NOERROR(0) - This code indicates that there was no error or warning.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ROW_DELETED_TO_MAINTAIN_REFERENTIAL_INTEGRITY">
            <summary><para>See @olink targetdoc="errors" targetptr="err137"@SQLE_ROW_DELETED_TO_MAINTAIN_REFERENTIAL_INTEGRITY(137)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_CREATED">
            <summary><para>See @olink targetdoc="errors" targetptr="err136"@SQLE_DATABASE_CREATED(136)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_RESTORED">
            <summary><para>See @olink targetdoc="errors" targetptr="err134"@SQLE_CURSOR_RESTORED(134)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONNECTION_RESTORED">
            <summary><para>See @olink targetdoc="errors" targetptr="err133"@SQLE_CONNECTION_RESTORED(133)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ROW_DROPPED_DURING_SCHEMA_UPGRADE">
            <summary><para>See @olink targetdoc="errors" targetptr="err130"@SQLE_ROW_DROPPED_DURING_SCHEMA_UPGRADE(130)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_NEW">
            <summary><para>See @olink targetdoc="errors" targetptr="err123"@SQLE_DATABASE_NEW(123)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_EXECUTE_STMT">
            <summary><para>See @olink targetdoc="errors" targetptr="err111"@SQLE_CANNOT_EXECUTE_STMT(111)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOTFOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="err100"@SQLE_NOTFOUND(100)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_START_STOP_DATABASE_DENIED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm75"@SQLE_START_STOP_DATABASE_DENIED(-75)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DYNAMIC_MEMORY_EXHAUSTED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm78"@SQLE_DYNAMIC_MEMORY_EXHAUSTED(-78)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNABLE_TO_START_DATABASE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm82"@SQLE_UNABLE_TO_START_DATABASE(-82)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_DATABASE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm84"@SQLE_INVALID_DATABASE(-84)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COMMUNICATIONS_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm85"@SQLE_COMMUNICATIONS_ERROR(-85)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_NAME_REQUIRED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm87"@SQLE_DATABASE_NAME_REQUIRED(-87)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENGINE_NOT_MULTIUSER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm89"@SQLE_ENGINE_NOT_MULTIUSER(-89)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ARGUMENT_CANNOT_BE_NULL">
            <summary><para>See @olink targetdoc="errors" targetptr="errm90"@SQLE_ARGUMENT_CANNOT_BE_NULL(-90)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARSE_PARAMETER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm95"@SQLE_INVALID_PARSE_PARAMETER(-95)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ENGINE_ALREADY_RUNNING">
            <summary><para>See @olink targetdoc="errors" targetptr="errm96"@SQLE_ENGINE_ALREADY_RUNNING(-96)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_CONNECTIONS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm102"@SQLE_TOO_MANY_CONNECTIONS(-102)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PASSWORD">
            <summary><para>See @olink targetdoc="errors" targetptr="errm103"@SQLE_INVALID_PASSWORD(-103)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNABLE_TO_CONNECT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm105"@SQLE_UNABLE_TO_CONNECT(-105)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONNECTION_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm108"@SQLE_CONNECTION_NOT_FOUND(-108)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NAME_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm110"@SQLE_NAME_NOT_UNIQUE(-110)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INDEX_NAME_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm111"@SQLE_INDEX_NAME_NOT_UNIQUE(-111)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_FOREIGN_KEY_DEF">
            <summary><para>See @olink targetdoc="errors" targetptr="errm113"@SQLE_INVALID_FOREIGN_KEY_DEF(-113)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_PRIMARY_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm118"@SQLE_NO_PRIMARY_KEY(-118)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PERMISSION_DENIED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm121"@SQLE_PERMISSION_DENIED(-121)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PRIMARY_KEY_TWICE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm126"@SQLE_PRIMARY_KEY_TWICE(-126)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_IN_INDEX">
            <summary><para>See @olink targetdoc="errors" targetptr="errm127"@SQLE_COLUMN_IN_INDEX(-127)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNTAX_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm131"@SQLE_SYNTAX_ERROR(-131)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOT_IMPLEMENTED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm134"@SQLE_NOT_IMPLEMENTED(-134)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNKNOWN_USERID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm140"@SQLE_UNKNOWN_USERID(-140)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm141"@SQLE_TABLE_NOT_FOUND(-141)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CORRELATION_NAME_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm142"@SQLE_CORRELATION_NAME_NOT_FOUND(-142)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm143"@SQLE_COLUMN_NOT_FOUND(-143)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_AMBIGUOUS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm144"@SQLE_COLUMN_AMBIGUOUS(-144)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_FOREIGN_KEY_NAME_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm145"@SQLE_FOREIGN_KEY_NAME_NOT_FOUND(-145)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNKNOWN_FUNC">
            <summary><para>See @olink targetdoc="errors" targetptr="errm148"@SQLE_UNKNOWN_FUNC(-148)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_GROUP_SELECT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm149"@SQLE_INVALID_GROUP_SELECT(-149)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_AGGREGATES_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm150"@SQLE_AGGREGATES_NOT_ALLOWED(-150)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SUBQUERY_SELECT_LIST">
            <summary><para>See @olink targetdoc="errors" targetptr="errm151"@SQLE_SUBQUERY_SELECT_LIST(-151)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_ORDER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm152"@SQLE_INVALID_ORDER(-152)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_WRONG_PARAMETER_COUNT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm154"@SQLE_WRONG_PARAMETER_COUNT(-154)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_EXPRESSION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm156"@SQLE_EXPRESSION_ERROR(-156)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONVERSION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm157"@SQLE_CONVERSION_ERROR(-157)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_OVERFLOW_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm158"@SQLE_OVERFLOW_ERROR(-158)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_COLUMN_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm163"@SQLE_NO_COLUMN_NAME(-163)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_ALREADY_OPEN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm172"@SQLE_CURSOR_ALREADY_OPEN(-172)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOR_NOT_OPEN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm180"@SQLE_CURSOR_NOT_OPEN(-180)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_INDICATOR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm181"@SQLE_NO_INDICATOR(-181)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INDEX_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm183"@SQLE_INDEX_NOT_FOUND(-183)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CURSOROP_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm187"@SQLE_CURSOROP_NOT_ALLOWED(-187)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_MODIFY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm191"@SQLE_CANNOT_MODIFY(-191)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PRIMARY_KEY_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm193"@SQLE_PRIMARY_KEY_NOT_UNIQUE(-193)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_FOREIGN_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm194"@SQLE_INVALID_FOREIGN_KEY(-194)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_CANNOT_BE_NULL">
            <summary><para>See @olink targetdoc="errors" targetptr="errm195"@SQLE_COLUMN_CANNOT_BE_NULL(-195)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INDEX_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm196"@SQLE_INDEX_NOT_UNIQUE(-196)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_CURRENT_ROW">
            <summary><para>See @olink targetdoc="errors" targetptr="errm197"@SQLE_NO_CURRENT_ROW(-197)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PRIMARY_KEY_VALUE_REF">
            <summary><para>See @olink targetdoc="errors" targetptr="errm198"@SQLE_PRIMARY_KEY_VALUE_REF(-198)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_OPTION_SETTING">
            <summary><para>See @olink targetdoc="errors" targetptr="errm201"@SQLE_INVALID_OPTION_SETTING(-201)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_WRONG_NUM_OF_INSERT_COLS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm207"@SQLE_WRONG_NUM_OF_INSERT_COLS(-207)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_LOCKED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm210"@SQLE_LOCKED(-210)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_IN_USE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm214"@SQLE_TABLE_IN_USE(-214)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_IDENTIFIER_TOO_LONG">
            <summary><para>See @olink targetdoc="errors" targetptr="errm250"@SQLE_IDENTIFIER_TOO_LONG(-250)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DUPLICATE_FOREIGN_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm251"@SQLE_DUPLICATE_FOREIGN_KEY(-251)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PUBLICATION_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm280"@SQLE_PUBLICATION_NOT_FOUND(-280)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TABLE_HAS_PUBLICATIONS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm281"@SQLE_TABLE_HAS_PUBLICATIONS(-281)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INTERRUPTED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm299"@SQLE_INTERRUPTED(-299)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm300"@SQLE_ERROR(-300)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm301"@SQLE_DATABASE_ERROR(-301)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_MEMORY_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm309"@SQLE_MEMORY_ERROR(-309)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_ACCESS_FILE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm602"@SQLE_CANNOT_ACCESS_FILE(-602)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DBSPACE_FULL">
            <summary><para>See @olink targetdoc="errors" targetptr="errm604"@SQLE_DBSPACE_FULL(-604)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COULD_NOT_LOAD_LIBRARY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm620"@SQLE_COULD_NOT_LOAD_LIBRARY(-620)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COULD_NOT_FIND_FUNCTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm621"@SQLE_COULD_NOT_FIND_FUNCTION(-621)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ERROR_CALLING_FUNCTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm622"@SQLE_ERROR_CALLING_FUNCTION(-622)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATATYPE_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm624"@SQLE_DATATYPE_NOT_ALLOWED(-624)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DIV_ZERO_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm628"@SQLE_DIV_ZERO_ERROR(-628)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_STRING_RIGHT_TRUNCATION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm638"@SQLE_STRING_RIGHT_TRUNCATION(-638)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_PAGE_SIZE_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm644"@SQLE_PAGE_SIZE_INVALID(-644)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_NOT_CREATED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm645"@SQLE_DATABASE_NOT_CREATED(-645)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DROP_DATABASE_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm651"@SQLE_DROP_DATABASE_FAILED(-651)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_METHOD_CANNOT_BE_CALLED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm669"@SQLE_METHOD_CANNOT_BE_CALLED(-669)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DATABASE_UPGRADE_NOT_POSSIBLE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm673"@SQLE_DATABASE_UPGRADE_NOT_POSSIBLE(-673)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_AMBIGUOUS_INDEX_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm678"@SQLE_AMBIGUOUS_INDEX_NAME(-678)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_RESOURCE_GOVERNOR_EXCEEDED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm685"@SQLE_RESOURCE_GOVERNOR_EXCEEDED(-685)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_BAD_PARAM_INDEX">
            <summary><para>See @olink targetdoc="errors" targetptr="errm689"@SQLE_BAD_PARAM_INDEX(-689)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm735"@SQLE_INVALID_PARAMETER(-735)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NOT_SUPPORTED_IN_ULTRALITE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm749"@SQLE_NOT_SUPPORTED_IN_ULTRALITE(-749)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNCOMMITTED_TRANSACTIONS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm755"@SQLE_UNCOMMITTED_TRANSACTIONS(-755)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_SQL_IDENTIFIER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm760"@SQLE_INVALID_SQL_IDENTIFIER(-760)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNCHRONIZATION_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm767"@SQLE_SYNCHRONIZATION_NOT_FOUND(-767)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UPLOAD_FAILED_AT_SERVER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm794"@SQLE_UPLOAD_FAILED_AT_SERVER(-794)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_NO_MATCHING_SELECT_ITEM">
            <summary><para>See @olink targetdoc="errors" targetptr="errm812"@SQLE_NO_MATCHING_SELECT_ITEM(-812)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_TOO_MANY_TEMP_TABLES">
            <summary><para>See @olink targetdoc="errors" targetptr="errm817"@SQLE_TOO_MANY_TEMP_TABLES(-817)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ALIAS_NOT_UNIQUE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm830"@SQLE_ALIAS_NOT_UNIQUE(-830)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ALIAS_NOT_YET_DEFINED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm831"@SQLE_ALIAS_NOT_YET_DEFINED(-831)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_COLUMN_NOT_FOUND_IN_TABLE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm834"@SQLE_COLUMN_NOT_FOUND_IN_TABLE(-834)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DOWNLOAD_CONFLICT">
            <summary><para>See @olink targetdoc="errors" targetptr="errm839"@SQLE_DOWNLOAD_CONFLICT(-839)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_BAD_ENCRYPTION_KEY">
            <summary><para>See @olink targetdoc="errors" targetptr="errm840"@SQLE_BAD_ENCRYPTION_KEY(-840)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SERVER_SYNCHRONIZATION_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm857"@SQLE_SERVER_SYNCHRONIZATION_ERROR(-857)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_CHANGE_USER_NAME">
            <summary><para>See @olink targetdoc="errors" targetptr="errm867"@SQLE_CANNOT_CHANGE_USER_NAME(-867)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNSUPPORTED_CHARACTER_SET_ERROR">
            <summary><para>See @olink targetdoc="errors" targetptr="errm869"@SQLE_UNSUPPORTED_CHARACTER_SET_ERROR(-869)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ULTRALITE_OBJ_CLOSED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm908"@SQLE_ULTRALITE_OBJ_CLOSED(-908)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNABLE_TO_START_DATABASE_VER_NEWER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm934"@SQLE_UNABLE_TO_START_DATABASE_VER_NEWER(-934)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_ACCESS_SCHEMA_FILE">
            <summary><para>See @olink targetdoc="errors" targetptr="errm951"@SQLE_CANNOT_ACCESS_SCHEMA_FILE(-951)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_STATUS_UNKNOWN">
            <summary><para>See @olink targetdoc="errors" targetptr="errm952"@SQLE_SYNC_STATUS_UNKNOWN(-952)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SCHEMA_UPGRADE_NOT_ALLOWED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm953"@SQLE_SCHEMA_UPGRADE_NOT_ALLOWED(-953)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ULTRALITE_DATABASE_NOT_FOUND">
            <summary><para>See @olink targetdoc="errors" targetptr="errm954"@SQLE_ULTRALITE_DATABASE_NOT_FOUND(-954)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CONNECTION_ALREADY_EXISTS">
            <summary><para>See @olink targetdoc="errors" targetptr="errm955"@SQLE_CONNECTION_ALREADY_EXISTS(-955)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm956"@SQLE_SYNC_INFO_INVALID(-956)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_DEVICE_IO_FAILED">
            <summary><para>See @olink targetdoc="errors" targetptr="errm974"@SQLE_DEVICE_IO_FAILED(-974)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INCORRECT_VOLUME_ID">
            <summary><para>See @olink targetdoc="errors" targetptr="errm975"@SQLE_INCORRECT_VOLUME_ID(-975)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_ULTRALITE_RUNTIME_LIBRARY_MISMATCH">
            <summary><para>See @olink targetdoc="errors" targetptr="errm977"@SQLE_ULTRALITE_RUNTIME_LIBRARY_MISMATCH(-977)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_CANNOT_REGISTER_LISTENER">
            <summary><para>See @olink targetdoc="errors" targetptr="errm992"@SQLE_CANNOT_REGISTER_LISTENER(-992)@/olink@.</para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_UNRECOGNIZED_OPTION">
            <summary><para>See @olink targetdoc="errors" targetptr="errm1002"@SQLE_UNRECOGNIZED_OPTION(-1002)@/olink@.</para></summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULStreamErrorCode">
            <summary>
            <para><b>UL Ext.: </b> Enumerates the error codes that may be reported by streams during
            synchronization.
            </para></summary>
            <seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorCode"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NONE">
            <summary><para> NONE(0)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER">
            <summary><para> PARAMETER(1)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_UINT32">
            <summary><para> PARAMETER_NOT_UINT32(2)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_UINT32_RANGE">
            <summary><para> PARAMETER_NOT_UINT32_RANGE(3)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_BOOLEAN">
            <summary><para> PARAMETER_NOT_BOOLEAN(4)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARAMETER_NOT_HEX">
            <summary><para> PARAMETER_NOT_HEX(5)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.MEMORY_ALLOCATION">
            <summary><para> MEMORY_ALLOCATION(6)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.PARSE">
            <summary><para> PARSE(7)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.READ">
            <summary><para> READ(8)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.WRITE">
            <summary><para> WRITE(9)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.END_WRITE">
            <summary><para> END_WRITE(10)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.END_READ">
            <summary><para> END_READ(11)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NOT_IMPLEMENTED">
            <summary><para> NOT_IMPLEMENTED(12)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.WOULD_BLOCK">
            <summary><para> WOULD_BLOCK(13)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.GENERATE_RANDOM">
            <summary><para> GENERATE_RANDOM(14)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.INIT_RANDOM">
            <summary><para> INIT_RANDOM(15)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SEED_RANDOM">
            <summary><para> SEED_RANDOM(16)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.CREATE_RANDOM_OBJECT">
            <summary><para> CREATE_RANDOM_OBJECT(17)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SHUTTING_DOWN">
            <summary><para> SHUTTING_DOWN(18)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.DEQUEUING_CONNECTION">
            <summary><para> DEQUEUING_CONNECTION(19)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_ROOT">
            <summary><para> SECURE_CERTIFICATE_ROOT(20)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COMPANY_NAME">
            <summary><para> SECURE_CERTIFICATE_COMPANY_NAME(21)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_CHAIN_LENGTH">
            <summary><para> SECURE_CERTIFICATE_CHAIN_LENGTH(22)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_REF">
            <summary><para> SECURE_CERTIFICATE_REF(23)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_NOT_TRUSTED">
            <summary><para> SECURE_CERTIFICATE_NOT_TRUSTED(24)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_DUPLICATE_CONTEXT">
            <summary><para> SECURE_DUPLICATE_CONTEXT(25)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_IO">
            <summary><para> SECURE_SET_IO(26)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_IO_SEMANTICS">
            <summary><para> SECURE_SET_IO_SEMANTICS(27)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_CHAIN_FUNC">
            <summary><para> SECURE_CERTIFICATE_CHAIN_FUNC(28)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_CHAIN_REF">
            <summary><para> SECURE_CERTIFICATE_CHAIN_REF(29)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_ENABLE_NON_BLOCKING">
            <summary><para> SECURE_ENABLE_NON_BLOCKING(30)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_CIPHER_SUITES">
            <summary><para> SECURE_SET_CIPHER_SUITES(31)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_CHAIN_NUMBER">
            <summary><para> SECURE_SET_CHAIN_NUMBER(32)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_FILE_NOT_FOUND">
            <summary><para> SECURE_CERTIFICATE_FILE_NOT_FOUND(33)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_READ_CERTIFICATE">
            <summary><para> SECURE_READ_CERTIFICATE(34)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_READ_PRIVATE_KEY">
            <summary><para> SECURE_READ_PRIVATE_KEY(35)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_PRIVATE_KEY">
            <summary><para> SECURE_SET_PRIVATE_KEY(36)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_EXPIRY_DATE">
            <summary><para> SECURE_CERTIFICATE_EXPIRY_DATE(37)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_EXPORT_CERTIFICATE">
            <summary><para> SECURE_EXPORT_CERTIFICATE(38)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_ADD_CERTIFICATE">
            <summary><para> SECURE_ADD_CERTIFICATE(39)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_TRUSTED_CERTIFICATE_FILE_NOT_FOUND">
            <summary><para> SECURE_TRUSTED_CERTIFICATE_FILE_NOT_FOUND(40)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_TRUSTED_CERTIFICATE_READ">
            <summary><para> SECURE_TRUSTED_CERTIFICATE_READ(41)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COUNT">
            <summary><para> SECURE_CERTIFICATE_COUNT(42)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CREATE_CERTIFICATE">
            <summary><para> SECURE_CREATE_CERTIFICATE(43)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_IMPORT_CERTIFICATE">
            <summary><para> SECURE_IMPORT_CERTIFICATE(44)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_RANDOM_REF">
            <summary><para> SECURE_SET_RANDOM_REF(45)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_RANDOM_FUNC">
            <summary><para> SECURE_SET_RANDOM_FUNC(46)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_PROTOCOL_SIDE">
            <summary><para> SECURE_SET_PROTOCOL_SIDE(47)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_ADD_TRUSTED_CERTIFICATE">
            <summary><para> SECURE_ADD_TRUSTED_CERTIFICATE(48)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CREATE_PRIVATE_KEY_OBJECT">
            <summary><para> SECURE_CREATE_PRIVATE_KEY_OBJECT(49)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_EXPIRED">
            <summary><para> SECURE_CERTIFICATE_EXPIRED(50)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COMPANY_UNIT">
            <summary><para> SECURE_CERTIFICATE_COMPANY_UNIT(51)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_CERTIFICATE_COMMON_NAME">
            <summary><para> SECURE_CERTIFICATE_COMMON_NAME(52)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_HANDSHAKE">
            <summary><para> SECURE_HANDSHAKE(53)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_VERSION">
            <summary><para> HTTP_VERSION(54)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_READ_FUNC">
            <summary><para> SECURE_SET_READ_FUNC(55)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SECURE_SET_WRITE_FUNC">
            <summary><para> SECURE_SET_WRITE_FUNC(56)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_HOST_NAME_NOT_FOUND">
            <summary><para> SOCKET_HOST_NAME_NOT_FOUND(57)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_GET_HOST_BY_ADDR">
            <summary><para> SOCKET_GET_HOST_BY_ADDR(58)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_LOCALHOST_NAME_NOT_FOUND">
            <summary><para> SOCKET_LOCALHOST_NAME_NOT_FOUND(59)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CREATE_TCPIP">
            <summary><para> SOCKET_CREATE_TCPIP(60)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CREATE_UDP">
            <summary><para> SOCKET_CREATE_UDP(61)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_BIND">
            <summary><para> SOCKET_BIND(62)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CLEANUP">
            <summary><para> SOCKET_CLEANUP(63)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CLOSE">
            <summary><para> SOCKET_CLOSE(64)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_CONNECT">
            <summary><para> SOCKET_CONNECT(65)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_GET_NAME">
            <summary><para> SOCKET_GET_NAME(66)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_GET_OPTION">
            <summary><para> SOCKET_GET_OPTION(67)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_SET_OPTION">
            <summary><para> SOCKET_SET_OPTION(68)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_LISTEN">
            <summary><para> SOCKET_LISTEN(69)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_SHUTDOWN">
            <summary><para> SOCKET_SHUTDOWN(70)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_SELECT">
            <summary><para> SOCKET_SELECT(71)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_STARTUP">
            <summary><para> SOCKET_STARTUP(72)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.SOCKET_PORT_OUT_OF_RANGE">
            <summary><para> SOCKET_PORT_OUT_OF_RANGE(73)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.LOAD_NETWORK_LIBRARY">
            <summary><para> LOAD_NETWORK_LIBRARY(74)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.ACTSYNC_NO_PORT">
            <summary><para> ACTSYNC_NO_PORT(75)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.ACTSYNC_NOT_INSTALLED">
            <summary><para> ACTSYNC_NOT_INSTALLED(76)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CONTENT_TYPE_NOT_SPECIFIED">
            <summary><para> HTTP_CONTENT_TYPE_NOT_SPECIFIED(77)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CLIENT_ID_NOT_SET">
            <summary><para> HTTP_CLIENT_ID_NOT_SET(78)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_BUFFER_SIZE_OUT_OF_RANGE">
            <summary><para> HTTP_BUFFER_SIZE_OUT_OF_RANGE(79)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_EXTRA_DATA_END_READ">
            <summary><para> HTTP_EXTRA_DATA_END_READ(80)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CRLF_ENCODED_MISSING">
            <summary><para> HTTP_CRLF_ENCODED_MISSING(81)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CRLF_MISSING">
            <summary><para> HTTP_CRLF_MISSING(82)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_NO_CONTD_CONNECTION">
            <summary><para> HTTP_NO_CONTD_CONNECTION(83)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CHUNK_LEN_ENCODED_MISSING">
            <summary><para> HTTP_CHUNK_LEN_ENCODED_MISSING(84)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_CHUNK_LEN_BAD_CHARACTER">
            <summary><para> HTTP_CHUNK_LEN_BAD_CHARACTER(85)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_BAD_STATUS_CODE">
            <summary><para> HTTP_BAD_STATUS_CODE(86)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_UNKNOWN_TRANSFER_ENCODING">
            <summary><para> HTTP_UNKNOWN_TRANSFER_ENCODING(87)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_UNABLE_TO_PARSE_COOKIE">
            <summary><para> HTTP_UNABLE_TO_PARSE_COOKIE(88)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.HTTP_EXPECTED_POST">
            <summary><para> HTTP_EXPECTED_POST(89)
            </para></summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULStreamErrorContext">
            <summary><para><b>UL Ext.: </b> Enumerates the basic network operation being performed when the stream
            errors occured.
            </para></summary>
            <seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorContext"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.UNKNOWN">
            <summary><para> UNKNOWN(0)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.REGISTER">
            <summary><para> REGISTER(1)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.UNREGISTER">
            <summary><para> UNREGISTER(2)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.CREATE">
            <summary><para> CREATE(3)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.DESTROY">
            <summary><para> DESTROY(4)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.OPEN">
            <summary><para> OPEN(5)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.CLOSE">
            <summary><para> CLOSE(6)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.READ">
            <summary><para> READ(7)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.WRITE">
            <summary><para> WRITE(8)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.WRITE_FLUSH">
            <summary><para> WRITE_FLUSH(9)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.END_WRITE">
            <summary><para> END_WRITE(10)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.END_READ">
            <summary><para> END_READ(11)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.YIELD">
            <summary><para> YIELD(12)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.SOFTSHUTDOWN">
            <summary><para> SOFTSHUTDOWN(13)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorContext.GETVALUE">
            <summary><para> GETVALUE(14)
            </para></summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULStreamErrorID">
            <summary><para><b>UL Ext.: </b> Enumerates the network layers that may report errors during
            synchronization.
            </para></summary>
            <seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorID"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.TCPIP">
            <summary><para> TCPIP(0)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.SERIAL">
            <summary><para> SERIAL(1)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.FAKE">
            <summary><para> FAKE(2)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.PALM_CONDUIT">
            <summary><para> PALM_CONDUIT(3)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.PALM_SS">
            <summary><para> PALM_SS(4)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.NETTECH">
            <summary><para> NETTECH(5)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.RIMBB">
            <summary><para> RIMBB(6)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.HTTP">
            <summary><para> HTTP(7)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.HTTPS">
            <summary><para> HTTPS(8)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.DH_CAST">
            <summary><para> DH_CAST(9)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.SECURE">
            <summary><para> SECURE(10)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.CERTICOM">
            <summary><para> CERTICOM(11)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.JAVA_CERTICOM">
            <summary><para> JAVA_CERTICOM(12)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.CERTICOM_SSL">
            <summary><para> CERTICOM_SSL(13)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.CERTICOM_TLS">
            <summary><para> CERTICOM_TLS(14)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.WIRESTRM">
            <summary><para> WIRESTRM(15)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.WIRELESS">
            <summary><para> WIRELESS(16)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.REPLAY">
            <summary><para> REPLAY(17)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.STRM">
            <summary><para> STRM(18)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.UDP">
            <summary><para> UDP(19)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.EMAIL">
            <summary><para> EMAIL(20)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.FILE">
            <summary><para> FILE(21)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.ACTIVESYNC">
            <summary><para> ACTIVESYNC(22)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.RSA_TLS">
            <summary><para> RSA_TLS(23)
            </para></summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamErrorID.JAVA_RSA">
            <summary><para> JAVA_RSA(24)
            </para></summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULStreamType">
            <summary>
				<para> <b>UL Ext.: </b> Enumerates the types of MobiLink synchronization streams to use for synchronization. </para>
		  </summary><remarks>
				<para> For information on configuring specific stream types, refer to @olink targetdoc="mlclient" targetptr="streamparms-s-3928666"@Synchronization stream parameters@/olink@. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.UNKNOWN">
            <summary>
				<para> Unknown or no synchronization stream. The user has not set the stream type. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.ACTIVE_SYNC">
            <summary>
				<para>ActiveSync synchronization (Windows CE only). </para>
				<para> UltraLite applications should only use ActiveSync synchronization when notified to do so by the MobiLink provider for ActiveSync. An application can listen for such notification by implementing a <see cref="T:iAnywhere.Data.UltraLite.ULActiveSyncListener"/> and calling <see cref="M:iAnywhere.Data.UltraLite.ULDatabaseManager.SetActiveSyncListener(System.String,iAnywhere.Data.UltraLite.ULActiveSyncListener)"/>. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.HTTP">
            <summary>
				<para>Synchronize via HTTP. </para>
				<para> The HTTP stream uses TCP/IP as its underlying transport. UltraLite applications act as Web browsers and the MobiLink synchronization server acts as a Web server. UltraLite applications send POST requests to send data to the server and GET requests to read data from the server. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.TCPIP">
            <summary>
				<para> Synchronize via TCP/IP. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULStreamType.HTTPS">
            <summary>
				<para> Synchronize via HTTPS (HTTP with RSA transport-layer security). </para>
				<para>Transport-layer security is a separately-licensable component and must be ordered before you can install it. To order this component, see the card in your SQL Anywhere Studio package, or see <a href="http://www.sybase.com/detail?id=1015780">http://www.sybase.com/detail?id=1015780</a>.</para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncParms">
            <summary>
				<para><b>UL Ext.: </b> Represents synchronization parameters that define how to synchronize an UltraLite database. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. Each connection has its own ULSyncParms instance, attached as its <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/> property. </para>
				<para> At most, only one synchronization command (<see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>, or <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/>) may be specified at a time. If more than one of these parameters is set to true, a <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException is thrown by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>. </para>
				<para> Other sources of <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/> errors include not specifying a <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/> value or a <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Version"/> value. </para>
		  </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULConnection"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncParms.CopyFrom(iAnywhere.Data.UltraLite.ULSyncParms)">
            <summary>
				<para> Copies the properties of the specified <see cref="T:iAnywhere.Data.UltraLite.ULSyncParms"/> object to this <see cref="T:iAnywhere.Data.UltraLite.ULSyncParms"/> object. </para>
		  </summary><param name="src">
				The object to copy from. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncParms.Finalize">
            <summary>
				<para> Releases unmanaged resources and performs other cleanup operations before the ULSyncParms is reclaimed by garbage collection.</para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.AuthenticationParms">
            <summary>
				<para> Specifies parameters for a custom user authentication script (MobiLink authenticate_parameters connection event). </para>
		  </summary><value>An array of strings, each containing an authentication parameter (null array entries result in a synchronization error). The default is a null reference (Nothing in Visual Basic), meaning no authentication parameters.</value><remarks>
				<para> Only the first 255 strings are used and each string should be no longer than 128 characters (longer strings are truncated when sent to the MobiLink synchronization server). </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.CheckpointStore">
            <summary>
				<para> Specifies whether the client should perform extra store checkpoints to control the growth of the database store during synchronization. </para>
		  </summary><value>True to specify that the client should perform extra store checkpoints. The default is false, meaning only required checkpointing is done.</value><remarks>
				<para> The checkpoint operation adds I/O operations for the application, and so slows synchronization. This option is most useful for large downloads with many updates. Devices with slow flash memory may not want to pay the performance penalty associated with additional checkpoints. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.DisableConcurrency">
            <summary>
				<para> Specifies whether concurrent access to UltraLite while performing a synchronization. </para>
		  </summary><value>True to disable concurrent access to UltraLite while performing a synchronization, false to enable concurrent access. The default is false.</value><remarks>
				<para> By default, other threads may perform UltraLite operations while a thread is synchronizing. When concurrent synchronization is disabled, other threads will block on UltraLite calls until synchronization completes. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly">
            <summary>
				<para> Specifies whether to disable or enable uploads when synchronizing. </para>
		  </summary><value>True to disable uploads when synchronizing, false to enable uploads. The default is false.</value><remarks>
				<para>At most, only one synchronization command (<see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>, or <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/>) may be specified at a time. If more than one of these parameters is set to true, a <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException is thrown by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload">
            <summary>
				<para> Specifies whether to disable or enable partial downloads when synchronizing. </para>
		  </summary><value>True to enable partial downloads when synchronizing, false to disable partial downloads. The default is false.</value><remarks>
				<para> UltraLite.NET has the ability to restart downloads that fail because of communication errors or user aborts through the ULSyncProgressListener. UltraLite.NET processes the download as it is received. If a download is interrupted, then the partial download transaction remains in the database and can be resumed during the next synchronization. </para>
				<para> To indicate that UltraLite.NET should save partial downloads, specify connection.SyncParms.KeepPartialDownload=true; otherwise the download is rolled back if an error occurs. </para>
				<para> If a partial download was kept, then the output field connection.SyncResult.<see cref="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained"/> is set to true when connection.Synchronize() exits. </para>
				<para> If PartialDownloadRetained is set, then you can resume a download. To do this, call connection.Synchronize() with connection.SyncParms.<see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/> set to true. It is recommended that you keep KeepPartialDownload set to true as well in case another communications error occurs. No upload is done if a download is skipped. </para>
				<para> The download you receive during a resumed download will be as old as when the download originally began. If you need the most up to date data, then you can do another download immediately after the special resumed download completes. </para>
				<para> When resuming a download, many of the ULSyncParms fields are not relevant. For example, the PublicationMask field is not used. You will receive the publications that you requested on the initial download. The only fields that need to be set are <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/> and <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName"/>. The fields KeepPartialDownload and <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DisableConcurrency"/> may be set if desired and will function as normal. </para>
				<para> If you have a partial download and it is no longer needed, then you can call <see cref="M:iAnywhere.Data.UltraLite.ULConnection.RollbackPartialDownload"/> to roll back the failed download transaction. Also, if you attempt to synchronize again and do not specify ResumePartialDownload, then the partial download is rolled back before the next synchronization begins. </para>
				<para> For more information, refer to the @olink targetdoc="mobilink" targetptr="ml-synchtech-s-5287936"@Resuming failed downloads@/olink@. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.RollbackPartialDownload"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.NewPassword">
            <summary>
				<para> Specifies a new MobiLink password for the user specified with UserName. </para>
		  </summary><value>A string specifying a new MobiLink password. The default is a null reference (Nothing in Visual Basic), meaning the password is not changed.</value><remarks>
				<para> A new password takes effect after the next synchronization. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Password">
            <summary>
				<para> The MobiLink password for the user specified by UserName. </para>
		  </summary><value>A string specifying the MobiLink password. The default is a null reference (Nothing in Visual Basic), meaning no password is specified.</value><remarks>
				<para> The MobiLink user name and password are separate from any database user ID and password, and serve to identify and authenticate the application to the MobiLink synchronization server. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.NewPassword"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly">
            <summary>
				<para> Specifies whether the client should only ping the MobiLink synchronization server instead of performing a real synchronization. </para>
		  </summary><value>True to specify that the client should only ping the MobiLink synchronization server, false to specify the client should perform a real synchronization. The default is false.</value><remarks>
				<para>At most, only one synchronization command (<see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>, or <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/>) may be specified at a time. If more than one of these parameters is set to true, a <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException is thrown by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.PublicationMask">
            <summary>
				<para> Specifies the publications to be synchronized. </para>
		  </summary><value>A bitwise combination of publication masks, the special value <see cref="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_PUBS"/>, or the special value <see cref="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_DB"/>. The default is <see cref="F:iAnywhere.Data.UltraLite.ULPublicationSchema.SYNC_ALL_DB"/>. See <see cref="T:iAnywhere.Data.UltraLite.ULPublicationSchema"/> for more information on publication masks. </value><seealso cref="P:iAnywhere.Data.UltraLite.ULPublicationSchema.Mask"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload">
            <summary>
				<para> Specifies whether to resume or discard a previous partial download. </para>
		  </summary><value>True to resume a previous partial download, false to discard a previous partial download. The default is false.</value><remarks>
				<para> Only at most one synchronization command (<see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>, or <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/>) may be specified at a time. If more than one of these parameters is set to true, a <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException is thrown by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>. </para>
				<para>For more information on partial downloads, see <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload"/>.</para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.SendColumnNames">
            <summary>
				<para> Specifies whether the client should send column names to the MobiLink synchronization server during synchronization. </para>
		  </summary><value>True to specify that the client should send column names to the MobiLink synchronization server, false to specify that column names are not sent. The default is false.</value><remarks>
				<para> This parameter is typically used together with the -za or -ze option on the MobiLink synchronization server for automatically generating synchronization scripts. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.SendDownloadAck">
            <summary>
				<para> Specifies whether the client should send a download acknowledgement to the MobiLink synchronization server during synchronization. </para>
		  </summary><value>True to specify that the client should send a download acknowledgement to the MobiLink synchronization server, false to specify that no download acknowledgement is sent. The default is false.</value><remarks>
				<para> If the client sends a download acknowledgement, the MobiLink synchronization server worker thread must wait for the client to apply the download. If the client does not sent a download acknowledgement, the MobiLink synchronization server is freed up sooner for its next synchronization. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream">
            <summary>
				<para> Specifies the MobiLink synchronization stream to use for synchronization. </para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULStreamType"/> values specifying the type of synchronization stream to use. This parameter has no default value, and must be explicitly set.</value><remarks>
				<para> Most synchronization streams require parameters to identify the MobiLink synchronization server address and control other behavior. These parameters are supplied by the <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.StreamParms"/> property. </para>
				<para> If the stream type is set to a value that is invalid for the platform, the stream type will be set to <see cref="F:iAnywhere.Data.UltraLite.ULStreamType.UNKNOWN"/>. </para>
		  </remarks><seealso cref="T:iAnywhere.Data.UltraLite.ULStreamType"/><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.StreamParms"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.StreamParms">
            <summary>
				<para> Specifies the parameters to configure the synchronization stream. </para>
		  </summary><value>A string, in the form of a semicolon-separated list of keyword-value pairs, specifying the parameters for the stream. The default is a null reference (Nothing in Visual Basic).</value><remarks>
				<para> For information on configuring specific stream types, refer to @olink targetdoc="mlclient" targetptr="streamparms-s-3928666"@Synchronization stream parameters@/olink@. </para>
				<para> StreamParms is a string containing all the parameters used for synchronization streams. Parameters are specified as a semicolon-separated list of name=value pairs ("param1=value1;param2=value2"). </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Stream"/><seealso cref="T:iAnywhere.Data.UltraLite.ULStreamType"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly">
            <summary>
				<para> Specifies whether to disable or enable downloads when synchronizing. </para>
		  </summary><value>True to disable downloads, false to enable downloads. The default is false.</value><remarks>
				<para>At most, only one synchronization command (<see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.PingOnly"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.ResumePartialDownload"/>, or <see cref="P:iAnywhere.Data.UltraLite.ULSyncParms.UploadOnly"/>) may be specified at a time. If more than one of these parameters is set to true, a <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException is thrown by <see cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.UserName">
            <summary>
				<para> The user name that uniquely identifies the MobiLink client to the MobiLink synchronization server. </para>
		  </summary><value>A string specifying the user name. This parameter has no default value, and must be explicitly set.</value><remarks>
				<para> MobiLink uses this value to determine the download content, to record the synchronization state, and to recover from interruptions during synchronization. This user name and password are separate from any database user ID and password, and serve to identify and authenticate the application to the MobiLink synchronization server. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.Password"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncParms.Version">
            <summary>
				<para> Specifies which synchronization script to use. </para>
		  </summary><value>A string specifying the version of the synchronization script to use. This parameter has no default value, and must be explicitly set.</value><remarks>
				<para> Each synchronization script in the consolidated database is marked with a version string. For example, there may be two different download_cursor scripts, with each one identified by different a version string. The version string allows an UltraLite application to choose from a set of synchronization scripts. </para>
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressData">
            <summary>
				<para><b>UL Ext.: </b> Returns synchronization progress monitoring data. </para>
		  </summary><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressListener"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncProgressData.#ctor(iAnywhere.Data.UltraLite.ULSyncProgressState,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,iAnywhere.Data.UltraLite.ULSyncParms,iAnywhere.Data.UltraLite.ULSyncResult,iAnywhere.Data.UltraLite.ULSQLCode,System.String)">
            <summary> Constructs a ULSyncProgressData object with the specified
            progress information.
            </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.State">
            <summary>
				<para>Returns the current synchronization state. </para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/> values specifying the current synchronization state.</value><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressState"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableTotal">
            <summary>
				<para> Returns the number of tables being synchronized. </para>
		  </summary><value>The number of tables being synchronized.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_TABLE"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_TABLE"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableCount">
            <summary>
				<para> A count of the tables sent or received (TableCount of TableTotal) so far. </para>
		  </summary><value>The count of tables sent or received.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_TABLE"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_TABLE"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableIndex">
            <summary>
				<para>Returns the index of the table currently being synchronized (tables are numbered 1 to DatabaseSchema.TableCount). </para>
		  </summary><value>The index of the table currently being synchronized. Tables are numbered 1 to <see cref="P:iAnywhere.Data.UltraLite.ULDatabaseSchema.TableCount"/>.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_TABLE"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_TABLE"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentBytes">
            <summary>
				<para> Returns the number of bytes sent so far. This information is updated for all states. </para>
		  </summary><value>The number of bytes sent so far.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentInserts">
            <summary>
				<para> Returns the number of inserted rows sent so far. </para>
		  </summary><value>The number of inserted rows sent so far.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentUpdates">
            <summary>
				<para> Returns the number of updated rows sent so far. </para>
		  </summary><value>The number of updated rows sent so far. </value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentDeletes">
            <summary>
				<para> Returns the number of deleted rows sent so far. </para>
		  </summary><value>The number of deleted rows sent so far.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedBytes">
            <summary>
				<para> Returns the number of bytes received so far. This information is updated for all states. </para>
		  </summary><value>The number of bytes received so far.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedInserts">
            <summary>
				<para> Returns the number of inserted rows received so far. </para>
		  </summary><value> The number of inserted rows received so far. </value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedUpdates">
            <summary>
				<para> Returns the number of updated rows received so far. </para>
		  </summary><value> The number of updated rows received so far.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedDeletes">
            <summary>
				<para> Returns the number of deleted rows received so far. </para>
		  </summary><value> The number of deleted rows received so far.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_DATA"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncResult">
            <summary>
				<para> Returns a reference to the connection's SyncResult object. This object is only updated with <see cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DONE"/> and <see cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/> events. </para>
		  </summary><value>A reference to the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/> object.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DONE"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncParms">
            <summary>
				<para> Returns a reference to the connection's SyncParms object. </para>
		  </summary><value>A reference to the <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/> object.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DONE"/><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncParms"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SQLCode">
            <summary>
				<para> Returns the SQL code for synchronization. </para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULSQLCode"/> value for any synchronization error.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ErrorMessage">
            <summary>
				<para> Returns the error message describing the error that occurred during synchronization. </para>
		  </summary><value>A string describing the error that occurred during synchronization.</value><seealso cref="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressState">
            <summary>
				<para><b>UL Ext.: </b> Enumerates all the states that can occur while synchronizing. </para>
		  </summary><seealso cref="T:iAnywhere.Data.UltraLite.ULSyncProgressData"/>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_STARTING">
            <summary>
				<para> No synchronization actions have been taken yet. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_CONNECTING">
            <summary>
				<para> The synchronization stream has been built, but is not yet opened. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_HEADER">
            <summary>
				<para> The synchronization stream has been opened and the header is about to be sent. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_TABLE">
            <summary>
				<para> A table is being sent. Progress can be monitored using <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableIndex"/> and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableCount"/>. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DATA">
            <summary>
				<para> Data for the current table is being sent. <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentBytes"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentInserts"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentUpdates"/>, and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentDeletes"/> have been updated. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_FINISHING_UPLOAD">
            <summary>
				<para> The upload is completing. The final count of rows sent is included with this event. See <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentBytes"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentInserts"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentUpdates"/>, and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SentDeletes"/>. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_UPLOAD_ACK">
            <summary>
				<para> An acknowledgement that the upload is complete is being received. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_TABLE">
            <summary>
				<para> A table is being received. Progress can be monitored using <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableIndex"/> and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.TableCount"/>. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_RECEIVING_DATA">
            <summary>
				<para> Data for the current table is being received. <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedBytes"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedInserts"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedUpdates"/>, and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedDeletes"/> have been updated. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_COMMITTING_DOWNLOAD">
            <summary>
				<para> The download is being committed. The final count of rows received is included with this event. See <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedBytes"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedInserts"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedUpdates"/>, and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ReceivedDeletes"/>. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_SENDING_DOWNLOAD_ACK">
            <summary>
				<para> An acknowledgement that the download is complete is being sent. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DISCONNECTING">
            <summary>
				<para> The synchronization stream is about to be closed. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_DONE">
            <summary>
				<para> Synchronization has successfully completed. The connection's <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncResult"/> object has been updated. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ERROR">
            <summary>
				<para> Synchronization has completed, but an error occurred. Check <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SyncResult"/>, <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.ErrorMessage"/>, and <see cref="P:iAnywhere.Data.UltraLite.ULSyncProgressData.SQLCode"/> for details. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_ROLLING_BACK_DOWNLOAD">
            <summary>
				<para> Synchronization is rolling back the download because an error was encountered during the download. The error will be reported with a subsequent STATE_ERROR progress report. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_CANCELLED">
            <summary>
				<para> Synchronization has been cancelled. </para>
		  </summary>
        </member>
        <member name="F:iAnywhere.Data.UltraLite.ULSyncProgressState.STATE_LAST">
            <summary>
				<para> The last state entered by synchronization. This state is always entered and always after any other state. Other ULSyncProgressData fields may not contain valid data. </para>
		  </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncProgressListener">
            <summary>
				<para> <b>UL Ext.: </b> The listener interface for receiving synchronization progress events. </para>
		  </summary><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize(iAnywhere.Data.UltraLite.ULSyncProgressListener)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncProgressListener.SyncProgressed(iAnywhere.Data.UltraLite.ULSyncProgressData)">
            <summary>
				<para> Invoked during synchronization to inform the user of progress. This method should return true to cancel synchronization or return false to continue. </para>
		  </summary><remarks>
				<para> No UltraLite.NET API methods should be invoked during a SyncProgressed call. </para>
		  </remarks><param name="data">
				A <see cref="T:iAnywhere.Data.UltraLite.ULSyncProgressData"/> object containing the latest synchronization progress data. 
		  </param><returns>
		  This method should return true to cancel synchronization or return false to continue. 
		  </returns>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULSyncResult">
            <summary>
				<para><b>UL Ext.: </b> Represents the status of the last synchronization. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. Each connection has its own ULSyncResult instance, attached as its <see cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/> property. A ULSyncResult instance is only valid while that connection is open. </para>
		  </remarks><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.SyncResult"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.Synchronize"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULSyncResult.Finalize">
            <summary>
				<para> Releases unmanaged resources and performs other cleanup operations before the ULSyncResult is reclaimed by garbage collection.</para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.AuthStatus">
            <summary>
				<para>Returns the authorization status code for the last synchronization attempt.</para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULAuthStatusCode"/> values denoting the authorization status for the last synchronization attempt.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.AuthValue">
            <summary>
				<para> Returns the return value from custom user authentication synchronization scripts. </para>
		  </summary><value>A long integer returned from custom user authentication synchronization scripts.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.IgnoredRows">
            <summary>
				<para>Checks whether any uploaded rows were ignored or not during the last synchronization. </para>
		  </summary><value>True if any uploaded rows were ignored during the last synchronization, false if no rows were ignored. </value><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.DownloadOnly"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.PartialDownloadRetained">
            <summary>
				<para>Checks whether a partial download was retained or not during the last synchronization.</para>
		  </summary><value>True if a download was interrupted and the partial download was retained, false if the download was not interrupted or if the partial download was rolled back.</value><seealso cref="P:iAnywhere.Data.UltraLite.ULSyncParms.KeepPartialDownload"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorCode">
            <summary>
				<para> Returns the error reported by the stream itself.</para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULStreamErrorCode"/> values denoting the error reported by the stream itself, <see cref="F:iAnywhere.Data.UltraLite.ULStreamErrorCode.NONE"/> if no error occurred.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorContext">
            <summary>
				<para> Returns the basic network operation being performed when the stream error occurred.</para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULStreamErrorContext"/> values denoting which basic network operation was being performed when the stream error occurred.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorID">
            <summary>
				<para>Returns the ID of the network layer reporting an error.</para>
		  </summary><value>One of the <see cref="T:iAnywhere.Data.UltraLite.ULStreamErrorID"/> values denoting the ID of the network layer reporting an error.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.StreamErrorSystem">
            <summary>
				<para> Returns the stream error system-specific code. </para>
		  </summary><value>An integer denoting the stream error system-specific code.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.Timestamp">
            <summary>
				<para> Returns the timestamp of the last synchronization. </para>
		  </summary><value>A <see cref="T:System.DateTime"/> specifying the timestamp of the last synchronization.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULSyncResult.UploadOK">
            <summary>
				<para>Checks whether the last upload synchronization was successful or not.</para>
		  </summary><value>True if the last upload synchronization was successful, false if the last upload synchronization was unsuccessful.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULTableSchema">
            <summary>
				<para> <b>UL Ext.: </b> Represents the schema of an UltraLite table. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. A <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/> object is attached to a table as its <see cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/> property. </para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.#ctor">
            <summary> Constructor.
            Public to assembly only (should only be called by
            Table.Schema = new ULTableSchema()).
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnDefaultValue(System.Int32)">
            <summary>
				<para>Returns the default value of the specified column. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in a table has an ID value of zero. 
		  </param><returns>
		  The default value of the specified column as a string or a null reference (Nothing in Visual Basic) if the default value is null. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnNullable(System.Int32)">
            <summary>
				<para> Checks whether the specified column is nullable. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column is nullable, false if it is not nullable. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnAutoIncrement(System.Int32)">
            <summary>
				<para> Checks whether the specified column's default is set to autoincrement. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column is autoincrementing, false if it is not autoincrementing. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnGlobalAutoIncrement(System.Int32)">
            <summary>
				<para> Checks whether the specified column's default is set to global autoincrement. </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column is global autoincrementing, false if it is not global autoincrementing. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnPartitionSize(System.Int32)"/><seealso cref="P:iAnywhere.Data.UltraLite.ULConnection.DatabaseID"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnPartitionSize(System.Int32)">
            <summary>
				<para>Returns the global autoincrement partition size assigned to the specified column. </para>
		  </summary><remarks>
				<para> All global autoincrement columns in a given table share the same global autoincrement partition. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  The column's global autoincrement partition size as a <see cref="T:System.UInt64"/>. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnGlobalAutoIncrement(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentTimestamp(System.Int32)">
            <summary>
				<para> Checks whether the specified column's default is set to the current timestamp (<see cref="F:iAnywhere.Data.UltraLite.ULDbType.TimeStamp"/>). </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column defaults to the current timestamp, false if the column does not default to the current timestamp. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentTime(System.Int32)">
            <summary>
				<para> Checks whether the specified column's default is set to the current time (<see cref="F:iAnywhere.Data.UltraLite.ULDbType.Time"/>). </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column defaults to the current time, false if the column does not default to the current time. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnCurrentDate(System.Int32)">
            <summary>
				<para> Checks whether the specified column's default is set to the current date (<see cref="F:iAnywhere.Data.UltraLite.ULDbType.Date"/>). </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column defaults to the current date, false if the column does not default to the current date. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnNewUUID(System.Int32)">
            <summary>
				<para> Checks whether the specified column's default is set to a new UUID (<see cref="T:System.Guid"/>). </para>
		  </summary><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  True if the column defaults to a new UUID, false if the column does not default to a new UUID. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetOptimalIndex(System.Int32)">
            <summary>
				<para> The optimal index for searching a table using the specified column. </para>
		  </summary><remarks>
				<para> The specified column is the first column in the index, but the index may have more than one column. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULCursorSchema.ColumnCount"/>-1]. The first column in the table has an ID value of zero. 
		  </param><returns>
		  A <see cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/> object representing the optimal index for the specified column. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetIndex(System.String)">
            <summary>
				<para> Returns the index schema of the named index. </para>
		  </summary><param name="name">
				The name of the index. 
		  </param><returns>
		  A <see cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/> object representing the named index. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetIndexName(System.Int32)">
            <summary>
				<para> Returns the name of the index identified by the specified index ID. </para>
		  </summary><remarks>
				<para> Index IDs and counts may change during a schema upgrade. To correctly identify an index, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		  </remarks><param name="indexID">
				The ID of the index. The value must be in the range [1,<see cref="P:iAnywhere.Data.UltraLite.ULTableSchema.IndexCount"/>]. 
		  </param><returns>
		  The name of the index as a string. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="P:iAnywhere.Data.UltraLite.ULTableSchema.IndexCount"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.IsInPublication(System.String)">
            <summary>
				<para> Checks whether the table is contained in the named publication. </para>
		  </summary><param name="pubName">
				The name of the publication. 
		  </param><returns>
		  True if the table is in the publication, false if the table is not in the publication. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.Finalize">
            <summary>
				<para> Releases unmanaged resources and performs other cleanup operations before the ULTableSchema is reclaimed by garbage collection. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTableSchema.GetNativeKey">
            <summary>
            Help function to get the native key associated with this schema.
            </summary>
            <returns>The key</returns>
            <exception cref="T:iAnywhere.Data.UltraLite.ULException">If schema is closed.</exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.Name">
            <summary>
				<para> Returns the name of the table. </para>
		  </summary><value>The name of the table as a string.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.IndexCount">
            <summary>
				<para> Returns the number of indexes on the table. </para>
		  </summary><value>The number of indexes on the table or 0 if the table schema is closed.</value><remarks>
				<para> Index IDs range from 1 to IndexCount, inclusively. </para>
				<para> Note: Index IDs and count may change during a schema upgrade. To correctly identify an index, access it by name or refresh the cached IDs and counts after a schema upgrade. </para>
		  </remarks>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.PrimaryKey">
            <summary>
				<para> Returns the index schema of the primary key for the table. </para>
		  </summary><value>A <see cref="T:iAnywhere.Data.UltraLite.ULIndexSchema"/> object representing the primary key for the table.</value><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.UploadUnchangedRows">
            <summary>
				<para> Checks whether the database will upload rows that have not changed. </para>
		  </summary><value> True if the table is marked to always upload all rows during synchronization, false if the table is marked to upload only changed rows. </value><remarks>
				<para> Tables marked as such upload unchanged rows, as well as changed rows, when the table is synchronized. These tables are sometimes referred to as "all sync" tables. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTableSchema.IsNeverSynchronized">
            <summary>
				<para>Checks whether the table is marked as never being synchronized. </para>
		  </summary><value> True if the table is marked as never being synchronized, false otherwise. </value><remarks>
				<para> Tables marked as never being synchronized are never synchronized, even if they are included in a publication. These tables are sometimes referred to as "no sync" tables. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULTable">
            <summary>
				<para> <b>UL Ext.: </b> Represents a table in an UltraLite database. </para>
		  </summary><remarks>
				<para> This class cannot be directly instantiated. Tables are created using the <see cref="M:iAnywhere.Data.UltraLite.ULCommand.ExecuteTable"/> method of the <see cref="T:iAnywhere.Data.UltraLite.ULCommand"/> class. </para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.#ctor(iAnywhere.Data.UltraLite.ULConnection,System.Int32,iAnywhere.Data.UltraLite.ULTableSchema,System.Data.CommandBehavior)">
            <summary> Constructor.  (should only be called by
            Connection.GetTable()).  Assumes tableSchemaSlot >= 0.
            </summary>
            <param name="conn">Connection to open the table with</param>
            <param name="tableSlot">slot for table</param>
            <param name="schema">table schema</param>
            <param name="cmdBehavior">command behaviour flags</param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin">
            <summary>
				<para> Prepares to perform a new lookup on the table. The value(s) to search for are specified by calling the appropriate setType method(s) on the columns in the index the table was opened with. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupForward">
            <summary>
				<para> Moves forwards through the table from the beginning, looking for a row that matches or is greater than a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row that matches or is greater than the index value. On failure, (no rows greater than the value being looked for) the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/>. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupForward(System.Int16)">
            <summary>
				<para> Moves forwards through the table from the beginning, looking for a row that matches or is greater than a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row that matches or is greater than the index value. On failure, (no rows greater than the value being looked for) the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/>. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the lookup. For example, if you have a three column index and you want to look up a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupForward"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward">
            <summary>
				<para> Moves backwards through the table from the end, looking for a row that matches or is less than a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row that matches or is less than the index value. On failure, (no rows less than the value being looked for) the cursor position is before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/>. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward(System.Int16)">
            <summary>
				<para> Moves backwards through the table from the beginning, looking for a row that matches or is less than a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row that matches or is less than the index value. On failure, (no rows less than the value being looked for) the cursor position is before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/>. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the lookup. For example, if you have a three column index, and you want to look up a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBackward"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindBegin">
            <summary>
				<para> Prepares to perform a new Find on a table. </para>
		  </summary><remarks>
				<para>The value(s) to search for are specified by calling the appropriate setType method(s) on the columns in the index the table was opened with. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindFirst">
            <summary>
				<para> Moves forwards through the table from the beginning, looking for a row that exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row that exactly matches the index value. On failure, the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)">
            <summary>
				<para>Moves forwards through the table from the beginning, looking for a row that exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row that exactly matches the index value. On failure, the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index and you want to look up a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindLast">
            <summary>
				<para> Moves backwards through the table from the end, looking for a row that exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row found that exactly matches the index value. On failure, the cursor position is before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)">
            <summary>
				<para> Moves backwards through the table from the end, looking for a row that exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> To specify the value to search for, set the column value for each column in the index. The cursor is left on the first row found that exactly matches the index value. On failure, the cursor position is before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>). </para>
				<para> Each search must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/>. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index and you want to find a value that matches based on the first column only, you should set the value for the first column, then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindNext">
            <summary>
				<para> Continues a <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/> search by moving forward through the table from the current position, looking to see if the next row exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the next row if it exactly matches the index value. On failure, the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>). </para>
				<para> FindNext behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindNext(System.Int16)">
            <summary>
				<para> Continues a <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst"/> search by moving forward through the table from the current position, looking to see if the next row exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the next row if it exactly matches the index value. On failure, the cursor position is after the last row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsEOF"/>). </para>
				<para> FindNext behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index, and you want to find a value that matches based on the first column only, you should set the value for the first column, and then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindFirst(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindNext"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious">
            <summary>
				<para> Continues a <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/> search by moving backward through the table from the current position, looking to see if the previous row exactly matches a value or full set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the previous row if it exactly matches the index value. On failure, the cursor position is before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>). </para>
				<para> FindPrevious behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious(System.Int16)">
            <summary>
				<para> Continues a <see cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast"/> search by moving backward through the table from the current position, looking to see if the previous row exactly matches a value or partial set of values in the current index. </para>
		  </summary><remarks>
				<para> The cursor is left on the previous row if it exactly matches the index value. On failure, the cursor position is before the first row (<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.IsBOF"/>). </para>
				<para> FindPrevious behavior is undefined if the column values being searched for are modified during a row update. </para>
		  </remarks><param name="numColumns">
				For composite indexes, the number of columns to use in the find. For example, if you have a three column index and you want to look up a value that matches based on the first column only, you should set the value for the first column, then supply a value of 1. 
		  </param><returns>
		  True if successful, false otherwise. 
		  </returns><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindLast(System.Int16)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindPrevious"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Truncate">
            <summary>
				<para> Deletes all rows in the table while temporarily activating a stop synchronization delete. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.DeleteAllRows"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.DeleteAllRows">
            <summary>
				<para>Deletes all rows in the table. </para>
		  </summary><remarks>
				<para> In some applications, it can be useful to delete all rows from a table before downloading a new set of data into the table. Rows can be deleted from the UltraLite database without being deleted from the consolidated database using <see cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/>. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Truncate"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Delete">
            <summary>
				<para> Deletes the current row. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StartSynchronizationDelete"/><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.StopSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin">
            <summary>
				<para> Prepares to insert a new row into the table by setting all current column values to their default values. </para>
		  </summary><remarks>
				<para> Call the appropriate SetType or AppendType method(s) to specify the non-default values that are to be inserted. </para>
				<para> The row is not actually inserted and the data in the row is not actually changed until you execute the <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Insert">
            <summary>
				<para> Inserts a new row with the current column values (specified using the set methods). </para>
				<para> Each insert must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/>. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin">
            <summary>
				<para> Prepares to update the current row in the table. </para>
		  </summary><remarks>
				<para> Column values are modified by calling the appropriate setType or AppendType method(s). The first append on a column clears the current column value prior to appending the new value. </para>
				<para> The data in the row is not actually changed until you call <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
				<para> Modifying columns in the index used to open the table affects any active searches in unpredictable ways. Columns in the primary key of the table can not be updated. </para>
		  </remarks><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Update">
            <summary>
				<para> Updates the current row with the current column values (specified using the set methods). </para>
				<para> Each update must be preceded by a call to <see cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/>. </para>
		  </summary><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetToDefault(System.Int32)">
            <summary>
				<para> Sets the value for the specified column to its default value. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.GetColumnDefaultValue(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetString(System.Int32,System.String)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.String"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetDecimal(System.Int32,System.Decimal)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.Decimal"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetGuid(System.Int32,System.Guid)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.Guid"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. Only valid for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/> or for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/> with length 16. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.GetNewUUID"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULCursorSchema.GetColumnSize(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetInt16(System.Int32,System.Int16)">
            <summary>
				<para> Sets the value for the specified column using an <see cref="T:System.Int16"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetInt32(System.Int32,System.Int32)">
            <summary>
				<para> Sets the value for the specified column using an <see cref="T:System.Int32"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetInt64(System.Int32,System.Int64)">
            <summary>
				<para>Sets the value for the specified column using an <see cref="T:System.Int64"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetUInt16(System.Int32,System.UInt16)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.UInt16"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetByte(System.Int32,System.Byte)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.Byte"/> (unsigned 8-bit integer). </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetUInt32(System.Int32,System.UInt32)">
            <summary>
				<para> Sets the value for the specified column using an <see cref="T:System.UInt32"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetUInt64(System.Int32,System.UInt64)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.UInt64"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetFloat(System.Int32,System.Single)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.Single"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetDouble(System.Int32,System.Double)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.Double"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetBoolean(System.Int32,System.Boolean)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.Boolean"/>. </para>
		  </summary><remarks>
				<para> The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetDateTime(System.Int32,System.DateTime)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.DateTime"/>. </para>
		  </summary><remarks>
				<para> The set value is accurate to the millisecond. The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is made not permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetTimeSpan(System.Int32,System.TimeSpan)">
            <summary>
				<para> Sets the value for the specified column using a <see cref="T:System.TimeSpan"/>. </para>
		  </summary><remarks>
				<para> The set value is accurate to the millisecond and is normalized to a nonnegative value between 0 and 24 hours. The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetBytes(System.Int32,System.Byte[])">
            <summary>
				<para> Sets the value for the specified column using an array of <see cref="T:System.Byte"/>s. </para>
		  </summary><remarks>
				<para> Only suitable for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.Binary"/> or <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/>, or for columns of type <see cref="F:iAnywhere.Data.UltraLite.ULDbType.UniqueIdentifier"/> when val is of length 16. The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The new value for the column. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.AppendBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
				<para> Appends the specified subset of the specified array of <see cref="T:System.Byte"/>s to the new value for the specified <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongBinary"/> column.</para>
		  </summary><remarks>
				<para> The bytes at position <paramref name="srcOffset"/> (starting from 0) through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the array <paramref name="val"/> are appended to the value for the specified column. </para>
				<para>When inserting, <see cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/> initializes the new value to the column's default value. The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/>, and that change is not made permanent until it is committed. </para>
				<para> When updating, the first append on a column will clear the current value prior to appending the new value. </para>
				<para> If any of the following are true, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with code <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/> is thrown and the destination is not modified:</para>
				<list type="bullet">
				<item>
				<paramref name="val"/> is null. 
				</item>
				<item>
				<paramref name="srcOffset"/> is negative. 
				</item>
				<item>
				<paramref name="count"/> is negative. 
				</item>
				<item>
				<paramref name="srcOffset"/>+<paramref name="count"/> is greater than <paramref name="val"/>.Length. 
				</item>
				</list>
				<para>For other errors, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with the appropriate error code is thrown.</para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The value to append to the current new value for the column. 
		  </param><param name="srcOffset">
				The start position in the source array. 
		  </param><param name="count">
				The number of bytes to be copied. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.AppendChars(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
				<para> Appends the specified subset of the specified array of <see cref="T:System.Char"/>s to the new value for the specified <see cref="F:iAnywhere.Data.UltraLite.ULDbType.LongVarchar"/> column. </para>
		  </summary><remarks>
				<para> The characters at position <paramref name="srcOffset"/> (starting from 0) through <paramref name="srcOffset"/>+<paramref name="count"/>-1 of the array <paramref name="val"/> are appended to the value for the specified column. When inserting, <see cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/> initializes the new value to the column's default value. The data in the row is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/>, and that change is not made permanent until it is committed. </para>
				<para> When updating, the first append on a column clears the current value prior to appending the new value. </para>
				<para> If any of the following is true, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with code <see cref="F:iAnywhere.Data.UltraLite.ULSQLCode.SQLE_INVALID_PARAMETER"/> is thrown and the destination is not modified: </para>
				<list type="bullet">
				<item>
				<paramref name="val"/> is null. 
				</item>
				<item>
				<paramref name="srcOffset"/> is negative. 
				</item>
				<item>
				<paramref name="count"/> is negative. 
				</item>
				<item>
				<paramref name="srcOffset"/>+<paramref name="count"/> is greater than <paramref name="value"/>.Length. 
				</item>
				</list>
				<para>For other errors, a <see cref="T:iAnywhere.Data.UltraLite.ULException"/> with the appropriate error code is thrown. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><param name="val">
				The value to append to the current new value for the column. 
		  </param><param name="srcOffset">
				The start position in the source array. 
		  </param><param name="count">
				The number of bytes to be copied. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.SetDBNull(System.Int32)">
            <summary>
				<para> Sets a column to NULL.</para>
		  </summary><remarks>
				<para> The data is not actually changed until you execute an <see cref="M:iAnywhere.Data.UltraLite.ULTable.Insert"/> or <see cref="M:iAnywhere.Data.UltraLite.ULTable.Update"/>, and that change is not made permanent until it is committed. </para>
		  </remarks><param name="columnID">
				The ID number of the column. The value must be in the range [0,<see cref="P:iAnywhere.Data.UltraLite.ULDataReader.FieldCount"/>-1]. The first column in the cursor has an ID value of zero. 
		  </param><exception cref="T:iAnywhere.Data.UltraLite.ULException">
				A SQL error occurred. 
		  </exception><seealso cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetOrdinal(System.String)"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.FindBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.LookupBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.InsertBegin"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTable.UpdateBegin"/><seealso cref="P:iAnywhere.Data.UltraLite.ULTable.Schema"/><seealso cref="M:iAnywhere.Data.UltraLite.ULTableSchema.IsColumnNullable(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTable.Finalize">
            <summary>
				<para>Releases unmanaged resources and performs other cleanup operations before the ULTable is reclaimed by garbage collection.</para>
		  </summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTable.Schema">
            <summary>
				<para> Holds the table schema. This property is only valid while its connection is open. </para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULTableSchema"/> object representing the table schema.</value><remarks>
				<para>This property represents the complete schema of the table, including UltraLite.NET extended information which is not represented in the results from <see cref="M:iAnywhere.Data.UltraLite.ULDataReader.GetSchemaTable"/>.</para>
		  </remarks>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULTransaction">
            <summary>
				<para> Represents a SQL transaction.</para>
		  </summary><remarks>
				<para>There is no constructor for ULTransaction. To obtain a ULTransaction object, use the <see cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/> method. To associate a command with a transaction, use the <see cref="P:iAnywhere.Data.UltraLite.ULCommand.Transaction"/> property. </para>
				<para>Once a transaction has been committed or rolled back, the connection reverts to automatically committing all operations as they are executed. To group more operations together, a new transaction must be created.</para>
				<para> <b>Implements: </b> <see cref="T:System.Data.IDbTransaction"/>, <see cref="T:System.IDisposable"/> </para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Finalize">
            <summary>
				<para>Releases unmanaged resources and performs other cleanup operations before the ULTransaction is reclaimed by garbage collection.</para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Dispose">
            <summary>
				<para> Releases the resources used by the ULTransaction and rolls back any uncommitted commands. </para>
		  </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Commit">
            <summary>
				<para> Commits the database transaction.</para>
		  </summary><remarks>
				<para>Once a transaction has been committed or rolled back, the connection reverts to automatically committing all operations as they are executed. To group more operations together, a new transaction must be created.</para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback"/>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULTransaction.Rollback">
            <summary>
				<para> Rolls back the transaction's outstanding changes to the database.</para>
		  </summary><remarks>
				<para>Once a transaction has been committed or rolled back, the connection reverts to automatically committing all operations as they are executed. To group more operations together, a new transaction must be created.</para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULTransaction.Commit"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTransaction.Connection">
            <summary>
				<para> Returns the connection associated with the transaction. </para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULConnection"/> object associated with the transaction, or a null reference (Nothing in Visual Basic) if the transaction is no longer valid.</value><remarks>
				<para>This is the strongly typed version of <see cref="P:System.Data.IDbTransaction.Connection"/>.</para>
		  </remarks><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULTransaction.IsolationLevel">
            <summary>
				<para> Returns the isolation level for the transaction.</para>
		  </summary><value>One of the <see cref="T:System.Data.IsolationLevel"/> values. UltraLite.NET only supports <see cref="F:System.Data.IsolationLevel.ReadUncommitted"/>. </value><seealso cref="M:iAnywhere.Data.UltraLite.ULConnection.BeginTransaction"/>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULException">
            <summary>
				<para> Represents a SQL error returned by the UltraLite.NET database. </para>
		  </summary><remarks>
				<para>This class is not serializable under the .NET Compact Framework.</para>
		  </remarks>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULException.#ctor(iAnywhere.Data.UltraLite.ULSQLCode,System.String,System.String,System.String)">
            <summary>
				<para> Creates a ULException with the given error code. </para>
		  </summary><remarks>
				<para> The message string corresponding to the specified <see cref="T:iAnywhere.Data.UltraLite.ULSQLCode"/> is retrieved from the <b>iAnywhere.Data.UltraLite.resources</b> assembly. Resources are searched for, by culture, using the following order: <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>, then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, and finally culture "EN". </para>
		  </remarks><param name="code">
				The code of the exception. 
		  </param><param name="s1">
				The first string for the formatted message. 
		  </param><param name="s2">
				The second string for the formatted message. 
		  </param><param name="s3">
				The third string for the formatted message. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
				<para> Populates a SerializationInfo with the data needed to serialize this ULException. </para>
		  </summary><remarks>
				<para>This method is not supported under the .NET Compact Framework.</para>
		  </remarks><param name="info">
				The SerializationInfo to populate with data. 
		  </param><param name="context">
				The destination for this serialization. 
		  </param>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ULException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Private serialization constructor</summary>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULException.NativeError">
            <summary>
				<para> Returns the SQL code returned by the database. </para>
		  </summary><value>The <see cref="T:iAnywhere.Data.UltraLite.ULSQLCode"/> value returned by the database.</value>
        </member>
        <member name="P:iAnywhere.Data.UltraLite.ULException.Source">
            <summary>
				<para>Returns the name of the provider that generated the error. </para>
		  </summary><value>The string value identifying UltraLite.NET as the provider.</value>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULResID">
            <summary>
            Resource IDs for localized strings
            </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ULRes">
            <summary>
            Represents the keys for localized messages from UltraLite for ADO.NET.
            The actual message strings are contained in
            iAynwhere.Data.UltraLite.Message.resources
            </summary>
        </member>
        <member name="T:iAnywhere.Data.UltraLite.ValueSupport">
            <summary>
            Contains static methods for conversion between native and C# types.
            </summary>
        </member>
        <member name="M:iAnywhere.Data.UltraLite.ValueSupport.CharPtrToString(System.Char*)">
            <summary>
            Converts a char pointer to a string.  Frees the memory pointed
            to by the unmanaged pointer.
            </summary>
            <param name="str">A char* allocated by the native Dll</param>
            <returns>A native string.</returns>
        </member>
    </members>
</doc>
