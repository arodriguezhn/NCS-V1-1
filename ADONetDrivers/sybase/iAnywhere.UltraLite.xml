<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iAnywhere.UltraLite</name>
    </assembly>
    <members>
        <member name="T:iAnywhere.UltraLite.ActiveSyncListener">
            <summary> The listener interface for receiving ActiveSync events.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.ActiveSyncListener.ActiveSyncInvoked(System.Boolean)">
            <summary>
            Invoked when the MobiLink provider for ActiveSync calls the
            application to perform synchronization.
            </summary>
            <remarks>
            This method is invoked by a separate thread.  To avoid
            multi-threading issues, it should post an event to the UI.  If
            you are using multi-threading, it is recommended that you use a
            separate connection and use the <c>lock</c> keyword to access
            any objects shared with the rest of the application.  The
            synchronization resulting from a call to <c>ActiveSyncInvoked</c>
            must specify a StreamType.ACTIVE_SYNC for its connection's
            SyncInfo stream.
            </remarks>
            <example>
            The following code fragments demonstrate how to receive an
            ActiveSync request and perform a synchronization
            in the UI thread. <code>
            [Visual Basic]
            Imports iAnywhere.UltraLite
               
            Public Class MainWindow
              Inherits System.Windows.Forms.Form
              Implements ActiveSyncListener
              Private dbMgr As DatabaseManager
              Private conn As Connection
            
              Public Sub New(ByVal args() As String)
            
                MyBase.New()
            
                'This call is required by the Windows Form Designer.
                InitializeComponent()
            
                'Add any initialization after the InitializeComponent() call
                dbMgr = New DatabaseManager
                dbMgr.SetActiveSyncListener( "myCompany.myapp", Me )
                'Create Connection
                ...
              End Sub
            
              Protected Overrides Sub OnClosing(ByVal e As System.ComponentModel.CancelEventArgs)
                If Not (dbMgr Is Nothing) Then
                  dbMgr.SetActiveSyncListener(Nothing, Nothing)
                  dbMgr = Nothing
                End If
              End Sub
            
              Public Sub ActiveSyncInvoked(ByVal launchedByProvider As Boolean) Implements iAnywhere.UltraLite.ActiveSyncListener.ActiveSyncInvoked
                Me.Invoke(New EventHandler(AddressOf Me.ActiveSyncAction))
              End Sub
            
              Public Sub ActiveSyncAction(ByVal sender As Object, ByVal e As EventArgs)
                ' Do active sync
                conn.SyncParms.Stream = StreamType.ACTIVE_SYNC
                conn.Synchronize()
              End Sub
            End Class
            
            [C#]
            using iAnywhere.UltraLite;
            public class Form1 : System.Windows.Forms.Form, ActiveSyncListener
            {
              private System.Windows.Forms.MainMenu mainMenu1;
              private DatabaseManager dbMgr;
              private Connection conn;
            
              public Form1()
              {
                //
                // Required for Windows Form Designer support
                //
                InitializeComponent();
            
                //
                // TODO: Add any constructor code after InitializeComponent call
                //
                dbMgr = new DatabaseManager();
                dbMgr.SetActiveSyncListener( "myCompany.myapp", this );
                // Create connection
                ...
              }
            
              protected override void Dispose( bool disposing )
              {
                base.Dispose( disposing );
              }
            
              protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
              {
                if( dbMgr != null ) {
                  dbMgr.SetActiveSyncListener( null, null );
                  dbMgr = null;
                }
                base.OnClosing (e);
              }
            
              public void ActiveSyncInvoked(bool launchedByProvider)
              {
                this.Invoke( new EventHandler( ActiveSyncHandler ) );
              }
            
              internal void ActiveSyncHandler(object sender, EventArgs e)
              {
                conn.SyncParms.Stream = StreamType.ACTIVE_SYNC;
                conn.Synchronize();
              }
            }
            </code></example>
            <param name="launchedByProvider">true if the application was
            launched by the MobiLink provider to perform ActiveSync
            synchronization.  The application must then shut itself
            down after it has finished synchronizing.  False if the
            application was already running when called by
            the MobiLink provider for ActiveSync.
            </param>
        </member>
        <member name="T:iAnywhere.UltraLite.AuthStatusCode">
            <summary> Enumerates the status codes that may be reported
            during MobiLink user authentication.
            </summary>
            <seealso cref="P:iAnywhere.UltraLite.SyncResult.AuthStatus"/>
        </member>
        <member name="F:iAnywhere.UltraLite.AuthStatusCode.UNKNOWN">
            <summary>
            Authorization status is unknown, possibly because the connection
            has not yet performed a synchronization
            (UNKNOWN = 0).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.AuthStatusCode.VALID">
            <summary>
            User ID and password were valid at time of synchronization
            (VALID = 1000).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.AuthStatusCode.VALID_BUT_EXPIRES_SOON">
            <summary> User ID and password were valid at time of
            synchronization but will expire soon
            (VALID_BUT_EXPIRES_SOON = 2000).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.AuthStatusCode.EXPIRED">
            <summary> User ID or password has expired - authorization failed
            (EXPIRED = 3000).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.AuthStatusCode.INVALID">
            <summary> Bad user ID or password - authorization failed
            (INVALID = 4000).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.AuthStatusCode.IN_USE">
            <summary> User ID is already in use - authorization failed
            (IN_USE = 5000).
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.Connection">
            <summary><para>
            Represents a connection to an UltraLite database.
            </para></summary><remarks><para>
            This class cannot be directly instantiated.
            Connections are instantiated and opened using
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/> or if the database does
            not yet exist, <see cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>.
            </para><para>
            You must open a connection before carrying out any other operation,
            and you must close the connection after you have finished all
            operations on the connection and before your application terminates.
            You must close all tables opened on a connection before closing the
            connection.
            </para><para>
            When a SQLException is thrown, the error code in the exception
            supercedes the error code in <see cref="P:iAnywhere.UltraLite.Connection.LastSQLCode"/> or
            the values of <see cref="P:iAnywhere.UltraLite.Connection.IsLastFetchOK"/> and
            <see cref="P:iAnywhere.UltraLite.Connection.IsLastCodeOK"/>.
            </para></remarks>
        </member>
        <member name="F:iAnywhere.UltraLite.Connection.INVALID_DATABASE_ID">
            <summary>Database ID constant indicating that the
            <see cref="P:iAnywhere.UltraLite.Connection.DatabaseID"/> has not been set.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.GetNewUUID">
            <summary>Generates a new UUID
            (<see cref="T:System.Guid"/>).</summary>
            <remarks>Provided here as it is not included in the .NET Compact
            Framework.</remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <returns>A new UUID as a <see cref="T:System.Guid"/>.</returns>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.Close">
            <summary>
            Closes this connection.
            </summary><remarks><para>
            Once a connection is closed, it cannot be reopened.  To reopen a
            connection, a new Connection object must be created and opened.
            </para><para>
            It is an error to use any object (table, schema, etc.) associated
            with a closed connection.
            </para></remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.GetTable(System.String)">
            <summary>
            Creates and returns a reference to the requested table in the database.
            </summary>
            <param name="name">The name of the table to fetch.</param>
            <returns>An instance of the <see cref="T:iAnywhere.UltraLite.Table"/> object
            representing the desired table.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.PrepareStatement(System.String)">
            <summary>
            Pre-compiles and stores into a PreparedStatement object a SQL
            statement with or without IN parameters.
            </summary><remarks>
            The prepared statement object can be
            used to efficiently execute this statement multiple times.
            </remarks>
            <param name="sql">a SQL statement that may contain one or more
            '?' IN parameter placeholders.</param>
            <returns>a new PreparedStatement object containing the
            pre-compiled statement.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="F:iAnywhere.UltraLite.Connection.AutoCommit">
            <summary>
            Controls whether a commit is performed after each
            insert, update or delete statement.
            </summary><remarks><para>
            If <c>AutoCommit</c> is false, a commit or rollback is performed
            only when the user invokes the <see cref="M:iAnywhere.UltraLite.Connection.Commit"/> or
            <see cref="M:iAnywhere.UltraLite.Connection.Rollback"/> methods.
            </para><para>
            By default, a database commit is performed after each
            successful statement.  If the commit fails, you have the option to
            execute additional SQL statements and perform the commit again, or
            execute a rollback statement.
            </para></remarks>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Commit"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Rollback"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.Commit">
            <summary> Commits outstanding changes to the database.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Commit"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Rollback"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.Rollback">
            <summary> Rolls back outstanding changes to the database.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Commit"/>
            <seealso cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.RollbackPartialDownload">
            <summary> Rolls back outstanding changes to the database from a
            partial download.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.KeepPartialDownload"/>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.CountUploadRows(System.Int32,System.UInt32)">
            <summary> Returns the number of rows that need to be uploaded when
            the next synchronization takes place.
            </summary>
            <param name="mask">The set of publications to check for rows.
            See the <see cref="T:iAnywhere.UltraLite.PublicationSchema"/> class for more information.
            </param>
            <param name="threshold">The maximum number
            of rows to count, limiting the amount of time taken by
            <c>CountUploadRows</c>.  A value of 0 corresponds to the maximum
            limit.  A value of 1 determines if any rows need to be
            synchronized.
            </param>
            <returns>The number of rows that need to be uploaded from the
            specified publication(s).</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.CountUploadRows(System.Int32,System.Int64)">
            <summary>
            Returns the number of rows that need to be uploaded when the next
            synchronization takes place.
            </summary><remarks>
            This method is provided for languages that do not support the
            System.UInt32 type natively.  Use the other form of this method
            if your application supports it.
            </remarks>
            <param name="mask">The set of publications to check for rows.
            See the <see cref="T:iAnywhere.UltraLite.PublicationSchema"/> class for more information.
            </param>
            <param name="threshold">The maximum number of
            rows to count, and so limits the amount of time taken by
            <c>CountUploadRows</c>.
            A value of 0 corresponds to the maximum limit.  A value of
            1 determines if any rows need to be synchronized.
            <paramref name="threshold"/> must be in range
            <c>[0,0x0ffffffff]</c>.
            </param>
            <returns>The number of rows that need to be uploaded from the
            specified publication(s).</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.GetLastDownloadTime(System.Int32)">
            <summary> Returns the time of the most recent download of the
            specified publication.
            </summary>
            <remarks>
            The parameter <paramref name="mask"/> must reference a single
            publication or be the special constant
            <see cref="F:iAnywhere.UltraLite.PublicationSchema.SYNC_ALL_DB"/> for the time
            of the last download of the full database.
            </remarks>
            <param name="mask">The mask of the publication to check.  See the
            <see cref="T:iAnywhere.UltraLite.PublicationSchema"/> class for more information.
            </param>
            <returns>The timestamp of the last download.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.ResetLastDownloadTime(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.ResetLastDownloadTime(System.Int32)">
            <summary> Resets the time of the most recent download.
            </summary>
            <param name="mask">The set of publications to reset.  See
            <see cref="T:iAnywhere.UltraLite.PublicationSchema"/> class for more information.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GetLastDownloadTime(System.Int32)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.GrantConnectTo(System.String,System.String)">
            <summary> Grants access to an UltraLite database for a user ID
            with a specified password.
            </summary><remarks>If an existing user ID is specified,
            this function updates the password for the user.  UltraLite
            supports a maximum of 4 users. This method is enabled only if user
            authentication was enabled when the connection was opened.
            </remarks>
            <param name="uid">The user ID to receive access to the database.
            The maximum length of the ID is 16 characters.
            </param>
            <param name="pwd">The password to be associated with the ID.
            The maximum length is 16 characters.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.RevokeConnectFrom(System.String)">
            <summary> Revokes access to an UltraLite database from the
            specified user ID.
            </summary>
            <param name="uid">
            The user ID for which database access is to be revoked.
            The maximum length of a user ID is 16 characters.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GrantConnectTo(System.String,System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.ChangeEncryptionKey(System.String)">
            <summary>
            Changes the database's encryption key to the specified new key.
            </summary><remarks>
            If the encryption key is
            lost, it will not be possible to open the database.
            </remarks>
            <param name="newKey">The new encryption key for the database.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.StartSynchronizationDelete">
            <summary> Marks all subsequent deletes made by
            this connection for synchronization.</summary><remarks>
            Once this function is called, all delete operations are
            again synchronized, causing the deleted rows to also be removed
            from the consolidated database.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.StopSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.StopSynchronizationDelete">
            <summary>Prevents delete operations from being synchronized.
            </summary><remarks> This method is useful
            for deleting old information from an UltraLite database to save space,
            while not deleting this information on the consolidated database.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.StartSynchronizationDelete"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.Synchronize">
            <summary>
            Synchronize the database using the current <see cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>.
            </summary><remarks>
            A detailed result status will be reported in this connection's
            <see cref="P:iAnywhere.UltraLite.Connection.SyncResult"/> object.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncResult"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.Synchronize(iAnywhere.UltraLite.SyncProgressListener)">
            <summary>
            Synchronize the database using the current
            <see cref="P:iAnywhere.UltraLite.Connection.SyncParms"/> with progress events posted to the
            specified listener.
            </summary><remarks><para>
            The last event posted to the listener will have a state of
            <see cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_LAST"/>.
            </para><para>
            Errors during synchronization will be posted as
            <see cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_ERROR"/> events and then
            thrown as <see cref="T:iAnywhere.UltraLite.SQLException"/>s.
            </para><para>
            A detailed result status will be reported in this connection's
            <see cref="P:iAnywhere.UltraLite.Connection.SyncResult"/> object.
            </para></remarks>
            <param name="listener">The object that will receive
            synchronization progress events.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncResult"/>
            <seealso cref="T:iAnywhere.UltraLite.SyncProgressListener"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.Finalize">
            <summary>Cleans up the associated native object.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.ULNET_Con_GetKey(System.Int32,System.Int32,System.Boolean)">
            <summary> Acquire the jni key of an object (0 if closed by
            runtime).
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.Connection.RuntimeError(iAnywhere.UltraLite.SQLCode)">
            <summary>Throws runtime SQLException
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.ConnectionOpenParms">
            <summary>
            The parameters used to open this connection.
            </summary><remarks>
            This property can be used after the connection is closed.
            </remarks><value>The parameters used to open this connection
            in a read-only <see cref="T:iAnywhere.UltraLite.ConnectionParms"/> instance.
            </value>
            <seealso cref="T:iAnywhere.UltraLite.ConnectionParms"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.LastIdentity">
            <summary> The most recent identity value used. </summary>
            <value>
            The most recent identity value used.  This property is
            equivalent to the SQL statement:
            <code>SELECT @@identity</code>
            LastIdentity is particularly useful in the context of global
            autoincrement columns.
            </value>
            <remarks><para>
            Since this property only allows you to determine the most recently
            assigned default value, you should retrieve this value soon after
            executing the insert statement to avoid spurious results.
            </para><para>
            Occasionally, a single insert statement may include more than one
            column of type global autoincrement.  In this case,
            <c>LastIdentity</c> is one of the generated default values, but
            there is no reliable means to determine which one.  For this
            reason, you should design your database and write your insert
            statements so as to avoid this situation.
            </para></remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.DatabaseID">
            <summary>
            Database ID value to be used for global autoincrement columns.
            </summary>
            <value>Database ID value must be in range
            <c>[0,<see cref="F:System.UInt32.MaxValue"/>]</c>.  A value of
            <see cref="F:iAnywhere.UltraLite.Connection.INVALID_DATABASE_ID"/> is used to indicate that the
            database ID has not been set.</value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">If the new ID is invalid.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.GlobalAutoIncrementUsage">
            <summary>
            The percentage of available global autoincrement values that
            have been used.
            </summary><remarks>
            If the percentage approaches 100, your application should set a
            new value for the global database ID using
            <see cref="P:iAnywhere.UltraLite.Connection.DatabaseID"/>.
            </remarks><value>
            The percentage of available global autoincrement values that
            have been used.  It is an integer in the range [0-100] inclusive.
            </value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.LastSQLCode">
            <summary>
            The SQL code value for the success or failure of the
            last database operation.
            </summary><remarks><para>
            The SQL code is a standard Adaptive Server Anywhere code and is
            reset by any subsequent UltraLite database operation on this
            connection.
            </para><para>
            When a SQLException is thrown, the error code in the exception
            supercedes the error code returned by <see cref="P:iAnywhere.UltraLite.Connection.LastSQLCode"/> or
            the results from <see cref="P:iAnywhere.UltraLite.Connection.IsLastFetchOK"/> and
            <see cref="P:iAnywhere.UltraLite.Connection.IsLastCodeOK"/>.
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.IsOpen">
            <summary>
            Determines whether the connection is open or closed.
            </summary>
            <value>True if the connection is open, false otherwise.
            </value>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.IsDatabaseNew">
            <summary>
            Checks whether the database was new when this connection was opened.
            </summary>
            <value> True if the database was new when this connection was
            opened, false if the database already existed when this connection
            was opened.
            </value>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.IsLastCodeOK">
            <summary>
            Classifies the last SQL code as successful or unsuccessful.
            </summary>
            <value>
            True if the most recent SQL code represents a warning or success,
            and false if the most recent SQL code represents an error.  For
            example, <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_NOTFOUND"/> is not an error.
            </value>
            <seealso cref="P:iAnywhere.UltraLite.Connection.LastSQLCode"/>
            <seealso cref="T:iAnywhere.UltraLite.SQLCode"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.IsLastFetchOK">
            <summary>
            Provides a convenient way of checking that the most recent fetch
            of a row succeeded or failed.
            </summary><value>
            True if the last fetch succeeded, false otherwise.
            </value><remarks>
            When a SQLException is thrown, the error code in the exception
            supercedes the error code in <see cref="P:iAnywhere.UltraLite.Connection.LastSQLCode"/> or the
            values of <see cref="P:iAnywhere.UltraLite.Connection.IsLastFetchOK"/> and
            <see cref="P:iAnywhere.UltraLite.Connection.IsLastCodeOK"/>.
            </remarks>
            <seealso cref="P:iAnywhere.UltraLite.Connection.LastSQLCode"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.SyncParms">
            <summary> The synchronization settings for this connection.
            </summary><value>
            A reference to the parameters used for synchronization by the
            connection.  Modifications to the parameters will affect the next
            synchronization made over the connection.
            </value>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncResult"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.SyncResult">
            <summary>
            The results of the last synchronization for this connection.
            </summary><value>
            A reference to the results of the last synchronization for
            this connection.
            </value>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncResult"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Connection.Schema">
            <summary>The database schema associated with the connection.
            </summary><remarks>
            This property is only valid while its connection is open.
            </remarks><value>
            A reference to the schema of the database referenced by the
            connection.
            </value>
            <seealso cref="T:iAnywhere.UltraLite.DatabaseSchema"/>
        </member>
        <member name="T:iAnywhere.UltraLite.ConnectionParms">
            <summary>
            Specifies parameters for opening a connection to an UltraLite
            database.
            </summary><remarks><para>
            Databases are created with a single authenticated user, <c>DBA</c>,
            whose initial password is <c>SQL</c>.  By default, connections are
            opened using the user ID <c>DBA</c> and password <c>SQL</c>.
            To disable the default user, use
            <see cref="M:iAnywhere.UltraLite.Connection.RevokeConnectFrom(System.String)"/>.  To add a user or change a
            user's password, use <see cref="M:iAnywhere.UltraLite.Connection.GrantConnectTo(System.String,System.String)"/>.
            </para><para>
            If multiple connections are created, each one must be given a unique
            name using <c>ConnectionName="<i>name</i>";</c>.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseNameParms.AdditionalParms"/>
        </member>
        <member name="T:iAnywhere.UltraLite.DatabaseNameParms">
            <summary>Identifies an UltraLite database.
            </summary><remarks><para>
            Each instance contains platform-specific and generic paths to the
            database.  Only one value is used
            with the platform-specific path taking precedence over the
            generic path.  For example, with
            <code>[Visual Basic]</code>
            <code>  dbName.DatabaseOnCE="\UltraLite\mydb1.udb";</code>
            <code>  dbName.DatabaseOnDesktop="mydb2.udb";</code>
            <code>[C#]</code>
            <code>  dbName.DatabaseOnCE="\\UltraLite\\mydb1.udb";</code>
            <code>  dbName.DatabaseOnDesktop="mydb2.udb";</code>
            the path
            <c>\UltraLite\mydb1.udb</c> would be used on
            Windows CE while <c>mydb2.udb</c> would be used on other platforms.
            </para><para>
            After an instance is passed to an UltraLite method, the property
            <c>ParmsUsed</c>
            returns the parameters actually used by the UltraLite method.
            </para><para>
            The recommended extension for UltraLite database files is <b>.udb</b>.
            On Windows CE devices, the default database is
            <b>\UltraLiteDB\ulstore.udb</b>.
            On other Windows platforms, the default database is <b>ulstore.udb</b>.
            In C#, you must escape any backslash characters in paths.
            </para></remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseNameParms.#ctor">
            <summary>
            Initializes a DatabaseNameParms instance with its default values.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseNameParms.ToString">
            <summary>Returns the string representation of this instance.
            </summary>
            <returns>
            string representation of this instance.
            </returns>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseNameParms.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this object.
            </summary>
            <param name="disposing">true to release both managed and unmanaged
            resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseNameParms.DatabaseOnCE">
            <summary>
            Specifies the path and filename of the UltraLite database on
            Windows CE.</summary><remarks>
            If the value is <c>null</c>, the default database
            <b>\UltraLiteDB\ulstore.udb</b> is used.
            In C#, you must escape any backslash characters in paths.
            </remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseNameParms.DatabaseOnDesktop">
            <summary>
            Specifies the path and filename of the UltraLite database on
            Windows desktop platforms.</summary><remarks>
            If the value is <c>null</c>, the default database
            <b>ulstore.udb</b> is used.
            In C#, you must escape any backslash characters in paths.
            </remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseNameParms.AdditionalParms">
            <summary>
            Specifies additional parameters as a semicolon-separated list of
            <i>name</i>=<i>value</i> pairs.  These are less commonly used
            parameters.
            </summary><remarks><para>
            The values for the page size and reserve size parameters are
            specified in units of bytes.  Use the suffix <c>k</c> or <c>K</c>
            to indicate units of kilobytes and use the suffix <c>m</c> or
            <c>M</c> to indicate megabytes.
            </para><para>
            Additional parameters are:
            <list type="table">
            <listheader><term>Keyword</term>
            <description>Description</description></listheader>
            <item><term>dbn</term>
            <term><para>
            Identifies a loaded database to which a connection needs to
            be made.
            </para><para>
            When a database is started, it is assigned a database
            name, either explicitly with the <c>dbn</c> parameter, or by
            UltraLite using the base of the filename with the extension
            and path removed.
            </para><para>
            When opening connections, UltraLite will first search for a
            running database with a matching <c>dbn</c>.  If one is not found,
            UltraLite will start a new database using the appropriate
            database filename parameter (<see cref="P:iAnywhere.UltraLite.DatabaseNameParms.DatabaseOnCE"/> or
            <see cref="P:iAnywhere.UltraLite.DatabaseNameParms.DatabaseOnDesktop"/>).
            </para><para>
            This parameter is required if the application (or UltraLite
            engine) needs to access two different databases that have the
            same base filename.
            </para><para>
            This parameter is only used when opening a connection with
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/> or
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>.
            </para>
            </term></item>
            <item><term>obfuscate</term>
            <term><para>
            When set to one (1), specifies that the database is to be
            created with obfuscation.  For example:
            <code> createParms.<b>AdditionalParms = "obfuscate=1";</b></code>
            </para><para>
            Obfuscating databases provides security against
            straightforward attempts to view data in the database directly
            using a viewing tool.  It is not proof against skilled and
            determined attempts to gain access to the data.  Obfuscation
            has little or no performance impact.
            </para><para>
            This parameter is only used when creating a new database with
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>.
            </para>
            </term></item>
            <item></item>
            <item><term>page_size</term>
            <term><para>
            UltraLite databases are stored in pages.  I/O operations are
            carried out one page at a time.  The default page size for
            UltraLite databases is 4 KB.  You can specify 2 KB pages using
            the following storage parameters string:
            <code> connParms.<b>AdditionalParms = "page_size=2k";</b></code>
            </para><para>
            Setting a page size of 2 KB reduces the maximum number of
            tables to approximately 500.
            </para><para>
            This parameter is only used when creating a new database with
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>.
            </para>
            </term></item>
            <item></item>
            <item><term>reserve_size</term>
            <term><para>
            Reserves file system space for storage of UltraLite
            persistent data.
            </para><para>
            The <c>reserve_size</c> parameter allows you to pre-allocate
            the file system space required for your UltraLite database
            without actually inserting any data.  Reserving file system
            space can improve performance slightly and also prevent out of
            memory failures.  By default, the persistent storage file only
            grows when required as the application updates the database.
            </para><para>
            Note that <c>reserve_size</c> reserves file system space,
            which includes the metadata in the persistent store file, and
            not just the raw data.  The metadata overhead, as well as 
            data compression, must be considered when deriving the
            required file system space from the amount of database data.
            Running the database with test data and observing the
            persistent store file size is recommended.
            </para><para>
            The <c>reserve_size</c> parameter reserves space by growing
            the persistent store file to the given reserve size on startup,
            regardless of whether the file previously existed.  The file
            is never truncated.
            </para><para>
            The following parameter string ensures that the persistent
            store file is at least 2 MB upon startup.
            <code> createParms.<b>AdditionalParms = "reserve_size=2m";</b></code>
            This parameter is only used when opening a connection with
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/> or
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>.
            </para>
            </term></item>
            </list></para>
            </remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseNameParms.ParmsUsed">
            <summary>
            Returns the parameters actually used by the last
            <c>DatabaseManager</c> method to use this instance.
            </summary>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.DropDatabase(iAnywhere.UltraLite.DatabaseNameParms)"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/>
        </member>
        <member name="E:iAnywhere.UltraLite.DatabaseNameParms.UnusedEvent">
            <summary>
            Unused.
            </summary>
            <remarks>
            This public Event is added to fix a Visual Studio .NET bug
            relating to the integration of this class in Visual Basic .NET
            projects.  It has no functional use.
            </remarks>
        </member>
        <member name="T:iAnywhere.UltraLite.DatabaseNameParms.UnusedEventHandler">
            <summary>
            Unused.
            </summary>
            <remarks>
            This public Delegate is added to fix a Visual Studio .NET bug
            relating to the integration of this class in Visual Basic .NET
            projects.  It has no functional use.
            </remarks>
            <param name="sender">Object that is the sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:iAnywhere.UltraLite.ConnectionParms.#ctor">
            <summary>
            Initializes a ConnectionParms instance with its default values.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.ConnectionParms.ConnectionName">
            <summary>
            Specifies a name for the connection.  This is only needed if you
            create more than one connection to the database.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.ConnectionParms.UserID">
            <summary>
            Specifies an authenticated user for the database.
            </summary><remarks>
            Databases are initially created with a single authenticated user
            named <c>DBA</c>. User IDs are case-insensitive if the database
            is case-insensitive and case-sensitive if the database is
            case-sensitive.  The default value is <c>DBA</c>.
            </remarks>
            <seealso cref="P:iAnywhere.UltraLite.ConnectionParms.Password"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GrantConnectTo(System.String,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.RevokeConnectFrom(System.String)"/>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseSchema.IsCaseSensitive"/>
        </member>
        <member name="P:iAnywhere.UltraLite.ConnectionParms.Password">
            <summary>
            Specifies the password for the authenticated user.
            </summary><remarks>
            When a database is created, the
            password for the <c>DBA</c> user ID is set to <c>SQL</c>.
            Passwords are case-insensitive if the database is
            case-insensitive and case-sensitive if the database is
            case-sensitive.  The default value is <c>SQL</c>.
            </remarks>
            <seealso cref="P:iAnywhere.UltraLite.ConnectionParms.UserID"/>
        </member>
        <member name="P:iAnywhere.UltraLite.ConnectionParms.EncryptionKey">
            <summary>
            Specifies a key for encrypting the database.
            </summary><remarks><para>
            All <c>openConnection</c> calls must use the same key as was
            specified when the database was created.  Lost or forgotten keys
            result in completely inaccessible databases.
            </para><para>
            As with all passwords, it is best to choose a key value that
            cannot be easily guessed.  The key can be of arbitrary length,
            but generally the longer the key, the better, because a shorter
            key is easier to guess than a longer one.  As well, including a
            combination of numbers, letters, and special characters decreases
            the chances of someone guessing the key.
            </para></remarks>
            <seealso cref="M:iAnywhere.UltraLite.Connection.ChangeEncryptionKey(System.String)"/>
        </member>
        <member name="P:iAnywhere.UltraLite.ConnectionParms.CacheSize">
            <summary>
            Specifies the size of the cache.
            </summary><remarks><para>
            The values for the cache size are specified in units of bytes.
            Use the suffix <c>k</c> or <c>K</c> to indicate units of kilobytes
            and use the suffix of <c>m</c> or <c>M</c> to indicate megabytes.
            </para><para>
            For example, the following sets the
            cache size to 128 KB.
            <code>connParms.<b>CacheSize = "128k";</b></code>
            </para><para>
            The default cache size is sixteen pages.  Using the default page
            size of 4 KB, the default cache size is therefore 64 KB.  The
            minimum cache size is platform dependent.
            </para><para>
            The default cache size is conservative.  If your testing shows the
            need for better performance, you should increase the cache size.
            </para><para>
            Increasing the cache size beyond the size of the database itself
            provides no performance improvement.  Also, large cache sizes may
            interfere with the number of other applications you can use.
            </para><para>
            If the cache size is unspecified or improperly specified, the
            default size is used.
            </para></remarks>
        </member>
        <member name="T:iAnywhere.UltraLite.CreateParms">
            <summary>
            Specifies parameters for creating an UltraLite database and opening a
            connection to it.
            </summary><remarks><para>
            NOTE: Only one database may be active at a given time.  Attempts to
            create a different database while other connections are open will
            result in an error.
            </para><para>
            A valid schema file must be specified to successfully create a
            database.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseNameParms.AdditionalParms"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CreateParms.#ctor">
            <summary>
            Initializes a CreateParms instance with its default values.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.CreateParms.Schema">
            <summary>
            Specifies the schema for an UltraLite database.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.SchemaParms"/>
        </member>
        <member name="T:iAnywhere.UltraLite.Cursor">
            <summary> Represents a cursor in an UltraLite database.
            Cursors are sets of rows from either a table or a result set.
            </summary>
            <remarks><para>
            This class is an abstract base class of the <see cref="T:iAnywhere.UltraLite.Table"/> and
            <see cref="T:iAnywhere.UltraLite.ResultSet"/> classes.
            </para><para>
            Derived classes have a <c>Schema</c> property through which the
            description of the rows may be accessed.
            </para></remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.#ctor(iAnywhere.UltraLite.Connection)">
            <summary> Constructor.  Public to package only.
            </summary>
            <param name="conn">Connection to open the cursor with</param>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.doOpen">
            <summary>
            Open.  Public to package only.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.Close">
            <summary>
            Closes the cursor.
            </summary><remarks>
            It is not an error to close a cursor that is already closed.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MoveAfterLast">
            <summary>Position to after the last row of the cursor.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MoveBeforeFirst">
            <summary>Position to before the first row of the cursor.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MoveFirst">
            <summary>Position to the first row of the cursor.
            </summary>
            <returns>true if successful, false otherwise.  For example, the
            method fails if there are no rows.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MoveLast">
            <summary> Position to the last row of the cursor.
            </summary>
            <returns>true if successful, false otherwise.  For example, the
            method fails if there are no rows.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MoveNext">
            <summary> Position to the next row or after last.
            </summary>
            <returns>true if successful, false otherwise.  For example, the
            method fails if there are no more rows.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MovePrevious">
            <summary> Position to the previous row or before first.
            </summary>
            <returns>true if successful, false otherwise.  For example, the
            method fails if there are no more rows.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.MoveRelative(System.Int32)">
            <summary>Position relative to the current row.
            </summary><remarks>
            If the row does not exist, the method returns false, and the
            cursor position is after the last row (<c>isEOF()</c>) if
            <paramref name="offset"/> is positive, and before the first row
            (<c>isBOF()</c>) if the <paramref name="offset"/> is negative.
            </remarks>
            <returns>true if successful, false otherwise.  For example, the
            method fails if it positions beyond the first or last row.
            </returns>
            <param name="offset">The number of rows to move.  Negative values
            correspond to moving backwards.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.String"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as a <see cref="T:System.String"/>.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)">
            <summary>Returns the value for the specified column as a UUID
            (<see cref="T:System.Guid"/>).
            </summary><remarks>
            Only valid for columns of type <see cref="F:iAnywhere.UltraLite.SQLType.UUID"/> or
            for columns of type <see cref="F:iAnywhere.UltraLite.SQLType.BINARY"/> with length 16.
            </remarks>
            <param name="columnID">The ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>Column value as a <see cref="T:System.Guid"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSize(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)">
            <summary> Returns the value for the specified column as an
            <see cref="T:System.Int16"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as an <see cref="T:System.Int16"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)">
            <summary> Returns the value for the specified column as an
            <see cref="T:System.Int32"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as an <see cref="T:System.Int32"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)">
            <summary> Returns the value for the specified column as an
            <see cref="T:System.Int64"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as an <see cref="T:System.Int64"/>
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.UInt16"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as an <see cref="T:System.UInt16"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.UInt32"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as an <see cref="T:System.UInt32"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.UInt64"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as a <see cref="T:System.UInt64"/></returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.Single"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <returns>column value as a <see cref="T:System.Single"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)">
            <summary> Returns the value for the specified column as a <see cref="T:System.Double"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as a <see cref="T:System.Double"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)">
            <summary> Returns the value for the specified column as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <returns>column value as a <see cref="T:System.Boolean"/>.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.DateTime"/> with millisecond accuracy.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.
            </param>
            <returns>column value as a <see cref="T:System.DateTime"/>.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="T:System.DateTime"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)">
            <summary> Returns the value for the specified column as a
            <see cref="T:System.TimeSpan"/> with millisecond accuracy.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <returns>Column value as a <see cref="T:System.TimeSpan"/>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)">
            <summary>
            Returns the value for the specified column as an array of
            <see cref="T:System.Byte"/>s. Only valid for columns of type
            <see cref="F:iAnywhere.UltraLite.SQLType.BINARY"/>, <see cref="F:iAnywhere.UltraLite.SQLType.LONGBINARY"/>,
            or <see cref="F:iAnywhere.UltraLite.SQLType.UUID"/>.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <returns>column value as an array of <see cref="T:System.Byte"/>s.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Copies a subset of the value for the specified
            <see cref="F:iAnywhere.UltraLite.SQLType.LONGBINARY"/> column, beginning at the specified
            offset, to the specified offset of the destination
            <see cref="T:System.Byte"/> array.
            </summary><remarks><para>
            The bytes at position <paramref name="srcOffset"/> through
            <c><paramref name="srcOffset"/>+<paramref name="count"/>-1</c> of
            the value are copied into positions
            <paramref name="dstOffset"/> through
            <c><paramref name="dstOffset"/>+<paramref name="count"/>-1</c>,
            respectively, of the destination array.  If the end of the value
            is encountered before <paramref name="count"/> bytes are copied,
            the remainder of the destination array is left unchanged.
            </para><para>
            If any of the following are true, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with
            code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER"/> is thrown and
            the destination is not modified:
            <list type="bullet">
            <item><paramref name="dst"/> is null.</item>
            <item><paramref name="srcOffset"/> is negative.</item>
            <item><paramref name="dstOffset"/> is negative.</item>
            <item><paramref name="count"/> is negative.</item>
            <item><c><paramref name="dstOffset"/>+<paramref name="count"/></c>
            is greater than <c><paramref name="dst"/>.Length</c>.</item>
            </list>
            For other errors, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with the
            appropriate error code is thrown.
            </para></remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <param name="srcOffset">start position in the column value.  Zero
            is the beginning of the value.</param>
            <param name="dst">the destination array.</param>
            <param name="dstOffset">start position in the destination array.
            </param>
            <param name="count">the number of bytes to be copied.</param>
            <returns>the actual number of bytes copied.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>Copies a subset of the value for the specified
            <see cref="F:iAnywhere.UltraLite.SQLType.LONGVARCHAR"/> column, beginning at the
            specified offset, to the specified offset of the destination
            <see cref="T:System.Char"/> array.
            </summary><remarks><para>
            The characters at position <paramref name="srcOffset"/> through
            <c><paramref name="srcOffset"/>+<paramref name="count"/>-1</c> of
            the value are copied into positions
            <paramref name="dstOffset"/> through
            <c><paramref name="dstOffset"/>+<paramref name="count"/>-1</c>,
            respectively, of the destination array.  If the end of the value
            is encountered before <paramref name="count"/> characters are
            copied, the remainder of the destination array is left unchanged.
            </para><para>
            If any of the following is true, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with
            code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER"/> is thrown and
            the destination is not modified:
            <list type="bullet">
            <item><paramref name="dst"/> is null.</item>
            <item><paramref name="srcOffset"/> is negative.</item>
            <item><paramref name="dstOffset"/> is negative.</item>
            <item><paramref name="count"/> is negative.</item>
            <item><c><paramref name="dstOffset"/>+<paramref name="count"/></c>
            is greater than <c><paramref name="dst"/>.Length</c>.</item>
            </list>
            For other errors, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with the
            appropriate error code is thrown.
            </para></remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <param name="srcOffset">start position in the column value.  Zero
            is the beginning of the value.</param>
            <param name="dst">the destination array.</param>
            <param name="dstOffset">start position in the destination array.</param>
            <param name="count">the number of characters to be copied.</param>
            <returns>the actual number of characters copied. </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.IsNull(System.Int16)">
            <summary> Checks whether the value from the specified column is NULL.
            </summary>
            <param name="columnID">the ID number of the column.  The first
            column in the cursor has an ID value of one.</param>
            <returns>true if value is NULL, false if value is not NULL.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBoolean(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetBytes(System.Int16,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetChars(System.Int16,System.Int32,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetDouble(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetFloat(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetLong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetString(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTime(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetTimestamp(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUInt(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetULong(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUShort(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Cursor.GetUUID(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.Fill(System.Data.DataTable)">
            <summary>Fills a ADO .NET DataTable object with the rows
            in the cursor.</summary>
            <param name="dt">the ADO .NET DataTable object to fill.</param>
            <returns>the number of rows that were filled.</returns>
        </member>
        <member name="M:iAnywhere.UltraLite.Cursor.Finalize">
            <summary>Finalize method</summary>
        </member>
        <member name="P:iAnywhere.UltraLite.Cursor.IsOpen">
            <summary>Checks whether this cursor is currently open.
            </summary>
            <returns>True if this cursor is currently open, false if the
            cursor is closed.
            </returns>
        </member>
        <member name="P:iAnywhere.UltraLite.Cursor.RowCount">
            <summary>
            Returns the number of rows in the cursor.
            </summary><remarks>
            One use for <c>RowCount</c> is to decide when to delete old rows to
            save space.  Old rows can be deleted from the UltraLite database
            without being deleted from the consolidated database using the
            <see cref="M:iAnywhere.UltraLite.Connection.StopSynchronizationDelete"/> method.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.StartSynchronizationDelete"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.StopSynchronizationDelete"/>
        </member>
        <member name="P:iAnywhere.UltraLite.Cursor.IsBOF">
            <summary>Returns true if the current row position is before the first row.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.Cursor.IsEOF">
            <summary>Returns true if the current row position is after the last row.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="T:iAnywhere.UltraLite.CursorSchema">
            <summary> Represents the schema of an UltraLite cursor.
            </summary>
            <remarks>
            This class is an abstract base class of the <see cref="T:iAnywhere.UltraLite.TableSchema"/>
            and <see cref="T:iAnywhere.UltraLite.ResultSetSchema"/> classes.
            </remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.#ctor">
            <summary> Constructor.
            Public to assembly only.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.Open(iAnywhere.UltraLite.Connection,System.Int32)">
            <summary>
            Opens this schema instance for use.  Public to package only.
            Assumes cursorSchemaSlot >= 0.
            </summary>
            <param name="conn">Connection that opened the cursor schema</param>
            <param name="cursorSchemaSlot">jni slot for key of cursor schema</param>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)">
            <summary>
            Returns the column ID of the named column.
            </summary><remarks><para>
            Column IDs range from 1 to <see cref="P:iAnywhere.UltraLite.CursorSchema.ColumnCount"/>, inclusively.
            </para><para>
            Column IDs and counts may change during a schema upgrade.  To
            correctly identify a column, access it by name or refresh the
            cached IDs and counts after a schema upgrade.
            </para></remarks>
            <param name="name">name of the column.</param>
            <returns>column ID.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.CursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetColumnName(System.Int16)">
            <summary>
            Returns the name of column identified by the specified column ID.
            </summary><remarks>
            Column IDs and count may change during a schema upgrade.  To
            correctly identify a column, access it by name or refresh the
            cached IDs and counts after a schema upgrade.
            </remarks>
            <param name="columnID">ID of the column.
            <paramref name="columnID"/> must be in the range
            <c>[1,<see cref="P:iAnywhere.UltraLite.CursorSchema.ColumnCount"/>]</c>.
            </param>
            <returns>name of the column.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.CursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)">
            <summary>Gets the SQL data type of the named column.
            </summary>
            <param name="name">name of the column.
            </param>
            <returns>	a SQLType enumerated integer.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="T:iAnywhere.UltraLite.SQLType"/>
            <seealso cref="P:iAnywhere.UltraLite.CursorSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetColumnSize(System.String)">
            <summary> Returns the size of the named column if the column is a sized column
            (SQL type BINARY or CHAR).
            </summary>
            <param name="name">name of the column.</param>
            <returns>size of the sized column.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetColumnScale(System.String)">
            <summary> Returns the scale of the named column if the column is a numeric
            column (SQL type NUMERIC).
            </summary>
            <param name="name">name of the column.</param>
            <returns>scale of the numeric column.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetColumnPrecision(System.String)">
            <summary> Returns the precision of the named column if the column is a numeric
            column (SQL type NUMERIC).
            </summary>
            <param name="name">name of the column.</param>
            <returns>precision of the numeric column.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.Finalize">
            <summary> Destructor that cleans up the associated native object.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.CursorSchema.GetNativeKey">
            <summary>
            Help function to get the native key associated with this schema.
            </summary>
            <returns>The key</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">If schema is closed.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.CursorSchema.Name">
            <summary> The name of this cursor.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.CursorSchema.IsOpen">
            <summary>Checks whether this cursor schema is currently open.
            </summary>
            <returns>True if this cursor schema is currently open, false if
            the cursor schema is closed.
            </returns>
        </member>
        <member name="P:iAnywhere.UltraLite.CursorSchema.ColumnCount">
            <summary>
            Returns the number of columns in this cursor.
            </summary><remarks><para>
            Column IDs range from 1 to <c>ColumnCount</c>, inclusively.
            </para><para>
            Column IDs and count may change during a schema upgrade.  To
            correctly identify a column, access it by name or refresh the
            cached IDs and counts after a schema upgrade.
            </para></remarks>
        </member>
        <member name="T:iAnywhere.UltraLite.DatabaseManager">
            <summary>
            Manages connections to an UltraLite database.
            May not be instantiated more than once.
            </summary>
            <remarks><para>
            You must open a connection before carrying out any other operation,
            and you must close the connection after you have finished all
            operations on the connection, and before your application terminates.
            You must close all tables opened on a connection before closing the
            connection.
            </para><para>
            The constructor is not thread-safe.  All other methods on this class
            are thread-safe.
            </para></remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.#ctor">
            <summary><para>
            Initializes the iAnywhere.UltraLite assembly using the standalone
            runtime.  Only one
            instance of DatabaseManager can be created per application.
            </para></summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">if called more than once per
            application.
            </exception>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseManager.RuntimeType"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.#ctor(iAnywhere.UltraLite.RuntimeType)">
            <summary><para>
            Initializes the iAnywhere.UltraLite assembly specifying the type
            of runtime.  Only one
            instance of DatabaseManager can be created per application.
            </para></summary>
            <param name="ulType">specifies the type of UltraLite.NET
            runtime to use.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">if called more than once per
            application.
            </exception>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseManager.RuntimeType"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)">
            <summary>
            Specifies the listener object used to process the specified server
            sync message.
            </summary>
            <remarks><para>
            The parameter <i>appClassName</i> is the unique identifier used
            to identify the application.  The application may only use one
            <i>appClassName</i> at a time.  While a listener is registered
            with a particular <i>appClassName</i>, calls to
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)"/> or
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetActiveSyncListener(System.String,iAnywhere.UltraLite.ActiveSyncListener)"/> with a different
            <i>appClassName</i> will fail.
            </para><para>
            To remove the listener for a particular message, call
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)"/> with <c>null</c> as the
            <i>listener</i> parameter.
            </para><para>
            To remove all listeners, call <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)"/>
            will <c>null</c> for all parameters.
            </para><para>
            Applications should remove all listeners prior to exiting.
            </para></remarks>
            <example>
            Refer to the
            <see cref="M:iAnywhere.UltraLite.ServerSyncListener.ServerSyncInvoked(System.String)"/> documentation
            for an example of <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)"/>.
            </example>
            <param name="messageName">name of the message.
            </param>
            <param name="appClassName">unique class name for the application.
            This is a unique identifier used to identify the application.
            </param>
            <param name="listener">listener object.  Use null to remove
            previous listener.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.SetActiveSyncListener(System.String,iAnywhere.UltraLite.ActiveSyncListener)">
            <summary>
            Specifies the listener object to process ActiveSync calls from the
            MobiLink provider for ActiveSync.
            </summary>
            <remarks><para>
            The parameter <i>appClassName</i> is the unique identifier used
            to identify the application.  The application may only use one
            <i>appClassName</i> at a time.  While a listener is registered
            with a particular <i>appClassName</i>, calls to
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)"/> or
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetActiveSyncListener(System.String,iAnywhere.UltraLite.ActiveSyncListener)"/> with a different
            <i>appClassName</i> will fail.
            </para><para>
            To remove the ActiveSync listener, call
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetActiveSyncListener(System.String,iAnywhere.UltraLite.ActiveSyncListener)"/> with <c>null</c> as the
            <i>listener</i> parameter.
            </para><para>
            To remove all listeners, call <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetServerSyncListener(System.String,System.String,iAnywhere.UltraLite.ServerSyncListener)"/>
            will <c>null</c> for all parameters.
            </para><para>
            Applications should remove all listeners prior to exiting.
            </para></remarks>
            <example>
            Refer to the
            <see cref="M:iAnywhere.UltraLite.ActiveSyncListener.ActiveSyncInvoked(System.Boolean)"/> documentation
            for an example of <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetActiveSyncListener(System.String,iAnywhere.UltraLite.ActiveSyncListener)"/>.
            </example>
            <param name="appClassName">unique class name for the application.
            This is the class name used when the application is
            registered for use with ActiveSync.
            </param>
            <param name="listener">listener object.  Use null to remove
            previous listener.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)">
            <summary>
            Creates a database and opens a connection to the database as
            specified by <paramref name="parms"/>.
            </summary><remarks><para>
            If the database already exists, a <see cref="T:iAnywhere.UltraLite.SQLException"/>
            with code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_NOT_CREATED"/>
            is thrown.
            </para><para>
            <see cref="P:iAnywhere.UltraLite.Connection.IsDatabaseNew"/> on the connection is set to
            <c>true</c> to indicate that the database was created when the
            connection was opened.
            </para><para>
            You must close the connection after you have finished all
            operations on the connection, and before your application
            terminates.  You must close all tables opened on a connection
            before closing the connection.
            </para></remarks>
            <param name="parms">
            parameters for creating the database and opening a connection to
            it.  See <see cref="T:iAnywhere.UltraLite.CreateParms"/> for more information.
            </param>
            <returns>opened Connection.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="T:iAnywhere.UltraLite.CreateParms"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.IsDatabaseNew"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Close"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GrantConnectTo(System.String,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.RevokeConnectFrom(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)">
            <summary>
            Opens a connection to the database specified by
            <paramref name="parms"/>.
            If the database does not exist, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with
            the value <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_ULTRALITE_DATABASE_NOT_FOUND"/> is thrown.
            </summary><remarks><para>
            <see cref="P:iAnywhere.UltraLite.Connection.IsDatabaseNew"/> is set to <c>false</c> to
            indicate that the database was not created when the connection was
            opened.
            </para><para>
            You must close the connection after you have finished all
            operations on the connection, and before your application
            terminates.  You must close all tables opened on a connection
            before closing the connection.
            </para></remarks>
            <param name="parms">
            parameters for opening a connection.  See
            <see cref="T:iAnywhere.UltraLite.ConnectionParms"/> for more information.
            </param>
            <returns>opened Connection.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="T:iAnywhere.UltraLite.ConnectionParms"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.IsDatabaseNew"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Close"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GrantConnectTo(System.String,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.RevokeConnectFrom(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.DropDatabase(iAnywhere.UltraLite.DatabaseNameParms)">
            <summary><para>
            Deletes the specified database.
            </para><para>
            You cannot drop a database that has open connections.
            </para></summary>
            <param name="parms">parameters for identifying a database.  See
            <see cref="T:iAnywhere.UltraLite.DatabaseNameParms"/>
            for more information.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="T:iAnywhere.UltraLite.DatabaseNameParms"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.CreateDatabase(iAnywhere.UltraLite.CreateParms)"/>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.OpenConnection(iAnywhere.UltraLite.ConnectionParms)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.RuntimeError(iAnywhere.UltraLite.SQLCode)">
            <summary>Throws runtime SQLException
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseManager.Finalize">
            <summary> Destructor that cleans up the associated native state.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseManager.RuntimeType">
            <summary>Specifies the type of the UltraLite.NET runtime.
            </summary>
            <value>A <see cref="T:iAnywhere.UltraLite.RuntimeType"/>
            enumerated value representing
            the type of the unmanaged UltraLite.NET runtime.
            </value>
        </member>
        <member name="T:iAnywhere.UltraLite.RuntimeType">
            <summary>Enumerates the types of UltraLite.NET runtimes.</summary>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseManager.#ctor(iAnywhere.UltraLite.RuntimeType)"/>
        </member>
        <member name="F:iAnywhere.UltraLite.RuntimeType.STANDALONE_UL">
            <summary><para>Selects the standalone UltraLite.NET runtime.
            </para><para>
            The standalone runtime accesses databases directly.  Databases
            are accessed more quickly but cannot be shared.
            </para></summary>
        </member>
        <member name="F:iAnywhere.UltraLite.RuntimeType.UL_ENGINE_CLIENT">
            <summary><para>Selects to use the UltraLite engine.
            </para><para>
            The UltraLite.NET engine client communicates with the UltraLite
            engine to access databases.  This means that databases can be
            shared by different applications.
            </para></summary>
        </member>
        <member name="T:iAnywhere.UltraLite.DatabaseSchema">
            <summary> Represents the schema of an UltraLite database.
            </summary>
            <remarks>
            This class cannot be directly instantiated.
            A <see cref="T:iAnywhere.UltraLite.DatabaseSchema"/> object is attached to a connection as
            its <see cref="P:iAnywhere.UltraLite.Connection.Schema"/> property and is only
            valid while that connection is open.
            </remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.#ctor(iAnywhere.UltraLite.Connection)">
            <summary> Constructor. (should only be called by
            Connection._schema = new DatabaseSchema( this )).
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.GetDatabaseProperty(System.String)">
            <summary>Returns the value of the specified database property.
            </summary><remarks><para>
            Recognized properties are:
            <list type="bullet">
            <item><para><c>"DATE_FORMAT"</c>
            The date format used for string conversions by the database.
            </para>
            <para>
            This format is not necessarily the same as the one used by
            <see cref="T:System.DateTime"/>.
            </para></item>
            <item><para><c>"DATE_ORDER"</c>
            The date order used for string conversions by the database.
            </para></item>
            <item><para><c>"NEAREST_CENTURY"</c>
            The nearest century used for string conversions by the database.
            </para></item>
            <item><para><c>"PRECISION"</c>
            The floating point precision used for string conversions by the
            database.
            </para></item>
            <item><para><c>"SCALE"</c>
            The minimum number of digits after the decimal point when an
            arithmetic result is truncated to the maximum PRECISION during
            string conversions by the database.
            </para></item>
            <item><para><c>"TIME_FORMAT"</c>
            The time format used for string conversions by the database.
            </para>
            <para>
            This format is not necessarily the same as the one used by
            <see cref="T:System.TimeSpan"/>.
            </para></item>
            <item><para><c>"TIMESTAMP_FORMAT"</c>
            The timestamp format used for string conversions by the database.
            </para>
            <para>
            This format is not necessarily the same as the one used by
            <see cref="T:System.DateTime"/>.
            </para></item>
            <item><para><c>"TIMESTAMP_INCREMENT"</c>
            The minimum difference between two unique timestamps, in
            nanoseconds (1,000,000th of a second).
            </para></item>
            </list>
            </para></remarks>
            <param name="name">Name of the database property.</param>
            <returns>Value of the property as a string.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.ApplyFile(iAnywhere.UltraLite.SchemaParms,iAnywhere.UltraLite.SchemaUpgradeListener)">
            <summary>Applies a database schema file to the database while
            allowing a listener to monitor the progress.</summary>
            <remarks>All instances of <see cref="T:iAnywhere.UltraLite.TableSchema"/>,
            <see cref="T:iAnywhere.UltraLite.IndexSchema"/>, and <see cref="T:iAnywhere.UltraLite.PublicationSchema"/>
            will be invalidated and will need to be replaced.
            </remarks>
            <param name="parms">
            Parameters for specifying the schema to be applied to the
            database. See <see cref="T:iAnywhere.UltraLite.SchemaParms"/> for more information.
            </param>
            <param name="listener">
            The listener to receive schema upgrade progress events.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseSchema.ApplyFile(iAnywhere.UltraLite.SchemaParms)"/>
            <seealso cref="T:iAnywhere.UltraLite.SchemaParms"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.ApplyFile(iAnywhere.UltraLite.SchemaParms)">
            <summary>Applies a database schema file to the database.</summary>
            <remarks>All instances of <see cref="T:iAnywhere.UltraLite.TableSchema"/>,
            <see cref="T:iAnywhere.UltraLite.IndexSchema"/>, and <see cref="T:iAnywhere.UltraLite.PublicationSchema"/>
            will be invalidated and will need to be replaced.
            </remarks>
            <param name="parms">
            Parameters for specifying the schema to be applied to the
            database. See <see cref="T:iAnywhere.UltraLite.SchemaParms"/> for more information.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseSchema.ApplyFile(iAnywhere.UltraLite.SchemaParms,iAnywhere.UltraLite.SchemaUpgradeListener)"/>
            <seealso cref="T:iAnywhere.UltraLite.SchemaParms"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.GetTableName(System.Int32)">
            <summary>
            Returns the name of the table identified by the specified table
            ID.
            </summary><remarks>
            Table IDs may change during a schema upgrade.  To
            correctly identify a table, access it by name or refresh
            the cached IDs after a schema upgrade.
            </remarks>
            <param name="tableID">
            ID of the table.  <paramref name="tableID"/>
            must be in range <c>[1,TableCount]</c>.</param>
            <returns>table name</returns>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseSchema.TableCount"/>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.GetPublicationName(System.Int32)">
            <summary>
            Returns the name of the publication identified by the specified
            publication ID.  Publication IDs are not publication masks.
            </summary><remarks>
            Note: Publication IDs, masks, and counts may change during a schema
            upgrade.  To correctly identify a publication, access it by name
            or refresh the cached IDs, masks, and counts after a schema
            upgrade.
            </remarks>
            <param name="pubID">
            ID of the publication. <paramref name="pubID"/> must be in the
            range <c>[1,<see cref="P:iAnywhere.UltraLite.DatabaseSchema.PublicationCount"/>]</c>.
            </param>
            <returns>publication name</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.DatabaseSchema.PublicationCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.GetPublicationSchema(System.String)">
            <summary>
            Returns the publication schema corresponding to the named
            publication.
            </summary>
            <param name="name">name of the publication.
            </param>
            <returns>publication schema of the named publication.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseSchema.GetPublicationName(System.Int32)"/>
            <seealso cref="T:iAnywhere.UltraLite.PublicationSchema"/>
        </member>
        <member name="M:iAnywhere.UltraLite.DatabaseSchema.GetTableCountInPublications(System.Int32)">
            <summary>
            Returns the number of tables included in the specified publication
            mask.
            </summary><remarks><para>
            The count will not include tables whose names end in _nosync.
            </para><para>
            Note: Publication IDs, masks, and counts may change during a schema
            upgrade.  To correctly identify a publication, access it by name
            or refresh the cached IDs, masks, and counts after a schema
            upgrade.
            </para></remarks>
            <param name="mask">set of publications to check.
            </param>
            <returns>number of tables included in set of publications.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
        </member>
        <member name="F:iAnywhere.UltraLite.DatabaseSchema._conn">
            <summary> Does not have it's own _jniSlot because it is really
            part of a connection and is open when the connection is open
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseSchema.TableCount">
            <summary>The number of tables in the database.
            </summary><remarks><para>
            Table IDs range from 1 to <c>TableCount</c>, inclusively.
            TableCount has the value 0 if the connection is not open.
            </para><para>
            Note: Table IDs and counts may change during a schema upgrade.  To
            correctly identify a table, access it by name or refresh the
            cached IDs and counts after a schema upgrade.
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseSchema.PublicationCount">
            <summary> The number of publications in the database.</summary>
            <remarks><para>
            Publication IDs range from 1 to <c>PublicationCount</c>,
            inclusively.  Publication IDs are not publication masks.  If the
            database is not open then PublicationCount has the value 0.
            </para><para>
            Note: Publication IDs, masks, and counts may change during a schema
            upgrade.  To correctly identify a publication, access it by name
            or refresh the cached IDs, masks, and counts after a schema
            upgrade.
            </para></remarks>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseSchema.GetPublicationName(System.Int32)"/>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseSchema.Signature">
            <summary>The signature of this database.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseSchema.IsOpen">
            <summary> Whether or not the database schema is open.
            </summary>
            <value>True if this database schema is currently open. 
            </value>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseSchema.IsCaseSensitive">
            <summary>
            Checks whether the database is case sensitive.
            </summary>
            <value>true if the database is case sensitive, and false if the
            database is case insensitive.
            </value>
            <remarks>
            Database case sensitivity affects how indexes on tables and
            result sets are sorted.  Case sensitivity also affects how
            <see cref="P:iAnywhere.UltraLite.ConnectionParms.UserID"/> and
            <see cref="P:iAnywhere.UltraLite.ConnectionParms.Password"/> are verified.
            </remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.DatabaseSchema.CollationName">
            <summary>
            The name of the database's collation sequence.
            </summary>
            <remarks>
            The database collation sequence affects how indexes on tables and
            result sets are sorted.
            </remarks>
        </member>
        <member name="T:iAnywhere.UltraLite.IndexSchema">
            <summary> Represents the schema of an UltraLite table index.
            </summary>
            <remarks>
            This class cannot be directly instantiated.  Index schemas are
            created using the <see cref="P:iAnywhere.UltraLite.TableSchema.PrimaryKey"/>,
            <see cref="M:iAnywhere.UltraLite.TableSchema.GetIndex(System.String)"/>, and
            <see cref="M:iAnywhere.UltraLite.TableSchema.GetOptimalIndex(System.String)"/> methods of the
            <see cref="T:iAnywhere.UltraLite.TableSchema"/> class.
            </remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.IndexSchema.#ctor">
            <summary> Constructor.  Public to package only (should only
            be called by TableSchema.GetIndex(), TableSchema.GetPrimaryKey()
            and TableSchema.GetOptimalIndex()).
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.IndexSchema.open(iAnywhere.UltraLite.Connection,System.Int32)">
            <summary>
            Opens this schema instance for use.  Public to package only (should
            only be called by TableSchema.GetIndex(), TableSchema.GetPrimaryKey()
            and TableSchema.GetOptimalIndex()).  Assumes indexSlot >= 0.
            </summary>
            <param name="conn">Connection that opened the table index schema
            </param>
            <param name="indexSlot">jni slot for key of index schema
            </param>
        </member>
        <member name="M:iAnywhere.UltraLite.IndexSchema.GetColumnName(System.Int16)">
            <summary>
            Returns the name of the <paramref name="colIDInIndex"/>'th column
            in this index.
            </summary><remarks>
            Column IDs and count may change during a schema upgrade.
            Column IDs from an index are different than the column IDs in a
            table or another index.
            </remarks>
            <param name="colIDInIndex">ID in this index of the column.
            <paramref name="colIDInIndex"/> must be in the range
            <c>[1,<see cref="P:iAnywhere.UltraLite.IndexSchema.ColumnCount"/>]</c>.
            </param>
            <returns>name of the column.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.IndexSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.IndexSchema.IsColumnDescending(System.String)">
            <summary> Checks whether the named column is used
            in descending order by this index.
            </summary>
            <param name="name">name of the column.</param>
            <returns>true if the column is used in descending order, false if
            the column is used in ascending order.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.IndexSchema.ColumnCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.IndexSchema.Finalize">
            <summary>Cleans up the associated native object.</summary>
        </member>
        <member name="M:iAnywhere.UltraLite.IndexSchema.GetNativeKey">
            <summary>
            Help function to get the native key associated with this schema.
            </summary>
            <returns>The key</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">If schema is closed.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.Name">
            <summary> The name of this index.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.ColumnCount">
            <summary>
            The number of columns in this index.
            </summary><remarks><para>
            Column IDs in indexes range from 1 to <c>ColumnCount</c>,
            inclusively.
            </para><para>
            Column IDs and count may change during a schema upgrade.
            Column IDs from an index are different than the column IDs in a
            table or another index.
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.ReferencedIndexName">
            <summary>
            The name of the referenced primary index if this index is a
            foreign key.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.ReferencedTableName">
            <summary>
            The name of the referenced primary table if index is a foreign
            key.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsUniqueIndex">
            <summary> Checks whether the index is unique.
            </summary><remarks>
            Columns in a unique index may be null.
            </remarks>
            <value>true if index is unique, false if index is not unique.
            </value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsUniqueKey">
            <summary>Checks whether the index is a unique key.
            </summary><remarks>
            Columns in a unique key may not be null.
            </remarks>
            <value>true if index is a unique key, false if index is not a
            unique key.
            </value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsPrimaryKey">
            <summary> Checks whether the index is the primary key.
            </summary><remarks>
            Columns in the primary key may not be null.
            </remarks>
            <value>true if index is the primary key, false if index is not
            the primary key.
            </value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsForeignKey">
            <summary> Checks whether the index is a foreign key.
            </summary><remarks>
            Columns in a foreign key may reference a non-null unique index of
            another table.
            </remarks>
            <value>true if index is the foreign key, false if index is not
            the foreign key.
            </value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsForeignKeyNullable">
            <summary>Checks whether this foreign key is nullable.
            </summary>
            <value>true if this foreign key is nullable,
            false if this foreign key is not nullable.</value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.IndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsForeignKeyCheckOnCommit">
            <summary>
            Checks whether referential integrity for this foreign key is
            performed on commits or on inserts and updates.
            </summary>
            <value>true if referential integrity is checked on commits,
            false if it is checked on inserts and updates.</value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.IndexSchema.IsForeignKey"/>
        </member>
        <member name="P:iAnywhere.UltraLite.IndexSchema.IsOpen">
            <summary> Determines whether the index schema is open or closed.
            </summary>
            <value>true if the index schema is open, otherwise closed.
            </value>
        </member>
        <member name="T:iAnywhere.UltraLite.Messages">
            <summary>
            Represents the keys for localized messages from UltraLite.NET.
            The actual message strings are contained in
            iAynwhere.UltraLite.Message.resources
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.PublicationSchema">
            <summary>Represents the schema of an UltraLite publication.
            </summary><remarks><para>
            This class cannot be directly instantiated.  Publication schemas are
            created using the <see cref="M:iAnywhere.UltraLite.DatabaseSchema.GetPublicationSchema(System.String)"/>
            method of the <see cref="T:iAnywhere.UltraLite.DatabaseSchema"/> class.
            </para><para>
            UltraLite methods requiring a publication mask actually require a set
            of publications to check.  A set is formed by or'ing the publication
            masks of individual publications.  For example:
            <code>pub1.Mask | pub2.Mask</code>
            Two special mask values are also provided by this class.
            <see cref="F:iAnywhere.UltraLite.PublicationSchema.SYNC_ALL_DB"/> corresponds to the entire
            database. <see cref="F:iAnywhere.UltraLite.PublicationSchema.SYNC_ALL_PUBS"/> corresponds
            to all publications.
            </para><para>
            Note: Publication masks may change during a schema upgrade.  To
            correctly identify a publication, access it by name or refresh the
            cached masks after a schema upgrade.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.PublicationSchema.Mask"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GetLastDownloadTime(System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.CountUploadRows(System.Int32,System.UInt32)"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.Schema"/>
        </member>
        <member name="F:iAnywhere.UltraLite.PublicationSchema.SYNC_ALL_DB">
            <summary> Publication mask corresponding to the entire database.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.PublicationSchema.SYNC_ALL_PUBS">
            <summary> Publication mask corresponding to all publications.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.PublicationSchema.#ctor(iAnywhere.UltraLite.Connection,System.String)">
            <summary> Constructor.  Public to package only (should only be
            called by DatabaseSchema.GetPublicationSchema).
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.PublicationSchema.Name">
            <summary> The name of this publication.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            PUBLICATION_NOT_FOUND is issued if a schema upgrade has deleted or
            renamed this publication.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.PublicationSchema.Mask">
            <summary>The publication mask of this publication.
            </summary><remarks>
            Publication IDs, masks, and counts may change during a schema
            upgrade.  To correctly identify a publication, access it by name
            or refresh the cached masks, and counts after a schema upgrade.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">If a SQL error exception occurs.
            PUBLICATION_NOT_FOUND is issued if a schema upgrade has deleted
            or renamed this publication.
            </exception>
        </member>
        <member name="P:iAnywhere.UltraLite.PublicationSchema.IsOpen">
            <summary> Determines whether the publication schema is open or closed.
            </summary>
            <value>True if the publication schema is open, otherwise closed.
            </value>
        </member>
        <member name="T:iAnywhere.UltraLite.PreparedStatement">
            <summary><para>
            Represents a pre-compiled SQL statement with or without IN parameters.
            </para></summary>
            <remarks><para>
            This class cannot be directly instantiated.  Prepared statements are
            created using the <see cref="M:iAnywhere.UltraLite.Connection.PrepareStatement(System.String)"/> method
            of the <see cref="T:iAnywhere.UltraLite.Connection"/> class.
            This object can then be used to efficiently execute this statement
            multiple times.
            </para><para>
            When a prepared statement is closed, all ResultSet and ResultSetSchema
            objects associated with it are also closed.  PreparedStatement objects
            are closed when they are garbage collected.  However, since all
            ResultSet and ResultSetSchema objects reference their prepared
            statement, the prepared statement will not be garbage collected until
            all its open ResultSet and ResultSetSchema objects are ready for
            garbage collection.
            </para><para>
            For resource management reasons, it is recommended that you explicitly
            close prepared statements when you are done with them.
            </para>
            </remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.#ctor(iAnywhere.UltraLite.Connection,System.Int32,System.String)">
            <summary>Constructor.  Public to package only (should only be
            called by Connection.prepareStatement()).
            </summary>
            <param name="conn">Connection to open the statement with</param>
            <param name="slot">slot for key of prepared statement
            <param name="sql">sql statement associated with this PreparedStatement</param>
            </param>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.Close">
            <summary>
            Closes the prepared statement.
            </summary><remarks>
            When a prepared statement is closed, all ResultSet and
            ResultSetSchema objects associated with it are also closed.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.ExecuteQuery">
            <summary>
            Executes a SQL SELECT statement and returns the result set.
            </summary>
            <returns>the resulting set of rows from the statement.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.PreparedStatement.HasResultSet"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.ExecuteStatement"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.ExecuteStatement">
            <summary>
            Executes a statement that does not return a result set, such as a
            SQL INSERT, DELETE, or UPDATE statement.
            </summary>
            <remarks>
            If <see cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/> is true, the statement
            will be
            committed only if one or more rows are affected by the statement.
            </remarks>
            <returns>number of rows affected by the statement.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.PreparedStatement.HasResultSet"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.ExecuteQuery"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)">
            <summary>
            Sets the value for the specified parameter using a
            <see cref="T:System.String"/>.
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the new value for the parameter</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)">
            <summary>
            Sets the value for the specified parameter using a
            UUID (<see cref="T:System.Guid"/>).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GetNewUUID"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)">
            <summary> Sets the value for the specified parameter using an
            <see cref="T:System.Int16"/> (<b>short</b> in C#, <b>Short</b> in
            Visual Basic).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)">
            <summary> Sets the value for the specified parameter using an
            <see cref="T:System.Int32"/> (<b>long</b> in C#, <b>Long</b> in Visual
            Basic).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)">
            <summary>Sets the value for the specified parameter using an <see cref="T:System.Int64"/>.
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.UInt64"/> (<b>ulong</b> in C#).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.UInt32"/> (<b>uint</b> in C#).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.UInt16"/> (<b>ushort</b> in C#).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.Single"/> (<b>float</b> in C#).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.Double"/> (<b>double</b> in C#).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.Boolean"/> (<b>bool</b> in C#).
            </summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.DateTime"/> (<b>Date</b> in Visual Basic).
            </summary><remarks>
            The set value is accurate to the millisecond.
            </remarks>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)">
            <summary> Sets the value for the specified parameter using a
            <see cref="T:System.TimeSpan"/>.
            </summary><remarks>
            The set value is accurate to the millisecond
            and is normalized to a nonnegative value between 0 and 24 hours.
            </remarks>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])">
            <summary>
            Sets the value for the specified parameter using an array of
            <see cref="T:System.Byte"/>s
            (<b>byte[]</b> in C#, <b>Byte()</b> in Visual Basic).
            </summary><remarks><para>
            Suitable for parameters of type <see cref="F:iAnywhere.UltraLite.SQLType.BINARY"/> or
            <see cref="F:iAnywhere.UltraLite.SQLType.LONGBINARY"/> only.
            </para></remarks>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <param name="val">the new value for the parameter.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends the specified subset of the specified array of
            <see cref="T:System.Byte"/>s (<b>byte[]</b> in C#,
            <b>Byte()</b> in Visual Basic)
            to the new value for the specified <see cref="F:iAnywhere.UltraLite.SQLType.LONGBINARY"/>
            parameter.</summary><remarks><para>
            The bytes at position <paramref name="srcOffset"/> (starting from
            0) through
            <c><paramref name="srcOffset"/>+<paramref name="count"/>-1</c>
            of the array <paramref name="val"/> are
            appended to the value for the specified parameter.
            </para><para>
            When specifying parameters, the first append to a parameter after
            an execute clears the
            current value before appending the new value.
            </para><para>
            If any of the following are true, a <see cref="T:iAnywhere.UltraLite.SQLException"/>
            with code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER"/> is thrown and
            the destination is not modified:
            <list type="bullet">
            <item><paramref name="val"/> is null.</item>
            <item><paramref name="srcOffset"/> is negative.</item>
            <item><paramref name="count"/> is negative.</item>
            <item><c><paramref name="srcOffset"/>+<paramref name="count"/></c>
            is greater than <c><paramref name="val"/>.Length</c>.</item>
            </list>
            For other errors, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with the
            appropriate error code is thrown.
            </para></remarks>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the value to append to the current new value
            for the parameter.</param>
            <param name="srcOffset">start position in the source array.</param>
            <param name="count">the number of bytes to be copied.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.AppendCharsParameter(System.Int16,System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the specified subset of the specified array of
            <see cref="T:System.Char"/>s (<b>char[]</b> in C#,
            <b>Char()</b> in Visual Basic)
            to the new value for the specified
            <see cref="F:iAnywhere.UltraLite.SQLType.LONGVARCHAR"/> parameter.
            </summary><remarks><para>
            The characters at position <paramref name="srcOffset"/> (starting
            from 0) through
            <c><paramref name="srcOffset"/>+<paramref name="count"/>-1</c> of
            the array <paramref name="val"/> are appended to the value for
            the specified parameter.
            </para><para>
            When specifying parameters, the first append to a parameter after
            an execute clears the
            current value before appending the new value.
            </para><para>
            If any of the following are true, a <see cref="T:iAnywhere.UltraLite.SQLException"/>
            with code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER"/> is thrown
            and the destination is not modified:
            <list type="bullet">
            <item><paramref name="val"/> is null.</item>
            <item><paramref name="srcOffset"/> is negative.</item>
            <item><paramref name="count"/> is negative.</item>
            <item><c><paramref name="srcOffset"/>+<paramref name="count"/></c>
            is greater than <c><paramref name="value"/>.Length</c>.</item>
            </list>
            For other errors, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with the
            appropriate error code is thrown.
            </para></remarks>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.</param>
            <param name="val">the value to append to the current value
            for the parameter.</param>
            <param name="srcOffset">start position in the source array.</param>
            <param name="count">the number of bytes to be copied.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.AppendBytesParameter(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBytesParameter(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.SetNullParameter(System.Int16)">
            <summary> Sets a parameter to <c>NULL</c>.</summary>
            <param name="parameterID">the ID number of the parameter.  The first
            parameter in the statement has an ID value of one.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetBoolParameter(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDoubleParameter(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetFloatParameter(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetIntParameter(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetLongParameter(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetShortParameter(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetStringParameter(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetTimeSpanParameter(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetDateTimeParameter(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUIntParameter(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetULongParameter(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUShortParameter(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.SetUUIDParameter(System.Int16,System.Guid)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.PreparedStatement.Finalize">
            <summary>Finalize method</summary>
        </member>
        <member name="P:iAnywhere.UltraLite.PreparedStatement.IsOpen">
            <summary>Checks whether this prepared statement is currently open.
            </summary>
            <returns>True if this prepared statement is currently open, false
            if the prepared statement is closed.
            </returns>
        </member>
        <member name="P:iAnywhere.UltraLite.PreparedStatement.Plan">
            <summary>
            Returns the access plan UltraLite will use to execute a query.
            This property is intended primarily for use during development.
            </summary>
            <returns>text-based description of the query execution plan.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.PreparedStatement.ResultSetSchema">
            <summary>
            Holds the schema describing the result set of this query
            statement.
            </summary>
            <returns>schema of this statement's result set.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.PreparedStatement.HasResultSet"/>
            <seealso cref="M:iAnywhere.UltraLite.PreparedStatement.ExecuteQuery"/>
        </member>
        <member name="P:iAnywhere.UltraLite.PreparedStatement.HasResultSet">
            <summary>
            Indicates whether the prepared statement generates a result set
            or not.
            </summary>
            <remarks>
            True if a result set is generated when this statement
            is executed, false if no result set is generated.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="T:iAnywhere.UltraLite.ResultSet">
            <summary> Represents a result set in an UltraLite database.
            Created at runtime using <see cref="M:iAnywhere.UltraLite.PreparedStatement.ExecuteQuery"/>.
            </summary>
            <remarks><para>
            This class cannot be directly instantiated.  Result sets are
            created using the <see cref="M:iAnywhere.UltraLite.PreparedStatement.ExecuteQuery"/>
            method of the <see cref="T:iAnywhere.UltraLite.PreparedStatement"/> class.
            </para><para>
            A result set is only valid while the prepared statement is
            open.
            </para></remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.ResultSet.#ctor(iAnywhere.UltraLite.Connection,System.Int32,iAnywhere.UltraLite.ResultSetSchema,iAnywhere.UltraLite.PreparedStatement)">
            <summary> Constructor.  (should only be called by
            PreparedStatement.ExecuteQuery()).  Assumes rsSlot >= 0.
            </summary>
            <param name="conn">Connection to open the table with</param>
            <param name="rsSlot">slot for key of result set</param>
            <param name="rss">schema of result set</param>
            <param name="ps">prepared statement to keep alive</param>
        </member>
        <member name="M:iAnywhere.UltraLite.ResultSet.Close">
            <summary>
            Closes the result set.
            </summary><remarks>
            It is not an error to close a result set that is already closed.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.ResultSet.Finalize">
            <summary>Finalize method</summary>
        </member>
        <member name="P:iAnywhere.UltraLite.ResultSet.Schema">
            <summary> Holds the schema of this result set.
            This property is only valid while its prepared statement is open.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.ResultSetSchema"/>
        </member>
        <member name="T:iAnywhere.UltraLite.ResultSetSchema">
            <summary> Represents the schema of an UltraLite result set.
            </summary>
            <remarks><para>
            This class cannot be directly instantiated.  A
            <see cref="T:iAnywhere.UltraLite.ResultSetSchema"/> object is attached to a result set as
            its <see cref="P:iAnywhere.UltraLite.ResultSet.Schema"/> property.  A result set schema is
            also attached to a prepared statement as its
            <see cref="P:iAnywhere.UltraLite.PreparedStatement.ResultSetSchema"/> property if the
            prepared statement represents a query (when the prepared statement's
            <see cref="P:iAnywhere.UltraLite.PreparedStatement.HasResultSet"/> property is true).
            </para><para>
            A result set schema is only valid while the prepared statement is
            open.
            </para></remarks>
            <seealso cref="T:iAnywhere.UltraLite.PreparedStatement"/>
            <seealso cref="T:iAnywhere.UltraLite.ResultSet"/>
        </member>
        <member name="M:iAnywhere.UltraLite.ResultSetSchema.#ctor">
            <summary> Constructor.
            Constructor.  Public to package only (should only be called by
            ResultSet.schema = new ResultSetSchema() or
            PreparedStatement.getResultSetSchema()).
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.ResultSetSchema.Open(iAnywhere.UltraLite.Connection,System.Int32,System.String)">
            <summary>
            Opens this schema instance for use.  Public to package only.
            Assumes cursorSchemaSlot >= 0.
            </summary>
            <param name="conn">Connection that opened the cursor schema</param>
            <param name="cursorSchemaSlot">jni slot for key of cursor schema</param>
            <param name="sqlStatement">sql statement that generated this ResultSetSchema</param>
        </member>
        <member name="M:iAnywhere.UltraLite.ResultSetSchema.Finalize">
            <summary> Destructor which cleans up the associated native object.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.ResultSetSchema.Name">
            <summary> The name of this cursor.
            </summary>
            <returns>Sql statement that generated this ResultSetSchema.</returns>
        </member>
        <member name="T:iAnywhere.UltraLite.SchemaParms">
            <summary>Specifies the schema for an UltraLite database.
            </summary><remarks><para>
            Each instance contains platform-specific and generic paths to a schema
            file.  Only one file value is used with the platform-specific keyword
            taking precedence over the generic keyword.  For example, with
            <c>schemaParms.SchemaOnCE="\\s1.usm";</c> and
            <c>schemaParms.SchemaOnDesktop="s2.usm";</c>, the path <c>\s1.usm</c>
            would be used
            on Windows CE while <c>s2.usm</c> would be used on other platforms.
            </para><para>
            After an instance is passed to an UltraLite method, the property
            <c>ParmsUsed</c>
            returns the parameters actually used by the UltraLite method.
            </para><para>
            The recommended extension for UltraLite schema files is <b>.usm</b>.
            You must escape any backslash characters in paths.
            </para></remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.SchemaParms.#ctor">
            <summary>
            Initializes a SchemaParms instance with its default values.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.SchemaParms.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a SchemaParms instance with the specified values.
            </summary>
            <param name="schemaOnCE">value for <see cref="P:iAnywhere.UltraLite.SchemaParms.SchemaOnCE"/>.
            </param>
            <param name="schemaOnDesktop">value for <see cref="P:iAnywhere.UltraLite.SchemaParms.SchemaOnDesktop"/>.
            </param>
            <param name="additionalParms">value for <see cref="P:iAnywhere.UltraLite.SchemaParms.AdditionalParms"/>.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.SchemaParms.ToString">
            <summary>Returns the string representation of this instance.
            </summary>
            <returns>
            string representation of this instance.
            </returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SchemaParms.Finalize">
            <summary>
            Cleans up the associated native object.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaParms.SchemaOnCE">
            <summary>
            Specifies the path and filename of the UltraLite schema on Windows
            CE.</summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaParms.SchemaOnDesktop">
            <summary>
            Specifies the path and filename of the UltraLite schema on Windows
            desktop platforms.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaParms.AdditionalParms">
            <summary>
            Specifies additional parameters as a semicolon-separated list of
            <i>name</i>=<i>value</i> pairs.  This is reserved for future use.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaParms.ParmsUsed">
            <summary>
            Returns the parameters actually used by the last
            <c>DatabaseSchema</c> method to use this instance.
            </summary>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseSchema.ApplyFile(iAnywhere.UltraLite.SchemaParms,iAnywhere.UltraLite.SchemaUpgradeListener)"/>
        </member>
        <member name="T:iAnywhere.UltraLite.SchemaUpgradeData">
            <summary>Returns schema upgrade monitoring data.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.SchemaUpgradeListener"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SchemaUpgradeData.#ctor(iAnywhere.UltraLite.SchemaUpgradeState,System.Int64,System.Int64,System.Int64)">
            <summary> Constructs a SchemaUpgradeData object with the specified
            progress information.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaUpgradeData.State">
            <summary>The current schema upgrade state.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.SchemaUpgradeState"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaUpgradeData.ProgressCounter">
            <summary>The schema upgrade progress counter.  This number is an
            approximation of the progess so far.
            </summary>
            <returns>
            schema upgrade progress counter as a number between 0 and
            <see cref="P:iAnywhere.UltraLite.SchemaUpgradeData.FinalProgressCount"/>.
            </returns>
            <seealso cref="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_UPGRADING"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaUpgradeData.FinalProgressCount">
            <summary>Estimate of the final progress count.
            </summary>
            <returns>estimated final progress count.
            </returns>
            <seealso cref="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_UPGRADING"/>
            <seealso cref="P:iAnywhere.UltraLite.SchemaUpgradeData.ProgressCounter"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SchemaUpgradeData.UpgradeOperations">
            <summary>
            Number of schema upgrade operations performed.
            </summary>
            <remarks>
            This number is an approximation of the amount of work done during
            the schema upgrade.  This number starts at zero and increases as
            the update proceeds.  This number is updated more frequently than
            the progress counter and can be used as a relative measure to
            compare against other schema upgrades.
            </remarks>
            <seealso cref="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_UPGRADING"/>
        </member>
        <member name="T:iAnywhere.UltraLite.SchemaUpgradeState">
            <summary>
            Enumerates all the states that can occur while upgrading a schema.
            </summary>
            <remarks>
            <b>STATE_STARTING</b> is the only state during which the upgrade may be
            cancelled.  If the upgrade is cancelled, you will receive a second
            event with state <b>STATE_ERROR</b>.
            </remarks>
            <seealso cref="P:iAnywhere.UltraLite.SchemaUpgradeData.State"/>
            <seealso cref="P:iAnywhere.UltraLite.SchemaUpgradeData.ProgressCounter"/>
            <seealso cref="P:iAnywhere.UltraLite.SchemaUpgradeData.FinalProgressCount"/>
            <seealso cref="P:iAnywhere.UltraLite.SchemaUpgradeData.UpgradeOperations"/>
        </member>
        <member name="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_STARTING">
            <summary><para>The schema upgrade is starting.
            </para><para>
            This is the only state during which the upgrade may be cancelled.
            If the upgrade is cancelled, you will receive a second event with
            state <b>STATE_ABORT</b>.
            </para></summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_UPGRADING">
            <summary>The schema upgrade is in progress.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_ABORT">
            <summary>The schema upgrade has been aborted and the old database
            is preserved.  This state may occur as the result of a
            recoverable error or user abort.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_ERROR">
            <summary>A critial error occured and the database is unusable.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_DONE">
            <summary>The schema upgrade completed successfully.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_LAST">
            <summary>Internally used state not sent to
            <see cref="M:iAnywhere.UltraLite.SchemaUpgradeListener.SchemaUpgrading(iAnywhere.UltraLite.SchemaUpgradeData)"/>.
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.SchemaUpgradeListener">
            <summary>
            The listener interface for receiving schema upgrade progress events.
            </summary>
            <seealso cref="M:iAnywhere.UltraLite.DatabaseSchema.ApplyFile(iAnywhere.UltraLite.SchemaParms,iAnywhere.UltraLite.SchemaUpgradeListener)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SchemaUpgradeListener.SchemaUpgrading(iAnywhere.UltraLite.SchemaUpgradeData)">
            <summary>
            Invoked during schema upgrade to inform the user of progress.
            When the state is <see cref="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_STARTING"/>,
            this method should return true to cancel the schema upgrade or
            return false to continue.  For other states, this method's return
            value is ignored.
            </summary><remarks>
            No UltraLite.NET API methods should be invoked during a
            <c>SchemaUpgrading</c> call.
            </remarks>
            <param name="data">object containing the latest schema upgrade
            progress data.
            </param>
            <returns>
            This method should return false to continue or true to cancel the
            schema upgrade (state must be
            <see cref="F:iAnywhere.UltraLite.SchemaUpgradeState.STATE_STARTING"/> to cancel).
            </returns>
        </member>
        <member name="T:iAnywhere.UltraLite.ServerSyncListener">
            <summary> The listener interface for receiving server synchronization
            messages.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.ServerSyncListener.ServerSyncInvoked(System.String)">
            <summary>
            Invoked when the MobiLink Listener for server-initiated
            synchronizations calls the
            application to perform synchronization.
            </summary>
            <remarks>
            This method is invoked by a separate thread.  To avoid
            multi-threading issues, it should post an event to the UI.  If
            you are using multi-threading, it is recommended that you use a
            separate connection and use the <c>lock</c> keyword to access
            any objects shared with the rest of the application.
            </remarks>
            <example>
            The following code fragments demonstrate how to receive a
            server synchronization request and perform a synchronization
            in the UI thread. <code>
            [Visual Basic]
            Imports iAnywhere.UltraLite
               
            Public Class MainWindow
              Inherits System.Windows.Forms.Form
              Implements ServerSyncListener
              Private dbMgr As DatabaseManager
              Private conn As Connection
            
              Public Sub New(ByVal args() As String)
            
                MyBase.New()
            
                'This call is required by the Windows Form Designer.
                InitializeComponent()
            
                'Add any initialization after the InitializeComponent() call
                dbMgr = New DatabaseManager
                dbMgr.SetServerSyncListener( "myCompany.mymsg", "myCompany.myapp", Me )
                'Create Connection
                ...
              End Sub
            
              Protected Overrides Sub OnClosing(ByVal e As System.ComponentModel.CancelEventArgs)
                If Not (dbMgr Is Nothing) Then
                  dbMgr.SetServerSyncListener(Nothing, Nothing, Nothing)
                  dbMgr = Nothing
                End If
              End Sub
            
              Public Sub ServerSyncInvoked(ByVal messageName As String) Implements iAnywhere.UltraLite.ServerSyncListener.ServerSyncInvoked
                Me.Invoke(New EventHandler(AddressOf Me.ServerSyncAction))
              End Sub
            
              Public Sub ServerSyncAction(ByVal sender As Object, ByVal e As EventArgs)
                ' Do Server sync
                conn.Synchronize()
              End Sub
            End Class
            
            [C#]
            using iAnywhere.UltraLite;
            public class Form1 : System.Windows.Forms.Form, ServerSyncListener
            {
              private System.Windows.Forms.MainMenu mainMenu1;
              private DatabaseManager dbMgr;
              private Connection conn;
            
              public Form1()
              {
                //
                // Required for Windows Form Designer support
                //
                InitializeComponent();
            
                //
                // TODO: Add any constructor code after InitializeComponent call
                //
                dbMgr = new DatabaseManager();
                dbMgr.SetServerSyncListener( "myCompnay.mymsg", "myCompany.myapp", this );
                // Create connection
                ...
              }
            
              protected override void Dispose( bool disposing )
              {
                base.Dispose( disposing );
              }
            
              protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
              {
                if( dbMgr != null ) {
                  dbMgr.SetServerSyncListener( null, null, null );
                  dbMgr = null;
                }
                base.OnClosing (e);
              }
            
              public void ServerSyncInvoked( string messageName )
              {
                this.Invoke( new EventHandler( ServerSyncHandler ) );
              }
            
              internal void ServerSyncHandler(object sender, EventArgs e)
              {
                conn.Synchronize();
              }
            }
            </code></example>
            <param name="messageName">name of the message sent to the
            application.
            </param>
        </member>
        <member name="T:iAnywhere.UltraLite.SQLException">
            <summary>
            Represents a SQL error returned by the UltraLite database.
            </summary>
            <remarks>This class is not serializable under the .NET Compact
            Framework.</remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.SQLException.#ctor(iAnywhere.UltraLite.SQLCode,System.String,System.String,System.String)">
            <summary>
            Creates a SQLException with the given error code.
            </summary>
            <remarks>
            The message string corresponding to the specified
            <see cref="T:iAnywhere.UltraLite.SQLCode"/> is retrieved from the
            <b>iAnywhere.UltraLite.resources</b> assembly.   Resources are
            searched for, by culture, using the following order:
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>, then
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, and finally culture
            "EN".
            </remarks>
            <param name="code">the code of the exception.</param>
            <param name="s1">first string for formatted message.</param>
            <param name="s2">second string for formatted message.</param>
            <param name="s3">third string for formatted message.</param>
        </member>
        <member name="M:iAnywhere.UltraLite.SQLException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serializes
            this SQLException.
            </summary>
            <remarks>This method is not supported under the .NET Compact
            Framework.</remarks>
            <param name="info">the SerializationInfo to populate with data.
            </param>
            <param name="context">the destination for this serialization.
            </param>
        </member>
        <member name="M:iAnywhere.UltraLite.SQLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Private serialization constructor</summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SQLException.ErrorCode">
            <summary>
            The SQL code returned by the database.
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.SQLType">
            <summary>
            Enumerates the available UltraLite SQL
            database types used as table column types.
            </summary><remarks><para>
            The table below lists which .NET types are compatible with each
            SQL type.  In the case of integral types, table columns can always be
            set using smaller integer types and can be set using larger types as
            long as the actual value is within the range of the SQL type.
            For example:
            <code>
            [Visual Basic]
            Dim t as iAnywhere.UltraLite.Table
            Dim s as Short
            ...
            ' Column 1 is of type S_LONG (Equivalent to a .NET 'System.Int32')
            t.SetShort( 1, s )  ' will succeed for all values in s
            t.SetLong( 1, 10 )  ' (long)10 is ok
            t.SetLong( 1, Int32.MaxValue + 1 )  ' throws SQLException
            
            ' Column 2 is of type U_SHORT
            Dim i as Integer = t.GetInt( 2 )  ' will succeed for all column values
            t.SetInt( 2, 0x0ffff )  ' largest valid 'int' column can be set with
            t.SetInt( 2, -1 )  ' SQLException
            
            [C#]
            Table t;
            short s;
            ...
            // Column 1 is of type S_LONG (Equivalent to a .NET 'System.Int32')
            t.SetShort( 1, s );  // will succeed for all values in s
            t.SetLong( 1, 10 );  // (long)10 is ok
            t.SetLong( 1, Int32.MaxValue + 1 );  // throws SQLException
            
            // Column 2 is of type U_SHORT
            int i = t.GetInt( 2 );  // will succeed for all column values
            t.SetInt( 2, 0x0ffff );  // largest valid 'int' column can be set with
            t.SetInt( 2, -1 );  // SQLException
            </code>
            <list type="table">
            <listheader><term>SQL Type</term><term>Compatible .NET Type</term>
            	<term>C# Built-in Type</term>	<term>Visual Basic Built-in Type</term></listheader>
            <item><term>BINARY</term>	<term>System.<see cref="T:System.Byte"/>[], or System.<see cref="T:System.Guid"/> if size is 16</term>
            	<term>byte[]</term>		<term>Byte()</term></item>
            <item><term>BIT</term>		<term>System.<see cref="T:System.Boolean"/></term>
            	<term>bool</term>		<term>Boolean</term></item>
            <item><term>CHAR</term>		<term>System.<see cref="T:System.String"/></term>
            	<term>String</term>		<term>String</term></item>
            <item><term>DATE</term>		<term>System.<see cref="T:System.DateTime"/></term>
            	<term>DateTime No built-in type.</term>	<term>Date</term></item>
            <item><term>DOUBLE</term>	<term>System.<see cref="T:System.Double"/></term>
            	<term>double</term>		<term>Double</term></item>
            <item><term>LONGBINARY</term>	<term>System.<see cref="T:System.Byte"/>[]</term>
            	<term>byte[]</term>		<term>Byte()</term></item>
            <item><term>LONGVARCHAR</term>  <term>System.<see cref="T:System.String"/></term>
            	<term>String</term>		<term>String</term></item>
            <item><term>NUMERIC</term>	<term>System.<see cref="T:System.String"/></term>
            	<term>String</term>		<term>String</term></item>
            <item><term>REAL</term>		<term>System.<see cref="T:System.Single"/></term>
            	<term>float</term>		<term>Single</term></item>
            <item><term>S_BIG</term>	<term>System.<see cref="T:System.Int64"/></term>
            	<term>long</term>		<term>Long</term></item>
            <item><term>S_LONG</term>	<term>System.<see cref="T:System.Int32"/></term>
            	<term>int</term>		<term>Integer</term></item>
            <item><term>S_SHORT</term>	<term>System.<see cref="T:System.Int16"/></term>
            	<term>short</term>		<term>Short</term></item>
            <item><term>TIME</term>		<term>System.<see cref="T:System.TimeSpan"/></term>
            	<term>TimeSpan No built-in type.</term>	<term>TimeSpan No built-in type.</term></item>
            <item><term>TIMESTAMP</term>	<term>System.<see cref="T:System.DateTime"/></term>
            	<term>DateTime No built-in type.</term>	<term>Date</term></item>
            <item><term>TINY</term>		<term>System.<see cref="T:System.Byte"/></term>
            	<term>byte</term>		<term>Byte</term></item>
            <item><term>U_BIG</term>	<term>System.<see cref="T:System.UInt64"/></term>
            	<term>ulong</term>			<term>UInt64 No built-in type.</term></item>
            <item><term>U_LONG</term>	<term>System.<see cref="T:System.UInt32"/></term>
            	<term>uint</term>			<term>UInt32 No built-in type.</term></item>
            <item><term>U_SHORT</term>	<term>System.<see cref="T:System.UInt16"/></term>
            	<term>ushort</term>			<term>UInt16 No built-in type.</term></item>
            <item><term>UUID</term> 	<term>System.<see cref="T:System.Guid"/></term>
            	<term>Guid No built-in type.</term>		<term>Guid No built-in type.</term></item>
            </list>
            </para><para>
            BINARY columns of length 16 are sometimes referred to as UUID columns.
            </para></remarks>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.BAD_INDEX">
            <summary>
            Column type returned if bad column indentifier is passed to
            <see cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.S_LONG">
            <summary> Signed 32-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.U_LONG">
            <summary> Unsigned 32-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.S_SHORT">
            <summary> Signed 16-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.U_SHORT">
            <summary> Unsigned 16-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.S_BIG">
            <summary> Signed 64-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.U_BIG">
            <summary> Unsigned 64-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.TINY">
            <summary> Unsigned 8-bit integer.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.BIT">
            <summary> 1-bit flag.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.TIMESTAMP">
            <summary> Timestamp information (date, time).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.DATE">
            <summary> Date information.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.TIME">
            <summary> Time information.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.DOUBLE">
            <summary> Double precision floating point number (8 bytes).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.REAL">
            <summary> Single precision floating point number (4 bytes).
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.NUMERIC">
            <summary> Exact numerical data, with a specified precision and scale.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.BINARY">
            <summary> Binary data, with a specified length.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.CHAR">
            <summary> Character data, with a specified length.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.LONGVARCHAR">
            <summary> Character data, with variable length.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.LONGBINARY">
            <summary> Binary data, with variable length.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLType.UUID">
            <summary> Universally Unique Identifer.
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.StreamErrorCode">
            <summary>
            Enumerates the error codes that may be reported by streams during
            synchronization.
            </summary>
            <seealso cref="P:iAnywhere.UltraLite.SyncResult.StreamErrorCode"/>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.NONE">
            <summary> NONE(0)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.PARAMETER">
            <summary> PARAMETER(1)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.PARAMETER_NOT_UINT32">
            <summary> PARAMETER_NOT_UINT32(2)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.PARAMETER_NOT_UINT32_RANGE">
            <summary> PARAMETER_NOT_UINT32_RANGE(3)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.PARAMETER_NOT_BOOLEAN">
            <summary> PARAMETER_NOT_BOOLEAN(4)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.PARAMETER_NOT_HEX">
            <summary> PARAMETER_NOT_HEX(5)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.MEMORY_ALLOCATION">
            <summary> MEMORY_ALLOCATION(6)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.PARSE">
            <summary> PARSE(7)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.READ">
            <summary> READ(8)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.WRITE">
            <summary> WRITE(9)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.END_WRITE">
            <summary> END_WRITE(10)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.END_READ">
            <summary> END_READ(11)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.NOT_IMPLEMENTED">
            <summary> NOT_IMPLEMENTED(12)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.WOULD_BLOCK">
            <summary> WOULD_BLOCK(13)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.GENERATE_RANDOM">
            <summary> GENERATE_RANDOM(14)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.INIT_RANDOM">
            <summary> INIT_RANDOM(15)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SEED_RANDOM">
            <summary> SEED_RANDOM(16)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.CREATE_RANDOM_OBJECT">
            <summary> CREATE_RANDOM_OBJECT(17)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SHUTTING_DOWN">
            <summary> SHUTTING_DOWN(18)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.DEQUEUING_CONNECTION">
            <summary> DEQUEUING_CONNECTION(19)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_ROOT">
            <summary> SECURE_CERTIFICATE_ROOT(20)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_COMPANY_NAME">
            <summary> SECURE_CERTIFICATE_COMPANY_NAME(21)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_CHAIN_LENGTH">
            <summary> SECURE_CERTIFICATE_CHAIN_LENGTH(22)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_REF">
            <summary> SECURE_CERTIFICATE_REF(23)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_NOT_TRUSTED">
            <summary> SECURE_CERTIFICATE_NOT_TRUSTED(24)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_DUPLICATE_CONTEXT">
            <summary> SECURE_DUPLICATE_CONTEXT(25)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_IO">
            <summary> SECURE_SET_IO(26)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_IO_SEMANTICS">
            <summary> SECURE_SET_IO_SEMANTICS(27)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_CHAIN_FUNC">
            <summary> SECURE_CERTIFICATE_CHAIN_FUNC(28)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_CHAIN_REF">
            <summary> SECURE_CERTIFICATE_CHAIN_REF(29)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_ENABLE_NON_BLOCKING">
            <summary> SECURE_ENABLE_NON_BLOCKING(30)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_CIPHER_SUITES">
            <summary> SECURE_SET_CIPHER_SUITES(31)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_CHAIN_NUMBER">
            <summary> SECURE_SET_CHAIN_NUMBER(32)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_FILE_NOT_FOUND">
            <summary> SECURE_CERTIFICATE_FILE_NOT_FOUND(33)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_READ_CERTIFICATE">
            <summary> SECURE_READ_CERTIFICATE(34)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_READ_PRIVATE_KEY">
            <summary> SECURE_READ_PRIVATE_KEY(35)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_PRIVATE_KEY">
            <summary> SECURE_SET_PRIVATE_KEY(36)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_EXPIRY_DATE">
            <summary> SECURE_CERTIFICATE_EXPIRY_DATE(37)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_EXPORT_CERTIFICATE">
            <summary> SECURE_EXPORT_CERTIFICATE(38)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_ADD_CERTIFICATE">
            <summary> SECURE_ADD_CERTIFICATE(39)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_TRUSTED_CERTIFICATE_FILE_NOT_FOUND">
            <summary> SECURE_TRUSTED_CERTIFICATE_FILE_NOT_FOUND(40)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_TRUSTED_CERTIFICATE_READ">
            <summary> SECURE_TRUSTED_CERTIFICATE_READ(41)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_COUNT">
            <summary> SECURE_CERTIFICATE_COUNT(42)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CREATE_CERTIFICATE">
            <summary> SECURE_CREATE_CERTIFICATE(43)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_IMPORT_CERTIFICATE">
            <summary> SECURE_IMPORT_CERTIFICATE(44)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_RANDOM_REF">
            <summary> SECURE_SET_RANDOM_REF(45)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_RANDOM_FUNC">
            <summary> SECURE_SET_RANDOM_FUNC(46)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_PROTOCOL_SIDE">
            <summary> SECURE_SET_PROTOCOL_SIDE(47)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_ADD_TRUSTED_CERTIFICATE">
            <summary> SECURE_ADD_TRUSTED_CERTIFICATE(48)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CREATE_PRIVATE_KEY_OBJECT">
            <summary> SECURE_CREATE_PRIVATE_KEY_OBJECT(49)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_EXPIRED">
            <summary> SECURE_CERTIFICATE_EXPIRED(50)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_COMPANY_UNIT">
            <summary> SECURE_CERTIFICATE_COMPANY_UNIT(51)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_CERTIFICATE_COMMON_NAME">
            <summary> SECURE_CERTIFICATE_COMMON_NAME(52)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_HANDSHAKE">
            <summary> SECURE_HANDSHAKE(53)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_VERSION">
            <summary> HTTP_VERSION(54)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_READ_FUNC">
            <summary> SECURE_SET_READ_FUNC(55)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SECURE_SET_WRITE_FUNC">
            <summary> SECURE_SET_WRITE_FUNC(56)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_HOST_NAME_NOT_FOUND">
            <summary> SOCKET_HOST_NAME_NOT_FOUND(57)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_GET_HOST_BY_ADDR">
            <summary> SOCKET_GET_HOST_BY_ADDR(58)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_LOCALHOST_NAME_NOT_FOUND">
            <summary> SOCKET_LOCALHOST_NAME_NOT_FOUND(59)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_CREATE_TCPIP">
            <summary> SOCKET_CREATE_TCPIP(60)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_CREATE_UDP">
            <summary> SOCKET_CREATE_UDP(61)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_BIND">
            <summary> SOCKET_BIND(62)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_CLEANUP">
            <summary> SOCKET_CLEANUP(63)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_CLOSE">
            <summary> SOCKET_CLOSE(64)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_CONNECT">
            <summary> SOCKET_CONNECT(65)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_GET_NAME">
            <summary> SOCKET_GET_NAME(66)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_GET_OPTION">
            <summary> SOCKET_GET_OPTION(67)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_SET_OPTION">
            <summary> SOCKET_SET_OPTION(68)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_LISTEN">
            <summary> SOCKET_LISTEN(69)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_SHUTDOWN">
            <summary> SOCKET_SHUTDOWN(70)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_SELECT">
            <summary> SOCKET_SELECT(71)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_STARTUP">
            <summary> SOCKET_STARTUP(72)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.SOCKET_PORT_OUT_OF_RANGE">
            <summary> SOCKET_PORT_OUT_OF_RANGE(73)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.LOAD_NETWORK_LIBRARY">
            <summary> LOAD_NETWORK_LIBRARY(74)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.ACTSYNC_NO_PORT">
            <summary> ACTSYNC_NO_PORT(75)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.ACTSYNC_NOT_INSTALLED">
            <summary> ACTSYNC_NOT_INSTALLED(76)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_CONTENT_TYPE_NOT_SPECIFIED">
            <summary> HTTP_CONTENT_TYPE_NOT_SPECIFIED(77)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_CLIENT_ID_NOT_SET">
            <summary> HTTP_CLIENT_ID_NOT_SET(78)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_BUFFER_SIZE_OUT_OF_RANGE">
            <summary> HTTP_BUFFER_SIZE_OUT_OF_RANGE(79)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_EXTRA_DATA_END_READ">
            <summary> HTTP_EXTRA_DATA_END_READ(80)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_CRLF_ENCODED_MISSING">
            <summary> HTTP_CRLF_ENCODED_MISSING(81)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_CRLF_MISSING">
            <summary> HTTP_CRLF_MISSING(82)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_NO_CONTD_CONNECTION">
            <summary> HTTP_NO_CONTD_CONNECTION(83)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_CHUNK_LEN_ENCODED_MISSING">
            <summary> HTTP_CHUNK_LEN_ENCODED_MISSING(84)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_CHUNK_LEN_BAD_CHARACTER">
            <summary> HTTP_CHUNK_LEN_BAD_CHARACTER(85)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_BAD_STATUS_CODE">
            <summary> HTTP_BAD_STATUS_CODE(86)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_UNKNOWN_TRANSFER_ENCODING">
            <summary> HTTP_UNKNOWN_TRANSFER_ENCODING(87)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_UNABLE_TO_PARSE_COOKIE">
            <summary> HTTP_UNABLE_TO_PARSE_COOKIE(88)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorCode.HTTP_EXPECTED_POST">
            <summary> HTTP_EXPECTED_POST(89)
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.StreamErrorContext">
            <summary> Enumerates the basic network operation being performed when the stream
            errors occured.
            </summary>
            <seealso cref="P:iAnywhere.UltraLite.SyncResult.StreamErrorContext"/>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.UNKNOWN">
            <summary> UNKNOWN(0)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.REGISTER">
            <summary> REGISTER(1)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.UNREGISTER">
            <summary> UNREGISTER(2)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.CREATE">
            <summary> CREATE(3)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.DESTROY">
            <summary> DESTROY(4)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.OPEN">
            <summary> OPEN(5)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.CLOSE">
            <summary> CLOSE(6)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.READ">
            <summary> READ(7)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.WRITE">
            <summary> WRITE(8)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.WRITE_FLUSH">
            <summary> WRITE_FLUSH(9)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.END_WRITE">
            <summary> END_WRITE(10)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.END_READ">
            <summary> END_READ(11)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.YIELD">
            <summary> YIELD(12)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.SOFTSHUTDOWN">
            <summary> SOFTSHUTDOWN(13)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorContext.GETVALUE">
            <summary> GETVALUE(14)
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.StreamErrorID">
            <summary> Enumerates the network layers that may report errors during
            synchronization.
            </summary>
            <seealso cref="P:iAnywhere.UltraLite.SyncResult.StreamErrorID"/>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.TCPIP">
            <summary> TCPIP(0)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.SERIAL">
            <summary> SERIAL(1)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.FAKE">
            <summary> FAKE(2)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.PALM_CONDUIT">
            <summary> PALM_CONDUIT(3)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.PALM_SS">
            <summary> PALM_SS(4)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.NETTECH">
            <summary> NETTECH(5)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.RIMBB">
            <summary> RIMBB(6)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.HTTP">
            <summary> HTTP(7)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.HTTPS">
            <summary> HTTPS(8)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.DH_CAST">
            <summary> DH_CAST(9)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.SECURE">
            <summary> SECURE(10)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.CERTICOM">
            <summary> CERTICOM(11)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.JAVA_CERTICOM">
            <summary> JAVA_CERTICOM(12)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.CERTICOM_SSL">
            <summary> CERTICOM_SSL(13)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.CERTICOM_TLS">
            <summary> CERTICOM_TLS(14)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.WIRESTRM">
            <summary> WIRESTRM(15)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.WIRELESS">
            <summary> WIRELESS(16)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.REPLAY">
            <summary> REPLAY(17)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.STRM">
            <summary> STRM(18)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.UDP">
            <summary> UDP(19)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.EMAIL">
            <summary> EMAIL(20)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.FILE">
            <summary> FILE(21)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.ACTIVESYNC">
            <summary> ACTIVESYNC(22)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.RSA_TLS">
            <summary> RSA_TLS(23)
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamErrorID.JAVA_RSA">
            <summary> JAVA_RSA(24)
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.StreamType">
            <summary> <para>
            Enumerates the types of MobiLink synchronization streams to use for
            synchronization.
            </para></summary>
            <remarks><para>
            For information on configuring specific stream types, refer to the
            <B>Synchronization Stream Parameters Reference</B> section of the
            <B>UltraLite Database User's Guide</B> online book.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.Stream"/>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamType.UNKNOWN">
            <summary> Unknown or no synchronization stream.  The user has not
            set the stream type.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamType.ACTIVE_SYNC">
            <summary> <para>ActiveSync synchronization (Windows CE only).
            </para><para>
            UltraLite applications should only use ActiveSync synchronization
            when notified to do so by the MobiLink provider for ActiveSync.
            An application can listen for such notification by implementing
            an <see cref="T:iAnywhere.UltraLite.ActiveSyncListener"/> and calling
            <see cref="M:iAnywhere.UltraLite.DatabaseManager.SetActiveSyncListener(System.String,iAnywhere.UltraLite.ActiveSyncListener)"/>.
            </para></summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamType.HTTP">
            <summary> <para>Synchronize via HTTP.
            </para><para>
            The HTTP stream uses TCP/IP as its underlying transport.  UltraLite
            applications act as Web browsers and the MobiLink synchronization
            server acts as a Web server.  UltraLite applications send POST
            requests to send data to the server and GET requests to read data from
            the server.
            </para></summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamType.TCPIP">
            <summary> Synchronize via TCP/IP.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.StreamType.HTTPS">
            <summary><para> 
            Synchronize via HTTPS (HTTP with RSA transport-layer security).
            </para><para>
            Transport-layer security is a separately-licensable component and must
            be ordered before you can install it.  To order this component, see
            the card in your SQL Anywhere Studio package, or see
            <A HREF="http://www.sybase.com/detail?id=1015780">http://www.sybase.com/detail?id=1015780</A>.
            </para></summary>
        </member>
        <member name="T:iAnywhere.UltraLite.SyncParms">
            <summary><para> Represents synchronization parameters that define how
            to synchronize an UltraLite database.
            </para></summary>
            <remarks><para>
            This class cannot be directly instantiated.
            Each connection has its own SyncParms instance, attached as
            its <see cref="P:iAnywhere.UltraLite.Connection.SyncParms"/> property.
            </para><para>
            Only one synchronization command
            (<see cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.PingOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>, or
            <see cref="P:iAnywhere.UltraLite.SyncParms.UploadOnly"/>) may be specified at a time.
            If more than one of these parameters is set to true, a
            <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException will be
            thrown by <see cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>.
            </para><para>
            Other sources of <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID"/> errors
            include not specifying a <see cref="P:iAnywhere.UltraLite.SyncParms.Stream"/> value or a
            <see cref="P:iAnywhere.UltraLite.SyncParms.Version"/> value.
            </para></remarks>
            <seealso cref="T:iAnywhere.UltraLite.Connection"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncParms.CopyFrom(iAnywhere.UltraLite.SyncParms)">
            <summary>
            Copies the properties of the specified <see cref="T:iAnywhere.UltraLite.SyncParms"/>
            object to this <see cref="T:iAnywhere.UltraLite.SyncParms"/> object.
            </summary>
            <param name="src">object to copy from.</param>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncParms.Finalize">
            <summary> Destructor which cleans up the associated JNI state.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.AuthenticationParms">
            <summary>
            Specifies parameters for a custom user authentication script
            (MobiLink authenticate_parameters connection event).
            </summary><remarks><para>
            Specified as an array of strings, each containing an
            authentication parameter (null array entries will result in a
            synchronization error).
            </para><para>
            Only the first 255 strings are used and each string should be no
            longer than 128 characters (longer strings will be truncated when
            sent to MobiLink).
            </para><para>
            The default is no authentication parms.
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.CheckpointStore">
            <summary>
            Specifies whether the client should perform extra store checkpoints to
            control the growth of the database store during synchronization.
            </summary><remarks><para>
            The checkpoint operation adds I/O operations for the application,
            and so slows synchronization.  This option is most useful for
            large downloads with many updates. Devices with slow flash memory
            may not want to pay the performance penalty.
            </para><para>
            The default is false (only required checkpointing is done).
            </para>
            </remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.DisableConcurrency">
            <summary>
            Specifies whether to disable or enable concurrent access to
            UltraLite while performing a synchronization.
            </summary>
            <remarks>
            By default, other threads may perform UltraLite operations while
            a thread is synchronizing.  When concurrent synchronization is
            disabled, other threads will block on UltraLite calls until the
            synchronization has completed.
            </remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.DownloadOnly">
            <summary>
            Specifies whether to disable or enable uploads when synchronizing.
            </summary>
            <remarks><para>
            Only one synchronization command
            (<see cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.PingOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>, or
            <see cref="P:iAnywhere.UltraLite.SyncParms.UploadOnly"/>) may be specified at a time.
            If more than one of these parameters is set to true, a
            <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException will be
            thrown by <see cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>.
            </para><para>
            The default is false.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.UploadOnly"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.KeepPartialDownload">
            <summary>
            Specifies whether to disable or enable partial downloads when
            synchronizing.
            </summary>
            <remarks><para>
            UltraLite.NET has the ability to restart downloads that fail
            because of communication errors or user aborts through the
            SyncProgressListener.  UltraLite.NET processes the download as it
            is received.  If a download is interrupted, then the partial
            download transaction will remain in the database and can be
            resumed during the next synchronization.
            </para><para>
            To indicate that UltraLite.NET should save partial downloads,
            specify <c>connection.SyncParms.KeepPartialDownload=true;</c>
            otherwise the download will be rolled back if an error occurs.
            </para><para>
            If a partial download was kept, then the output field
            <c>connection.SyncResult.<see cref="P:iAnywhere.UltraLite.SyncResult.PartialDownloadRetained"/></c>
            will be set to true when <c>connection.Synchronize()</c>
            exits.
            </para><para>
            If <c>PartialDownloadRetained</c> is set, then you can
            resume a download.  To do this, call
            <c>connection.Synchronize()</c> with
            <c>connection.SyncParms.<see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/></c>
            set to true.  You'll likely still want <c>KeepPartialDownload</c>
            set to true as well in case another communications error occurs.  No
            upload is done if a download is skipped.
            </para><para>
            The download you receive during a resumed download will be
            as old as when the download originally began.  If you need the
            most up to date data, then you can do another download
            immediately after the special resumed download completes.
            </para><para>
            When resuming a download, many of the SyncParms fields are not
            relevant.  For example, the PublicationMask field is not used.
            You will receive the publications that you requested on the
            initial download.  The only fields that need to be set are
            <see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/> and <see cref="P:iAnywhere.UltraLite.SyncParms.UserName"/>.
            The fields <c>KeepPartialDownload</c> and
            <see cref="P:iAnywhere.UltraLite.SyncParms.DisableConcurrency"/> may be set if desired and will
            function as normal.
            </para><para>
            If you have a partial download and it is no longer needed, then
            you can call <see cref="M:iAnywhere.UltraLite.Connection.RollbackPartialDownload"/>
            to roll back the failed download transaction.  Also if you attempt
            to synchronize again and do not specify ResumePartialDownload,
            then the partial download will be rolled back before the next
            synchronization begins.
            </para><para>
            For more information, refer to the <b>Restartable downloads</b>
            section of the <b>MobiLink Synchronization User's Guide</b>.
            </para><para>
            The default is false.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncResult.PartialDownloadRetained"/>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.RollbackPartialDownload"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.NewPassword">
            <summary>
            Specifies a new MobiLink password for the user specified with UserName.
            </summary><remarks><para>
            A new password will take effect after the next synchronization.
            </para><para>
            The default is null (password not replaced).
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.UserName"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.Password">
            <summary>
            The MobiLink password for the user specified by UserName.
            </summary><remarks><para>
            The MobiLink user name and password are separate from any
            database user ID and password, and serve to identify and
            authenticate the application to the MobiLink synchronization
            server.
            </para><para>
            The default is null (no password).
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.NewPassword"/>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.UserName"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.PingOnly">
            <summary>
            Specifies whether the client should only ping the MobiLink
            synchronization server instead of performing a real
            synchronization.
            </summary>
            <remarks><para>
            Only one synchronization command
            (<see cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.PingOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>, or
            <see cref="P:iAnywhere.UltraLite.SyncParms.UploadOnly"/>) may be specified at a time.
            If more than one of these parameters is set to true, a
            <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException will be
            thrown by <see cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>.
            </para><para>
            The default is false.
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.PublicationMask">
            <summary>
            Specifies the publications to be synchronized.
            </summary>
            <remarks>
            The default is <see cref="F:iAnywhere.UltraLite.PublicationSchema.SYNC_ALL_DB"/>.
            </remarks>
            <seealso cref="T:iAnywhere.UltraLite.PublicationSchema"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload">
            <summary>
            Specifies whether to resume or discard a previous partial
            download.
            </summary>
            <remarks><para>
            Only one synchronization command
            (<see cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.PingOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>, or
            <see cref="P:iAnywhere.UltraLite.SyncParms.UploadOnly"/>) may be specified at a time.
            If more than one of these parameters is set to true, a
            <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException will be
            thrown by <see cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>.
            </para><para>
            The default is false.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.KeepPartialDownload"/>
            <seealso cref="P:iAnywhere.UltraLite.SyncResult.PartialDownloadRetained"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.SendColumnNames">
            <summary>
            Specifies whether the client should send column names to the
            MobiLink synchronization server during synchronization.
            </summary><remarks><para>
            This parameter is typically used together with the -za or -ze
            option on the MobiLink synchronization server for automatically
            generating synchronization scripts.
            </para><para>
            The default is false (column names are not sent).
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.SendDownloadAck">
            <summary>
            Specifies whether the client should send a download acknowledgement to
            the MobiLink synchronization server during synchronization.
            </summary><remarks><para>
            If the client does send a download acknowledgement, the MobiLink
            synchronization server worker thread must wait for the client to apply
            the download.  If the client does not sent a download acknowledgement,
            the MobiLink synchronization server is freed up sooner for its next
            synchronization.
            </para><para>
            The default is false (no download acknowledgement is sent).
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.Stream">
            <summary>
            Specifies the MobiLink synchronization stream to use for synchronization.
            </summary><remarks><para>
            Most synchronization streams require parameters to identify the
            MobiLink synchronization server address and control other behavior.
            These parameters are supplied by the
            <see cref="P:iAnywhere.UltraLite.SyncParms.StreamParms"/> property.
            </para><para>
            If the stream type is set to a value that is invalid for the platform,
            the stream type will be set to <see cref="F:iAnywhere.UltraLite.StreamType.UNKNOWN"/>.
            </para><para>
            This parameter has no default value, and must be explicitly set.
            </para></remarks>
            <seealso cref="T:iAnywhere.UltraLite.StreamType"/>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.StreamParms"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.StreamParms">
            <summary>
            Specifies the parameters to configure the synchronization stream.
            </summary><remarks><para>
            For information on configuring specific stream types, refer to the
            <B>Synchronization Stream Parameters Reference</B> section of the
            <B>UltraLite Database User's Guide</B> online book.
            </para><para>
            StreamParms is a string containing all the parameters used for
            synchronization streams.  Parameters are specified as
            a semicolon-separated list of name=value pairs
            (<c>"param1=value1;param2=value2"</c>).
            </para><para>
            The default is null.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.Stream"/>
            <seealso cref="T:iAnywhere.UltraLite.StreamType"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.UploadOnly">
            <summary>
            Specifies whether to disable or enable downloads when synchronizing.
            </summary>
            <remarks><para>
            Only one synchronization command
            (<see cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.PingOnly"/>,
            <see cref="P:iAnywhere.UltraLite.SyncParms.ResumePartialDownload"/>, or
            <see cref="P:iAnywhere.UltraLite.SyncParms.UploadOnly"/>) may be specified at a time.
            If more than one of these parameters is set to true, a
            <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID"/> SQLException will be
            thrown by <see cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>.
            </para><para>
            The default is false.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.UserName">
            <summary>
            The user name that uniquely identifies the MobiLink client to the
            MobiLink synchronization server.
            </summary><remarks><para>
            MobiLink uses this value to determine the download content, to
            record the synchronization state, and to recover from
            interruptions during synchronization.  This user name and
            password are separate from any database user ID and password, and
            serve to identify and authenticate the application to the
            MobiLink synchronization server.
            </para><para>
            This parameter has no default value, and must be explicitly set.
            </para></remarks>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.Password"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncParms.Version">
            <summary> Specifies which synchronization script to use.
            </summary><remarks><para>
            Each synchronization script in the consolidated database is marked
            with a version string. For example, there may be two different
            download_cursor scripts, with each one identified by different a
            version string.  The version string allows an UltraLite application
            to choose from a set of synchronization scripts.
            </para><para>
            This parameter has no default value, and must be explicitly set.
            </para></remarks>
        </member>
        <member name="T:iAnywhere.UltraLite.SyncProgressData">
            <summary> Returns synchronization progress monitoring data.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.SyncProgressListener"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressData.#ctor(iAnywhere.UltraLite.SyncProgressState,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,iAnywhere.UltraLite.SyncParms,iAnywhere.UltraLite.SyncResult,iAnywhere.UltraLite.SQLCode,System.String)">
            <summary> Constructs a SyncProgressData object with the specified
            progress information.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.State">
            <summary>The current synchronization state.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.SyncProgressState"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.TableTotal">
            <summary> The number of tables being synchronized.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_TABLE"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_TABLE"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.TableCount">
            <summary> A count of the tables sent or received (TableCount of
            TableTotal) so far.
            </summary>
            <returns>count of tables sent or received.
            </returns>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_TABLE"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_TABLE"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.TableIndex">
            <summary>
            Index of the table currently being synchronized (tables are numbered 1
            to DatabaseSchema.TableCount).
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_TABLE"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_TABLE"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SentBytes">
            <summary> The number of bytes sent so far.  This information is updated
            for all states.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SentInserts">
            <summary> The number of inserted rows sent so far.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SentUpdates">
            <summary> The number of updated rows sent so far.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SentDeletes">
            <summary> The number of deleted rows sent so far.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_FINISHING_UPLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.ReceivedBytes">
            <summary> The number of bytes received so far.  This information is
            updated for all states.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.ReceivedInserts">
            <summary> The number of inserted rows received so far.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.ReceivedUpdates">
            <summary> The number of updated rows received so far.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.ReceivedDeletes">
            <summary> The number of deleted rows received so far.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_DATA"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_COMMITTING_DOWNLOAD"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SyncResult">
            <summary> Reference to the Connection's SyncResult object.  This object is
            only updated with STATE_DONE and STATE_ERROR events.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_DONE"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_ERROR"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncResult"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SyncParms">
            <summary> Reference to the Connection's SyncParms object.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_DONE"/>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_ERROR"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncParms"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.SQLCode">
            <summary> SQL code for synchronization.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_ERROR"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressData.ErrorMessage">
            <summary> Error message describing the error that occured
            during synchronization.
            </summary>
            <seealso cref="F:iAnywhere.UltraLite.SyncProgressState.STATE_ERROR"/>
        </member>
        <member name="T:iAnywhere.UltraLite.SyncProgressState">
            <summary>
            Enumerates all the states that can occur while synchronizing.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.SyncProgressData"/>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_STARTING">
            <summary> No synchronization actions have been taken yet.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_CONNECTING">
            <summary> The synchronization stream has been built, but not yet
            opened.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_HEADER">
            <summary> The synchronization stream has been opened and the
            header is about to be sent.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_TABLE">
            <summary> A table is being sent.
            Progress can be monitored using
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.TableIndex"/> and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.TableCount"/>.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_DATA">
            <summary> Data for the current table is being sent.
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentBytes"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentInserts"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentUpdates"/>, and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentDeletes"/> have been updated.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_FINISHING_UPLOAD">
            <summary> The upload is completing.  The final count of rows sent
            is included with this event.
            See <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentBytes"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentInserts"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentUpdates"/>, and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SentDeletes"/>.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_UPLOAD_ACK">
            <summary> An acknowledgement that the upload is complete is being
            received.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_TABLE">
            <summary> A table is being received.
            Progress can be monitored using
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.TableIndex"/> and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.TableCount"/>.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_RECEIVING_DATA">
            <summary> Data for the current table is being received.
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedBytes"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedInserts"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedUpdates"/>, and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedDeletes"/> have been updated.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_COMMITTING_DOWNLOAD">
            <summary> The download is being committed.  The final count of
            rows received is included with this event.
            See <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedBytes"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedInserts"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedUpdates"/>, and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ReceivedDeletes"/>.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_SENDING_DOWNLOAD_ACK">
            <summary> An acknowledgement that the download is complete is
            being sent.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_DISCONNECTING">
            <summary> The synchronization stream is about to be closed.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_DONE">
            <summary> Synchronization has successfully completed.  The
            connection's <see cref="P:iAnywhere.UltraLite.SyncProgressData.SyncResult"/> object has
            been updated.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_ERROR">
            <summary> Synchronization has completed, but an error occurred.
            Check <see cref="P:iAnywhere.UltraLite.SyncProgressData.SyncResult"/>,
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.ErrorMessage"/>, and
            <see cref="P:iAnywhere.UltraLite.SyncProgressData.SQLCode"/> for details.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_ROLLING_BACK_DOWNLOAD">
            <summary> Synchronization is rolling back the download because an
            error was encountered during the download.  The error will be
            reported with a subsequent STATE_ERROR progress report.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_CANCELLED">
            <summary> Synchronization has been cancelled.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SyncProgressState.STATE_LAST">
            <summary> Last state entered by synchronization.
            This state will always be entered and always after any other
            state.  Other SyncProgressData fields may not contain valid data.
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.SyncProgressDialog">
            <summary>
            Displays a synchronization progress monitoring dialog.
            </summary><remarks><para>
            This dialog must be used as a modal, single use dialog.  When the
            application calls the dialog's <see cref="M:iAnywhere.UltraLite.SyncProgressDialog.ShowDialog(System.Windows.Forms.Form)"/>
            method to display the dialog, it blocks the rest of the application
            until synchronization has completed or the user has
            clicked the Cancel button.
            </para><para>
            Note: Methods documented as being "called during synchronization"
            must not access any connections, schemas, or tables.
            </para></remarks><example>
            The following example creates a SyncProgressDialog which will
            perform a synchronization when ShowDialg is called.
            <code>
            [Visual Basic]
            Dim d As New SyncProgressDialog( myDatabaseManager, myConnection )
            d.ShowDialog( parentForm )	' dialog will be closed
            ' Check d.SQLCode or return value from ShowDialog
            
            [C#]
            SyncProgressDialog d = new SyncProgressDialog(
                    myDatabaseManager, myConnection
                );
            d.ShowDialog( parentForm );	    // dialog will be closed
            // Check d.SQLCode or return value from ShowDialog
            </code>
            </example>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>
        </member>
        <member name="T:iAnywhere.UltraLite.SyncProgressListener">
            <summary>
            The listener interface for receiving synchronization progress events.
            </summary>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Synchronize(iAnywhere.UltraLite.SyncProgressListener)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressListener.SyncProgressed(iAnywhere.UltraLite.SyncProgressData)">
            <summary>
            Invoked during synchronization to inform the user of progress.
            This method should return true to cancel synchronization or return
            false to continue.
            </summary><remarks>
            No UltraLite.NET API methods should be invoked during a
            <c>SyncProgressed</c> call.
            </remarks>
            <param name="data">object containing the latest synchronization
            progress data.
            </param>
            <returns>
            This method should return true to cancel synchronization or return
            false to continue.
            </returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.#ctor(iAnywhere.UltraLite.DatabaseManager,iAnywhere.UltraLite.Connection)">
            <summary>
            Construct a SyncProgressDialog instance to synchronize the
            UltraLite database using the specified connection.
            </summary>
            <remarks>
            This dialog should be shown as a modal dialog using
            <see cref="M:iAnywhere.UltraLite.SyncProgressDialog.ShowDialog(System.Windows.Forms.Form)"/>.
            </remarks>
            <param name="dbMgr">application's DatabaseManager.</param>
            <param name="conn">connection on which to synchronize.</param>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            Shows the form as a modal dialog with the specified parent and
            performs synchronization.
            The dialog will close when synchronization has completed.
            </summary>
            <remarks><para>
            This method is recommended over ShowDialog().
            </para><para>
            The parent will be disabled while this dialog is active.
            </para></remarks>
            <param name="parent">any <see cref="T:System.Windows.Forms.Form"/> object that
            represents the top-level window that will own the modal dialog.
            </param>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if synchronization
            completed successfully, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if
            synchronization was cancelled by the user, and
            <see cref="F:System.Windows.Forms.DialogResult.Abort"/> if an error occurred during
            synchronization (see <see cref="P:iAnywhere.UltraLite.SyncProgressDialog.SQLCode"/> for more specific
            error reporting).
            </returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.ShowDialog">
            <summary>
            Shows the form as a modal dialog with no parent window and
            performs synchronization.
            The dialog will close when synchronization has completed.
            </summary>
            <remarks><para>
            <see cref="M:iAnywhere.UltraLite.SyncProgressDialog.ShowDialog"/> is recommended over this method.
            </para></remarks>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if synchronization
            completed successfully, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if
            synchronization was cancelled by the user, and
            <see cref="F:System.Windows.Forms.DialogResult.Abort"/> if an error occurred during
            synchronization (see <see cref="P:iAnywhere.UltraLite.SyncProgressDialog.SQLCode"/> for more specific
            error reporting).
            </returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.ResetValues">
            <summary>
            Initializes displayed values of this dialog.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.BeginSync">
            <summary><para>
            Invokes Synchronization.
            </para></summary>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.SyncProgressed(iAnywhere.UltraLite.SyncProgressData)">
            <summary><para>
            Invoked during synchronization to inform the user of progress.
            This method should return true to cancel synchronization or return
            false to continue.
            </para><para>
            For most event states (SyncProgressData.getState()),
            getMessage is invoked to formulate the message to be displayed, and
            the sent and received byte counts are updated.  The appropriate row
            counts are updated for the STATE_SENDING_DATA and STATE_RECEIVED_DATA
            events.
            </para><para>
            If a STATE_DONE or STATE_CANCELLED event is received, the dialog will
            be hidden after a brief pause.
            </para><para>
            If a STATE_ERROR event is received, GetErrorMessage is invoked to
            formulate the error message, the Cancel button is changed to a
            Dismiss button, and the dialog is not hidden until the user clicks on
            the button.
            </para><para>
            NOTE: The only safe UltraLite .NET API calls are schema
            inquiry API calls (<c>DatabaseSchema, TableSchema, PublicationSchema,
            IndexSchema</c>).
            </para></summary>
            <param name="data">object containing latest synchronization progress
            data.
            </param>
            <returns>true to cancel synchronization, or false to continue.
            </returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.GetString(System.String)">
            <summary>Returns localized string (in languages supported by
            UltraLite.NET).
            </summary>
            <param name="name">name of string.</param>
            <returns>localized string.</returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.GetMessage(iAnywhere.UltraLite.SyncProgressData)">
            <summary><para>
            Returns a message for the event state.  The message is formatted
            with <c>data.GetTableIndex(), data.GetTableCount()</c>, and
            <c>data.GetTableTotal()</c>.
            </para><para>
            This method is called during synchronization.
            </para></summary>
            <param name="progress">synchronization progress data.</param>
            <returns>message for event.</returns>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.GetErrorMessage(iAnywhere.UltraLite.SQLCode,System.String,System.Boolean)">
            <summary><para>
            Returns a message for the STATE_ERROR event state.  The message is
            formatted with the SQL code of the error.
            </para><para>
            This method is called during synchronization.
            </para></summary>
            <param name="sqlCode">SQL code of the error.</param>
            <param name="errMsg">error message associated with the SQL code.</param>
            <param name="uploadOK">status of upload.</param>
            <returns>message for event.</returns>
            <seealso cref="P:iAnywhere.UltraLite.SyncProgressData.SQLCode"/>
            <seealso cref="P:iAnywhere.UltraLite.SyncProgressData.SyncResult"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.SyncBeginError(iAnywhere.UltraLite.SQLException)">
            <summary><para>Called if error before Synchronization started.
            </para></summary>
            <param name="e">The SQL exception that occurred.</param>
            <seealso cref="M:iAnywhere.UltraLite.SyncProgressDialog.SyncProgressed(iAnywhere.UltraLite.SyncProgressData)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.CancelSync">
            <summary>
            GUI effects of a cancel
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and
            unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overide closing behavior to cancel synchronization and not close
            until synchronization has processed the cancel request.
            </summary>
            <param name="e">a <c>CancelEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncProgressDialog._timer_Tick(System.Object,System.EventArgs)">
            <summary>
            When a sync succeeds, _timer is enabled to generate a single pause
            before dismissing the dialog.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncProgressDialog.SQLCode">
            <summary> The SQL error code from the last synchronization.
            </summary>
            <value>SQL error code</value>
            <seealso cref="P:iAnywhere.UltraLite.SyncProgressDialog.SQLCode"/>
        </member>
        <member name="T:iAnywhere.UltraLite.SyncResult">
            <summary><para> Represents the status of the last synchronization.
            </para></summary>
            <remarks>
            This class cannot be directly instantiated.
            Each connection has its own SyncResult instance, attached as
            its <see cref="P:iAnywhere.UltraLite.Connection.SyncResult"/> property.
            A SyncResult instance is only valid while that connection is open.
            </remarks>
            <seealso cref="P:iAnywhere.UltraLite.Connection.SyncResult"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.Synchronize"/>
        </member>
        <member name="M:iAnywhere.UltraLite.SyncResult.Finalize">
            <summary> Destructor which cleans up the associated JNI state.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.AuthStatus">
            <summary> The authorization status code for the last synchronization
            attempt.  See <see cref="T:iAnywhere.UltraLite.AuthStatusCode"/> for possible values.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.AuthValue">
            <summary> The return value from custom user authentication
            synchronization scripts.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.IgnoredRows">
            <summary> True if any uploaded rows were ignored during the last
            synchronization, false if no rows were ignored.
            </summary>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.DownloadOnly"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.PartialDownloadRetained">
            <summary> True if a download was interrupted and the partial
            download was retained.  False if the download was not interrupted
            or if the partial download was rolled back.
            </summary>
            <seealso cref="P:iAnywhere.UltraLite.SyncParms.KeepPartialDownload"/>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.StreamErrorCode">
            <summary> Returns the error reported by the stream itself. See
            <see cref="P:iAnywhere.UltraLite.SyncResult.StreamErrorCode"/> for a list of known codes.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.StreamErrorContext">
            <summary> The basic network operation being performed when the stream
            error occurred.  See <see cref="P:iAnywhere.UltraLite.SyncResult.StreamErrorContext"/>
            for a list of known contexts.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.StreamErrorID">
            <summary>ID of network layer reporting an error.  See
            <see cref="P:iAnywhere.UltraLite.SyncResult.StreamErrorID"/> for a list of known IDs.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.StreamErrorSystem">
            <summary> The stream error system-specific code.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.Timestamp">
            <summary> The timestamp of the last synchronization.
            </summary>
        </member>
        <member name="P:iAnywhere.UltraLite.SyncResult.UploadOK">
            <summary>True if the last upload synchronization was successful,
            false if the last upload synchronization was unsuccessful.
            </summary>
        </member>
        <member name="T:iAnywhere.UltraLite.Table">
            <summary> Represents a table in an UltraLite database.
            </summary>
            <remarks>
            This class cannot be directly instantiated.  Tables are
            created using the <see cref="M:iAnywhere.UltraLite.Connection.GetTable(System.String)"/> method of the
            <see cref="T:iAnywhere.UltraLite.Connection"/> class.
            </remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.#ctor(iAnywhere.UltraLite.Connection,System.Int32)">
            <summary> Constructor.  (should only be called by
            Connection.GetTable()).  Assumes tableSchemaSlot >= 0.
            </summary>
            <param name="conn">Connection to open the table with</param>
            <param name="tableSchemaSlot">slot for key of table schema 
            </param>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Open">
            <summary> Opens this table for data access using its primary key.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Open(System.String)">
            <summary> Opens this table for data access using the specified index.
            </summary>
            <param name="index">name of index to open the table with.  If
            <c>null</c>, the primary key is used.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.LookupBegin">
            <summary> Prepares to perform a new lookup on this table.  The
            value(s) to search for are specified by calling the appropriate
            set<i>Type</i> method(s) on the columns in the index this table
            was opened with.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupForward"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupForward(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBackward"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBackward(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.LookupForward">
            <summary>
            Move forwards through the table from the beginning, looking for a row
            that matches or is greater than a value or full set of values in the
            current index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row that matches
            or is greater than the index value.  On failure (no rows greater than
            the value being looked for) the cursor position is
            after the last row (<see cref="P:iAnywhere.UltraLite.Cursor.IsEOF"/>).
            </para><para>
            Each search must be preceded by a call to
            <see cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>.
            </para></remarks>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.LookupForward(System.Int16)">
            <summary>
            Move forwards through the table from the beginning, looking for a row
            that matches or is greater than a value or partial set of values in
            the current index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row that matches
            or is greater than the index value.  On failure (no rows greater than
            the value being looked for) the cursor position is
            after the last row (<see cref="P:iAnywhere.UltraLite.Cursor.IsEOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>.
            </para></remarks>
            <param name="numColumns">for composite indexes, the number of
            columns to use in the lookup.  For example, if you have a three
            column index, and you want to look up a value that matches based
            on the first column only, you should set the value for the first
            column, and then supply a <paramref name="numColumns"/> value of
            <c>1</c>.
            </param>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.LookupBackward">
            <summary>
            Move backwards through the table from the end, looking for a row
            that matches or is less than a value or full set of values in the
            current index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row that matches
            or is less than the index value.  On failure (no rows less than
            the value being looked for) the cursor position is
            before the first row (<see cref="P:iAnywhere.UltraLite.Cursor.IsBOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>.
            </para></remarks>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.LookupBackward(System.Int16)">
            <summary>
            Move backwards through the table from the beginning, looking for a row
            that matches or is less than a value or partial set of values in
            the current index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row that matches
            or is less than the index value.  On failure (no rows less than
            the value being looked for) the cursor position is
            before the first row (<see cref="P:iAnywhere.UltraLite.Cursor.IsBOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>.
            </para></remarks>
            <param name="numColumns">for composite indexes, the number of
            columns to use in the lookup.  For example, if you have a three
            column index, and you want to look up a value that matches based
            on the first column only, you should set the value for the first
            column, and then supply a <paramref name="numColumns"/> value of 1.
            </param>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindBegin">
            <summary> Prepares to perform a new Find on this table.
            </summary><remarks>The value(s) to search for
            are specified by calling the appropriate set<i>Type</i> method(s) on
            the columns in the index this table was opened with.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindFirst"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindFirst(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindLast"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindLast(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindFirst">
            <summary>
            Move forwards through the table from the beginning, looking for a row
            that exactly matches a value or full set of values in the current
            index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row that exactly
            matches the index value.  On failure the cursor position is
            after the last row (<see cref="P:iAnywhere.UltraLite.Cursor.IsEOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.FindBegin"/>.
            </para></remarks>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindNext"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindPrevious"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindFirst(System.Int16)">
            <summary>Move forwards through the table from the beginning, looking for a row
            that exactly matches a value or partial set of values in the current
            index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row that exactly
            matches the index value.  On failure the cursor position is
            after the last row (<see cref="P:iAnywhere.UltraLite.Cursor.IsEOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.FindBegin"/>.
            </para></remarks>
            <param name="numColumns">for composite indexes, the number of
            columns to use in the find.  For example, if you
            have a three column index, and you want to look up a value that
            matches based on the first column only, you should set the value
            for the first column, and then supply a
            <paramref name="numColumns"/> value of 1.
            </param>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindNext(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindPrevious(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindLast">
            <summary>
            Move backwards through the table from the end, looking for a row
            that exactly matches a value or full set of values in the current
            index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row found that
            exactly matches the index value.  On failure the cursor position is
            before the first row (<see cref="P:iAnywhere.UltraLite.Cursor.IsBOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.FindBegin"/>.
            </para></remarks>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindNext"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindPrevious"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindLast(System.Int16)">
            <summary>
            Move backwards through the table from the end, looking for a row
            that exactly matches a value or partial set of values in the current
            index.
            </summary><remarks><para>
            To specify the value to search for, set the column value for each
            column in the index.  The cursor is left on the first row found that
            exactly matches the index value.  On failure the cursor position is
            before the first row (<see cref="P:iAnywhere.UltraLite.Cursor.IsBOF"/>).
            </para><para>
            Each search must be preceded by a call to <see cref="M:iAnywhere.UltraLite.Table.FindBegin"/>.
            </para></remarks>
            <param name="numColumns">for composite indexes, the number of columns
            to use in the find.  For example, if you have a three column index,
            and you want to find a value that matches based on the first
            column only, you should set the value for the first column,
            then supply a <paramref name="numColumns"/> value of 1.
            </param>
            <returns>true if successful, false otherwise</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindNext(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindPrevious(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindNext">
            <summary>
            Continues a <see cref="M:iAnywhere.UltraLite.Table.FindFirst"/> search by moving forward through the
            table from the current position, looking to see if the next row
            exactly matches a value or full set of values in the current index.
            </summary><remarks><para>
            The cursor is left on the next row if it exactly matches the index
            value.  On failure the cursor position is after the last row
            (<see cref="P:iAnywhere.UltraLite.Cursor.IsEOF"/>).
            </para><para>
            <c>FindNext</c> behavior is undefined if the column values being
            searched for are modified during a row update.
            </para></remarks>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindFirst"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindNext(System.Int16)">
            <summary>
            Continues a <see cref="M:iAnywhere.UltraLite.Table.FindFirst"/> search by moving forward through
            the table from the current position, looking to see if the next row
            exactly matches a value or partial set of values in the current index.
            </summary><remarks><para>
            The cursor is left on the next row if it exactly matches the index
            value.  On failure the cursor position is after the last row
            (<see cref="P:iAnywhere.UltraLite.Cursor.IsEOF"/>).
            </para><para>
            <c>FindNext</c> behavior is undefined if the column values being
            searched for are modified during a row update.
            </para></remarks>
            <param name="numColumns">for composite indexes, the number of columns
            to use in the find.  For example, if you have a three column index,
            and you want to find a value that matches based on the first
            column only, you should set the value for the first column, and
            then supply a <paramref name="numColumns"/> value of 1.
            </param>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindFirst(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindPrevious">
            <summary>
            Continues a <see cref="M:iAnywhere.UltraLite.Table.FindLast"/> search by moving backward through the
            table from the current position, looking to see if the previous row
            exactly matches a value or full set of values in the
            current index.
            </summary><remarks><para>
            The cursor is left on the previous row if it
            exactly matches the index value.  On failure the cursor position is
            before the first row (<see cref="P:iAnywhere.UltraLite.Cursor.IsBOF"/>).
            </para><para>
            <c>FindPrevious</c> behavior is undefined if the column values being
            searched for are modified during a row update.
            </para></remarks>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindLast"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.FindPrevious(System.Int16)">
            <summary>
            Continues a <see cref="M:iAnywhere.UltraLite.Table.FindLast"/> search by moving backward through
            the table from the current position, looking to see if the previous
            row exactly matches a value or partial set of values in the
            current index.
            </summary><remarks><para>
            The cursor is left on the previous row if it
            exactly matches the index value.  On failure the cursor position is
            before the first row (<see cref="P:iAnywhere.UltraLite.Cursor.IsBOF"/>).
            </para><para>
            <c>FindPrevious</c> behavior is undefined if the column values being
            searched for are modified during a row update.
            </para></remarks>
            <param name="numColumns">for composite indexes, the number of
            columns to use in the find.  For example, if you have a three
            column index, and you want to look up a value that matches based
            on the first column only, you should set the value for the first
            column, then supply a <paramref name="numColumns"/> value of 1.
            </param>
            <returns>true if successful, false otherwise.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindLast(System.Int16)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Truncate">
            <summary> Deletes all rows in the table while temporarily
            activating a stop synchronization delete.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.DeleteAllRows"/>
            <seealso cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.DeleteAllRows">
            <summary>Deletes all rows in the table.
            </summary><remarks>
            In some applications, it can be useful to delete all rows from a table
            before downloading a new set of data into the table.  Rows can be
            deleted from the UltraLite database without being deleted from the
            consolidated database using
            <see cref="M:iAnywhere.UltraLite.Connection.StopSynchronizationDelete"/>.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.Truncate"/>
            <seealso cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Delete">
            <summary> Deletes the current row.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.StartSynchronizationDelete"/>
            <seealso cref="M:iAnywhere.UltraLite.Connection.StopSynchronizationDelete"/>
            <seealso cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.InsertBegin">
            <summary>
            Prepares to insert a new row into this table by setting all
            current column values to their default values.
            </summary><remarks><para>
            Call the appropriate Set<i>Type</i> or Append<i>Type</i>
            method(s) to specify the
            non-default values that are to be inserted.
            </para><para>
            The row is not actually inserted and the data in the row is not
            actually changed until you execute the <see cref="M:iAnywhere.UltraLite.Table.Insert"/>, and
            that change is not permanent until it is committed.
            </para></remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.Table.Insert"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Insert">
            <summary><para>
            Inserts a new row with the current column values (specified using
            the set methods).
            </para><para>
            Each insert must be preceded by a call to
            <see cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>.
            </para></summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.UpdateBegin">
            <summary>
            Prepares to update the current row in this table.
            </summary><remarks><para> Column values are
            modified by calling the appropriate set<i>Type</i> or
            Append<i>Type</i> method(s).  The first append on a column will
            clear the current column value prior to appending the new value.
            </para><para>
            The data in the row is not actually changed until you call
            <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not permanent
            until it is committed.
            </para><para>
            Modifying columns in the index used to open the table will affect
            any active searches in unpredictable ways.  Columns in the primary
            key of the table can not be updated.
            </para></remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Update">
            <summary><para>
            Updates the current row with the current column values (specified
            using the set methods).
            </para><para>
            Each update must be preceded by a call to
            <see cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>.
            </para></summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="F:iAnywhere.UltraLite.Connection.AutoCommit"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)">
            <summary> Sets the value for the specified column to its default
            value.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is
            not permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.TableSchema.GetColumnDefaultValue(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)">
            <summary>
            Sets the value for the specified column using a
            <see cref="T:System.String"/>.
            </summary><remarks><para>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is
            not permanent until it is committed.
            </para></remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)">
            <summary>
            Sets the value for the specified column using a <see cref="T:System.Guid"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is
            not permanent until it is committed.
            Only valid for columns of type <see cref="F:iAnywhere.UltraLite.SQLType.UUID"/> or
            for columns of type <see cref="F:iAnywhere.UltraLite.SQLType.BINARY"/> with length 16.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.Connection.GetNewUUID"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSize(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)">
            <summary> Sets the value for the specified column using an <see cref="T:System.Int16"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)">
            <summary> Sets the value for the specified column using an
            <see cref="T:System.Int32"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)">
            <summary>Sets the value for the specified column using an <see cref="T:System.Int64"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)">
            <summary> Sets the value for the specified column using a <see cref="T:System.UInt16"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)">
            <summary> Sets the value for the specified column using an
            <see cref="T:System.UInt32"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)">
            <summary> Sets the value for the specified column using a <see cref="T:System.UInt64"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)">
            <summary> Sets the value for the specified column using a <see cref="T:System.Single"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)">
            <summary> Sets the value for the specified column using a <see cref="T:System.Double"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)">
            <summary> Sets the value for the specified column using a <see cref="T:System.Boolean"/>.
            </summary><remarks>
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)">
            <summary> Sets the value for the specified column using a
            <see cref="T:System.DateTime"/>. </summary><remarks>
            The set value is accurate to the millisecond.
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)">
            <summary> Sets the value for the specified column using a
            <see cref="T:System.TimeSpan"/>.
            </summary><remarks>
            The set value is accurate to the millisecond
            and is normalized to a nonnegative value between 0 and 24 hours.
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is not
            permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])">
            <summary>
            Sets the value for the specified column using an array of
            <see cref="T:System.Byte"/>s.
            </summary><remarks><para>
            Only suitable for columns of type <see cref="F:iAnywhere.UltraLite.SQLType.BINARY"/> or
            <see cref="F:iAnywhere.UltraLite.SQLType.LONGBINARY"/>, or for columns of type
            <see cref="F:iAnywhere.UltraLite.SQLType.UUID"/> when val is of length 16.
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and that change is
            not permanent until it is committed.
            </para></remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <param name="val">the new value for the column.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends the specified subset of the specified array of <see cref="T:System.Byte"/>s
            to the new value for the specified <see cref="F:iAnywhere.UltraLite.SQLType.LONGBINARY"/>
            column.</summary><remarks><para>
            The bytes at position <paramref name="srcOffset"/> (starting from
            0) through
            <c><paramref name="srcOffset"/>+<paramref name="count"/>-1</c>
            of the array <paramref name="val"/> are
            appended to the value for the specified column.
            </para><para>When inserting, <see cref="M:iAnywhere.UltraLite.Table.InsertBegin"/> initializes
            the new value to the column's default value.  The data in the row
            is not actually changed until you execute an <see cref="M:iAnywhere.UltraLite.Table.Insert"/>,
            and that change is not permanent until it is committed.
            </para><para>
            When updating, the first append on a column will clear the
            current value prior to appending the new value.
            </para><para>
            If any of the following are true, a <see cref="T:iAnywhere.UltraLite.SQLException"/>
            with code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER"/> is thrown and
            the destination is not modified:
            <list type="bullet">
            <item><paramref name="val"/> is null.</item>
            <item><paramref name="srcOffset"/> is negative.</item>
            <item><paramref name="count"/> is negative.</item>
            <item><c><paramref name="srcOffset"/>+<paramref name="count"/></c>
            is greater than <c><paramref name="val"/>.Length</c>.</item>
            </list>
            For other errors, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with the
            appropriate error code is thrown.
            </para></remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">the value to append to the current new value
            for the column.</param>
            <param name="srcOffset">start position in the source array.</param>
            <param name="count">the number of bytes to be copied.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.AppendChars(System.Int16,System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the specified subset of the specified array of
            <see cref="T:System.Char"/>s to the new value for the specified
            <see cref="F:iAnywhere.UltraLite.SQLType.LONGVARCHAR"/> column.
            </summary><remarks><para>
            The characters at position <paramref name="srcOffset"/> (starting
            from 0) through
            <c><paramref name="srcOffset"/>+<paramref name="count"/>-1</c> of
            the array <paramref name="val"/> are appended to the value for
            the specified column.  When inserting, <see cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            initializes the new value to the column's default value.
            The data in the row is not actually changed until you execute an
            <see cref="M:iAnywhere.UltraLite.Table.Insert"/>, and that change is not permanent until it
            is committed.
            </para><para>
            When updating, the first append on a column will clear the
            current value prior to appending the new value.
            </para><para>
            If any of the following is true, a <see cref="T:iAnywhere.UltraLite.SQLException"/>
            with code <see cref="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER"/> is thrown
            and the destination is not modified:
            <list type="bullet">
            <item><paramref name="val"/> is null.</item>
            <item><paramref name="srcOffset"/> is negative.</item>
            <item><paramref name="count"/> is negative.</item>
            <item><c><paramref name="srcOffset"/>+<paramref name="count"/></c>
            is greater than <c><paramref name="value"/>.Length</c>.</item>
            </list>
            For other errors, a <see cref="T:iAnywhere.UltraLite.SQLException"/> with the
            appropriate error code is thrown.
            </para></remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.</param>
            <param name="val">The value to append to the current new value
            for the column.</param>
            <param name="srcOffset">start position in the source array.</param>
            <param name="count">the number of bytes to be copied.</param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.AppendBytes(System.Int16,System.Byte[],System.Int32,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBytes(System.Int16,System.Byte[])"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnSQLType(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.SetNull(System.Int16)">
            <summary> Sets a column to <c>NULL</c>.</summary><remarks>
            The data is not actually changed
            until you execute an <see cref="M:iAnywhere.UltraLite.Table.Insert"/> or <see cref="M:iAnywhere.UltraLite.Table.Update"/>, and
            that change is not permanent until it is committed.
            </remarks>
            <param name="columnID">the ID number of the column.  The first
            column in the table has an ID value of one.
            </param>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.
            </exception>
            <seealso cref="M:iAnywhere.UltraLite.CursorSchema.GetColumnID(System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetToDefault(System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetBoolean(System.Int16,System.Boolean)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetDouble(System.Int16,System.Double)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetFloat(System.Int16,System.Single)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetInt(System.Int16,System.Int32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetLong(System.Int16,System.Int64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetShort(System.Int16,System.Int16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetString(System.Int16,System.String)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTime(System.Int16,System.TimeSpan)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetTimestamp(System.Int16,System.DateTime)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUInt(System.Int16,System.UInt32)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetULong(System.Int16,System.UInt64)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUShort(System.Int16,System.UInt16)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.SetUUID(System.Int16,System.Guid)"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.FindBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.LookupBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.InsertBegin"/>
            <seealso cref="M:iAnywhere.UltraLite.Table.UpdateBegin"/>
            <seealso cref="P:iAnywhere.UltraLite.Table.Schema"/>
            <seealso cref="M:iAnywhere.UltraLite.TableSchema.IsColumnNullable(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.Table.Finalize">
            <summary>Finalize method</summary>
        </member>
        <member name="P:iAnywhere.UltraLite.Table.Schema">
            <summary> Holds the schema of this table.
            This property is only valid while its connection is open.
            </summary>
            <seealso cref="T:iAnywhere.UltraLite.TableSchema"/>
        </member>
        <member name="T:iAnywhere.UltraLite.TableSchema">
            <summary> Represents the schema of an UltraLite table.
            </summary>
            <remarks>
            This class cannot be directly instantiated.
            A <see cref="T:iAnywhere.UltraLite.TableSchema"/> object is attached to a table as
            its <see cref="P:iAnywhere.UltraLite.Table.Schema"/> property.
            </remarks>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.#ctor">
            <summary> Constructor.
            Public to assembly only (should only be called by
            Table.Schema = new TableSchema()).
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.GetColumnDefaultValue(System.String)">
            <summary>The default value of the named column.
            </summary>
            <param name="name">the name of the column.
            </param>
            <returns>The default value of the named column as a string or null
            if the default value is <c>null</c>.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnNullable(System.String)">
            <summary> Checks whether the named column is nullable.
            </summary>
            <param name="name">name of the column.</param>
            <returns>true if the column is nullable, false if not nullable.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnAutoIncrement(System.String)">
            <summary> Checks whether the named column's default is set to autoincrement.
            </summary>
            <param name="name">name of the column.</param>
            <returns>true if the column is autoincrementing, false if it is
            not autoincrementing.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnGlobalAutoIncrement(System.String)">
            <summary> Checks whether the named column's default is set to global autoincrement.
            </summary>
            <param name="name">name of the column.</param>
            <returns>true if the column is global autoincrementing, false if
            it is not global autoincrementing.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.TableSchema.GetColumnPartitionSize(System.String)"/>
            <seealso cref="P:iAnywhere.UltraLite.Connection.DatabaseID"/>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.GetColumnPartitionSize(System.String)">
            <summary>Returns the global autoincrement partition size assigned
            to the named column.
            </summary><remarks><para>
            All global autoincrement columns in a given table share the same
            global autoincrement partition.
            </para></remarks>
            <param name="name">name of the column.</param>
            <returns>Column's global autoincrement partition size.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="M:iAnywhere.UltraLite.TableSchema.IsColumnGlobalAutoIncrement(System.String)"/>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnCurrentTimestamp(System.String)">
            <summary> Checks whether the named column's default is set to
            the current timestamp (SQLType.TIMESTAMP).
            </summary>
            <param name="name">name of the column.</param>
            <returns>True if the column defaults to the current timestamp,
            false if the column does not default to the current timestamp.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnCurrentTime(System.String)">
            <summary> Checks whether the named column's default is set to
            the current time (SQLType.TIME).
            </summary>
            <param name="name">name of the column.</param>
            <returns>True if the column defaults to the current time,
            false if the column does not default to the current time.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnCurrentDate(System.String)">
            <summary> Checks whether the named column's default is set to
            the current date (SQLType.DATE).
            </summary>
            <param name="name">name of the column.</param>
            <returns>True if the column defaults to the current date,
            false if the column does not default to the current date.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsColumnNewUUID(System.String)">
            <summary> Checks whether the named column's default is set to
            a new UUID (<see cref="T:System.Guid"/>).
            </summary>
            <param name="name">name of the column.</param>
            <returns>True if the column defaults to a new UUID,
            false if the column does not default to a new UUID.
            </returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.GetOptimalIndex(System.String)">
            <summary>
            The optimal index for searching a table using the named column.
            </summary><remarks>
            The named column will be the first column in the index, but
            the index may have more than one column.
            </remarks>
            <param name="name">name of the column.</param>
            <returns>index for the named column.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.GetIndex(System.String)">
            <summary> Returns the index schema of the named index.
            </summary>
            <param name="name">name of the index.</param>
            <returns>index schema of the named index.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.GetIndexName(System.Int32)">
            <summary>
            Returns the name of the index identified by the specified index ID.
            </summary><remarks>
            Index IDs and counts may change during a schema upgrade.  To
            correctly identify an index, access it by name or refresh the
            cached IDs and counts after a schema upgrade.
            </remarks>
            <param name="indexID">ID of the index.  <paramref name="indexID"/>
            must be in the range <c>[1,<see cref="P:iAnywhere.UltraLite.TableSchema.IndexCount"/>]</c>.
            </param>
            <returns>name of the index.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
            <seealso cref="P:iAnywhere.UltraLite.TableSchema.IndexCount"/>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.IsInPublication(System.String)">
            <summary> Checks whether this table is contained in the named publication.
            </summary>
            <param name="pubName">name of the publication.</param>
            <returns>true if the table is in the publication, false if the
            table is not in the publication.</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.Finalize">
            <summary> Destructor which cleans up the associated native object.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.TableSchema.GetNativeKey">
            <summary>
            Help function to get the native key associated with this schema.
            </summary>
            <returns>The key</returns>
            <exception cref="T:iAnywhere.UltraLite.SQLException">If schema is closed.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.TableSchema.Name">
            <summary> The name of this table.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.TableSchema.IndexCount">
            <summary>
            The number of indexes on this table.
            </summary><remarks><para>
            Index IDs range from 1 to <c>IndexCount</c>, inclusively.
            </para><para>
            Note: Index IDs and count may change during a schema upgrade.  To
            correctly identify an index, access it by name or refresh the
            cached IDs and counts after a schema upgrade.
            </para></remarks>
        </member>
        <member name="P:iAnywhere.UltraLite.TableSchema.PrimaryKey">
            <summary> The index schema of the primary key for this table.
            </summary>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.TableSchema.UploadsUnchangedRows">
            <summary>
            Whether the database will upload rows which have not changed.
            </summary>
            <value>
            true if this table is marked to always upload all rows during
            synchronization.
            </value><remarks>
            Tables marked as such will upload unchanged rows, as well as
            changed rows, when the table is synchronized.  These tables are
            sometimes referred to as "all sync" tables.
            </remarks>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="P:iAnywhere.UltraLite.TableSchema.IsNeverSynchronized">
            <summary>Whether this table is marked as never being synchronized.
            </summary><remarks>
            Tables marked as never being synchronized are never synchronized,
            even if they are included in a publication.  These tables are
            sometimes referred to as "no sync" tables.
            </remarks><value>
            true if this table is marked as never being synchronized.
            </value>
            <exception cref="T:iAnywhere.UltraLite.SQLException">A SQL error occurred.</exception>
        </member>
        <member name="T:iAnywhere.UltraLite.ULToNETTypeHelper">
            <summary><para>This classes contains type converstion
            related methods.</para></summary>
        </member>
        <member name="T:iAnywhere.UltraLite.ValueSupport">
            <summary>
            Contains static methods for conversion between native and C# types.
            </summary>
        </member>
        <member name="M:iAnywhere.UltraLite.ValueSupport.CharPtrToString(System.Char*)">
            <summary>
            Converts a char pointer to a string.  Frees the memory pointed
            to by the unmanaged pointer.
            </summary>
            <param name="str">A char* allocated by the native Dll</param>
            <returns>A native string.</returns>
        </member>
        <member name="T:iAnywhere.UltraLite.SQLCode">
            <summary>
            Enumerates the SQL codes that may be reported by UltraLite.NET.
            </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NOERROR">
            <summary> SQLE_NOERROR(0) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ROW_DELETED_TO_MAINTAIN_REFERENTIAL_INTEGRITY">
            <summary> SQLE_ROW_DELETED_TO_MAINTAIN_REFERENTIAL_INTEGRITY(137) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_CREATED">
            <summary> SQLE_DATABASE_CREATED(136) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CURSOR_RESTORED">
            <summary> SQLE_CURSOR_RESTORED(134) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CONNECTION_RESTORED">
            <summary> SQLE_CONNECTION_RESTORED(133) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ROW_DROPPED_DURING_SCHEMA_UPGRADE">
            <summary> SQLE_ROW_DROPPED_DURING_SCHEMA_UPGRADE(130) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_NEW">
            <summary> SQLE_DATABASE_NEW(123) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CANNOT_EXECUTE_STMT">
            <summary> SQLE_CANNOT_EXECUTE_STMT(111) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NOTFOUND">
            <summary> SQLE_NOTFOUND(100) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_START_STOP_DATABASE_DENIED">
            <summary> SQLE_START_STOP_DATABASE_DENIED(-75) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DYNAMIC_MEMORY_EXHAUSTED">
            <summary> SQLE_DYNAMIC_MEMORY_EXHAUSTED(-78) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNABLE_TO_START_DATABASE">
            <summary> SQLE_UNABLE_TO_START_DATABASE(-82) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_DATABASE">
            <summary> SQLE_INVALID_DATABASE(-84) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COMMUNICATIONS_ERROR">
            <summary> SQLE_COMMUNICATIONS_ERROR(-85) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_NAME_REQUIRED">
            <summary> SQLE_DATABASE_NAME_REQUIRED(-87) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ENGINE_NOT_MULTIUSER">
            <summary> SQLE_ENGINE_NOT_MULTIUSER(-89) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ARGUMENT_CANNOT_BE_NULL">
            <summary> SQLE_ARGUMENT_CANNOT_BE_NULL(-90) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARSE_PARAMETER">
            <summary> SQLE_INVALID_PARSE_PARAMETER(-95) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ENGINE_ALREADY_RUNNING">
            <summary> SQLE_ENGINE_ALREADY_RUNNING(-96) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_TOO_MANY_CONNECTIONS">
            <summary> SQLE_TOO_MANY_CONNECTIONS(-102) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_LOGON">
            <summary> SQLE_INVALID_LOGON(-103) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNABLE_TO_CONNECT">
            <summary> SQLE_UNABLE_TO_CONNECT(-105) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CONNECTION_NOT_FOUND">
            <summary> SQLE_CONNECTION_NOT_FOUND(-108) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NAME_NOT_UNIQUE">
            <summary> SQLE_NAME_NOT_UNIQUE(-110) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INDEX_NAME_NOT_UNIQUE">
            <summary> SQLE_INDEX_NAME_NOT_UNIQUE(-111) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_FOREIGN_KEY_DEF">
            <summary> SQLE_INVALID_FOREIGN_KEY_DEF(-113) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NO_PRIMARY_KEY">
            <summary> SQLE_NO_PRIMARY_KEY(-118) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_PERMISSION_DENIED">
            <summary> SQLE_PERMISSION_DENIED(-121) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_PRIMARY_KEY_TWICE">
            <summary> SQLE_PRIMARY_KEY_TWICE(-126) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COLUMN_IN_INDEX">
            <summary> SQLE_COLUMN_IN_INDEX(-127) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNTAX_ERROR">
            <summary> SQLE_SYNTAX_ERROR(-131) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NOT_IMPLEMENTED">
            <summary> SQLE_NOT_IMPLEMENTED(-134) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNKNOWN_USERID">
            <summary> SQLE_UNKNOWN_USERID(-140) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_TABLE_NOT_FOUND">
            <summary> SQLE_TABLE_NOT_FOUND(-141) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CORRELATION_NAME_NOT_FOUND">
            <summary> SQLE_CORRELATION_NAME_NOT_FOUND(-142) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COLUMN_NOT_FOUND">
            <summary> SQLE_COLUMN_NOT_FOUND(-143) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COLUMN_AMBIGUOUS">
            <summary> SQLE_COLUMN_AMBIGUOUS(-144) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_FOREIGN_KEY_NAME_NOT_FOUND">
            <summary> SQLE_FOREIGN_KEY_NAME_NOT_FOUND(-145) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNKNOWN_FUNC">
            <summary> SQLE_UNKNOWN_FUNC(-148) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_GROUP_SELECT">
            <summary> SQLE_INVALID_GROUP_SELECT(-149) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_AGGREGATES_NOT_ALLOWED">
            <summary> SQLE_AGGREGATES_NOT_ALLOWED(-150) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SUBQUERY_SELECT_LIST">
            <summary> SQLE_SUBQUERY_SELECT_LIST(-151) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_ORDER">
            <summary> SQLE_INVALID_ORDER(-152) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_WRONG_PARAMETER_COUNT">
            <summary> SQLE_WRONG_PARAMETER_COUNT(-154) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_EXPRESSION_ERROR">
            <summary> SQLE_EXPRESSION_ERROR(-156) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CONVERSION_ERROR">
            <summary> SQLE_CONVERSION_ERROR(-157) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_OVERFLOW_ERROR">
            <summary> SQLE_OVERFLOW_ERROR(-158) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NO_COLUMN_NAME">
            <summary> SQLE_NO_COLUMN_NAME(-163) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CURSOR_ALREADY_OPEN">
            <summary> SQLE_CURSOR_ALREADY_OPEN(-172) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CURSOR_NOT_OPEN">
            <summary> SQLE_CURSOR_NOT_OPEN(-180) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NO_INDICATOR">
            <summary> SQLE_NO_INDICATOR(-181) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INDEX_NOT_FOUND">
            <summary> SQLE_INDEX_NOT_FOUND(-183) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CURSOROP_NOT_ALLOWED">
            <summary> SQLE_CURSOROP_NOT_ALLOWED(-187) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CANNOT_MODIFY">
            <summary> SQLE_CANNOT_MODIFY(-191) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_PRIMARY_KEY_NOT_UNIQUE">
            <summary> SQLE_PRIMARY_KEY_NOT_UNIQUE(-193) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_FOREIGN_KEY">
            <summary> SQLE_INVALID_FOREIGN_KEY(-194) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COLUMN_CANNOT_BE_NULL">
            <summary> SQLE_COLUMN_CANNOT_BE_NULL(-195) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INDEX_NOT_UNIQUE">
            <summary> SQLE_INDEX_NOT_UNIQUE(-196) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NO_CURRENT_ROW">
            <summary> SQLE_NO_CURRENT_ROW(-197) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_PRIMARY_KEY_VALUE_REF">
            <summary> SQLE_PRIMARY_KEY_VALUE_REF(-198) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_OPTION_SETTING">
            <summary> SQLE_INVALID_OPTION_SETTING(-201) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_WRONG_NUM_OF_INSERT_COLS">
            <summary> SQLE_WRONG_NUM_OF_INSERT_COLS(-207) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_LOCKED">
            <summary> SQLE_LOCKED(-210) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_TABLE_IN_USE">
            <summary> SQLE_TABLE_IN_USE(-214) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_IDENTIFIER_TOO_LONG">
            <summary> SQLE_IDENTIFIER_TOO_LONG(-250) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DUPLICATE_FOREIGN_KEY">
            <summary> SQLE_DUPLICATE_FOREIGN_KEY(-251) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_PUBLICATION_NOT_FOUND">
            <summary> SQLE_PUBLICATION_NOT_FOUND(-280) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_TABLE_HAS_PUBLICATIONS">
            <summary> SQLE_TABLE_HAS_PUBLICATIONS(-281) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INTERRUPTED">
            <summary> SQLE_INTERRUPTED(-299) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ERROR">
            <summary> SQLE_ERROR(-300) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_ERROR">
            <summary> SQLE_DATABASE_ERROR(-301) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_MEMORY_ERROR">
            <summary> SQLE_MEMORY_ERROR(-309) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CANNOT_ACCESS_FILE">
            <summary> SQLE_CANNOT_ACCESS_FILE(-602) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DBSPACE_FULL">
            <summary> SQLE_DBSPACE_FULL(-604) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COULD_NOT_LOAD_LIBRARY">
            <summary> SQLE_COULD_NOT_LOAD_LIBRARY(-620) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COULD_NOT_FIND_FUNCTION">
            <summary> SQLE_COULD_NOT_FIND_FUNCTION(-621) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ERROR_CALLING_FUNCTION">
            <summary> SQLE_ERROR_CALLING_FUNCTION(-622) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATATYPE_NOT_ALLOWED">
            <summary> SQLE_DATATYPE_NOT_ALLOWED(-624) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DIV_ZERO_ERROR">
            <summary> SQLE_DIV_ZERO_ERROR(-628) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_STRING_RIGHT_TRUNCATION">
            <summary> SQLE_STRING_RIGHT_TRUNCATION(-638) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_PAGE_SIZE_INVALID">
            <summary> SQLE_PAGE_SIZE_INVALID(-644) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_NOT_CREATED">
            <summary> SQLE_DATABASE_NOT_CREATED(-645) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DROP_DATABASE_FAILED">
            <summary> SQLE_DROP_DATABASE_FAILED(-651) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_METHOD_CANNOT_BE_CALLED">
            <summary> SQLE_METHOD_CANNOT_BE_CALLED(-669) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DATABASE_UPGRADE_NOT_POSSIBLE">
            <summary> SQLE_DATABASE_UPGRADE_NOT_POSSIBLE(-673) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_AMBIGUOUS_INDEX_NAME">
            <summary> SQLE_AMBIGUOUS_INDEX_NAME(-678) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_RESOURCE_GOVERNOR_EXCEEDED">
            <summary> SQLE_RESOURCE_GOVERNOR_EXCEEDED(-685) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_BAD_PARAM_INDEX">
            <summary> SQLE_BAD_PARAM_INDEX(-689) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_PARAMETER">
            <summary> SQLE_INVALID_PARAMETER(-735) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NOT_SUPPORTED_IN_ULTRALITE">
            <summary> SQLE_NOT_SUPPORTED_IN_ULTRALITE(-749) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNCOMMITTED_TRANSACTIONS">
            <summary> SQLE_UNCOMMITTED_TRANSACTIONS(-755) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INVALID_SQL_IDENTIFIER">
            <summary> SQLE_INVALID_SQL_IDENTIFIER(-760) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNCHRONIZATION_NOT_FOUND">
            <summary> SQLE_SYNCHRONIZATION_NOT_FOUND(-767) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UPLOAD_FAILED_AT_SERVER">
            <summary> SQLE_UPLOAD_FAILED_AT_SERVER(-794) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_NO_MATCHING_SELECT_ITEM">
            <summary> SQLE_NO_MATCHING_SELECT_ITEM(-812) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_TOO_MANY_TEMP_TABLES">
            <summary> SQLE_TOO_MANY_TEMP_TABLES(-817) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ALIAS_NOT_UNIQUE">
            <summary> SQLE_ALIAS_NOT_UNIQUE(-830) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ALIAS_NOT_YET_DEFINED">
            <summary> SQLE_ALIAS_NOT_YET_DEFINED(-831) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_COLUMN_NOT_FOUND_IN_TABLE">
            <summary> SQLE_COLUMN_NOT_FOUND_IN_TABLE(-834) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DOWNLOAD_CONFLICT">
            <summary> SQLE_DOWNLOAD_CONFLICT(-839) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_BAD_ENCRYPTION_KEY">
            <summary> SQLE_BAD_ENCRYPTION_KEY(-840) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SERVER_SYNCHRONIZATION_ERROR">
            <summary> SQLE_SERVER_SYNCHRONIZATION_ERROR(-857) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CANNOT_CHANGE_USER_NAME">
            <summary> SQLE_CANNOT_CHANGE_USER_NAME(-867) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNSUPPORTED_CHARACTER_SET_ERROR">
            <summary> SQLE_UNSUPPORTED_CHARACTER_SET_ERROR(-869) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ULTRALITE_OBJ_CLOSED">
            <summary> SQLE_ULTRALITE_OBJ_CLOSED(-908) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNABLE_TO_START_DATABASE_VER_NEWER">
            <summary> SQLE_UNABLE_TO_START_DATABASE_VER_NEWER(-934) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CANNOT_ACCESS_SCHEMA_FILE">
            <summary> SQLE_CANNOT_ACCESS_SCHEMA_FILE(-951) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_STATUS_UNKNOWN">
            <summary> SQLE_SYNC_STATUS_UNKNOWN(-952) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SCHEMA_UPGRADE_NOT_ALLOWED">
            <summary> SQLE_SCHEMA_UPGRADE_NOT_ALLOWED(-953) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ULTRALITE_DATABASE_NOT_FOUND">
            <summary> SQLE_ULTRALITE_DATABASE_NOT_FOUND(-954) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CONNECTION_ALREADY_EXISTS">
            <summary> SQLE_CONNECTION_ALREADY_EXISTS(-955) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_SYNC_INFO_INVALID">
            <summary> SQLE_SYNC_INFO_INVALID(-956) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_DEVICE_IO_FAILED">
            <summary> SQLE_DEVICE_IO_FAILED(-974) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_INCORRECT_VOLUME_ID">
            <summary> SQLE_INCORRECT_VOLUME_ID(-975) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_ULTRALITE_RUNTIME_LIBRARY_MISMATCH">
            <summary> SQLE_ULTRALITE_RUNTIME_LIBRARY_MISMATCH(-977) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_CANNOT_REGISTER_LISTENER">
            <summary> SQLE_CANNOT_REGISTER_LISTENER(-992) </summary>
        </member>
        <member name="F:iAnywhere.UltraLite.SQLCode.SQLE_UNRECOGNIZED_OPTION">
            <summary> SQLE_UNRECOGNIZED_OPTION(-1002) </summary>
        </member>
    </members>
</doc>
