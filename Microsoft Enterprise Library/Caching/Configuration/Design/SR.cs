// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Design
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string ExceptionOnlyOneCacheManagerCollectionNode
		{
			get { return Keys.GetString( Keys.ExceptionOnlyOneCacheManagerCollectionNode ); }
		}
		public static string DefaultCacheManagerSettingsNodeName
		{
			get { return Keys.GetString( Keys.DefaultCacheManagerSettingsNodeName ); }
		}
		public static string DefaultCacheManagerNodeName
		{
			get { return Keys.GetString( Keys.DefaultCacheManagerNodeName ); }
		}
		public static string DefaultCacheManagerCollectionNodeName
		{
			get { return Keys.GetString( Keys.DefaultCacheManagerCollectionNodeName ); }
		}
		public static string DefaultCacheManagerName
		{
			get { return Keys.GetString( Keys.DefaultCacheManagerName ); }
		}
		public static string DefaultCacheStorageNodeName
		{
			get { return Keys.GetString( Keys.DefaultCacheStorageNodeName ); }
		}
		public static string DefaultCustomCacheStorageNodeName
		{
			get { return Keys.GetString( Keys.DefaultCustomCacheStorageNodeName ); }
		}
		public static string NullStorageName
		{
			get { return Keys.GetString( Keys.NullStorageName ); }
		}
		public static string DefaultIsolatedStorageNodeName
		{
			get { return Keys.GetString( Keys.DefaultIsolatedStorageNodeName ); }
		}
		public static string DefaultCacheManagerDescription
		{
			get { return Keys.GetString( Keys.DefaultCacheManagerDescription ); }
		}
		public static string CacheStorageNameDescription
		{
			get { return Keys.GetString( Keys.CacheStorageNameDescription ); }
		}
		public static string ExpirationPollFrequencyInSecondsDescription
		{
			get { return Keys.GetString( Keys.ExpirationPollFrequencyInSecondsDescription ); }
		}
		public static string MaximumElementsInCacheBeforeScavengingDescription
		{
			get { return Keys.GetString( Keys.MaximumElementsInCacheBeforeScavengingDescription ); }
		}
		public static string NumberToRemoveWhenScavengingDescription
		{
			get { return Keys.GetString( Keys.NumberToRemoveWhenScavengingDescription ); }
		}
		public static string CustomCacheStorageExtensionsDescription
		{
			get { return Keys.GetString( Keys.CustomCacheStorageExtensionsDescription ); }
		}
		public static string CacheStorageNodeTypeDescription
		{
			get { return Keys.GetString( Keys.CacheStorageNodeTypeDescription ); }
		}
		public static string IsolatedStorageAreaNameDescription
		{
			get { return Keys.GetString( Keys.IsolatedStorageAreaNameDescription ); }
		}
		public static string DefaultStorageEncryptionNodeName
		{
			get { return Keys.GetString( Keys.DefaultStorageEncryptionNodeName ); }
		}
		public static string CategoryGeneral
		{
			get { return Keys.GetString( Keys.CategoryGeneral ); }
		}
		public static string DuplicateCacheStoragesName
		{
			get { return Keys.GetString( Keys.DuplicateCacheStoragesName ); }
		}
		public static string CacheManagerMenuText
		{
			get { return Keys.GetString( Keys.CacheManagerMenuText ); }
		}
		public static string CacheSettingsMenuText
		{
			get { return Keys.GetString( Keys.CacheSettingsMenuText ); }
		}
		public static string GenericCreateStatusText (string name)
		{
			return Keys.GetString( Keys.GenericCreateStatusText, name );
		}
		public static string CacheManagerStatusText
		{
			get { return Keys.GetString( Keys.CacheManagerStatusText ); }
		}
		public static string CacheSettingsStatusText
		{
			get { return Keys.GetString( Keys.CacheSettingsStatusText ); }
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Design.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Design.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, Resources.CultureInfo );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, Resources.CultureInfo );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string ExceptionOnlyOneCacheManagerCollectionNode = "ExceptionOnlyOneCacheManagerCollectionNode";
			public const string DefaultCacheManagerSettingsNodeName = "DefaultCacheManagerSettingsNodeName";
			public const string DefaultCacheManagerNodeName = "DefaultCacheManagerNodeName";
			public const string DefaultCacheManagerCollectionNodeName = "DefaultCacheManagerCollectionNodeName";
			public const string DefaultCacheManagerName = "DefaultCacheManagerName";
			public const string DefaultCacheStorageNodeName = "DefaultCacheStorageNodeName";
			public const string DefaultCustomCacheStorageNodeName = "DefaultCustomCacheStorageNodeName";
			public const string NullStorageName = "NullStorageName";
			public const string DefaultIsolatedStorageNodeName = "DefaultIsolatedStorageNodeName";
			public const string DefaultCacheManagerDescription = "DefaultCacheManagerDescription";
			public const string CacheStorageNameDescription = "CacheStorageNameDescription";
			public const string ExpirationPollFrequencyInSecondsDescription = "ExpirationPollFrequencyInSecondsDescription";
			public const string MaximumElementsInCacheBeforeScavengingDescription = "MaximumElementsInCacheBeforeScavengingDescription";
			public const string NumberToRemoveWhenScavengingDescription = "NumberToRemoveWhenScavengingDescription";
			public const string CustomCacheStorageExtensionsDescription = "CustomCacheStorageExtensionsDescription";
			public const string CacheStorageNodeTypeDescription = "CacheStorageNodeTypeDescription";
			public const string IsolatedStorageAreaNameDescription = "IsolatedStorageAreaNameDescription";
			public const string DefaultStorageEncryptionNodeName = "DefaultStorageEncryptionNodeName";
			public const string CategoryGeneral = "CategoryGeneral";
			public const string DuplicateCacheStoragesName = "DuplicateCacheStoragesName";
			public const string CacheManagerMenuText = "CacheManagerMenuText";
			public const string CacheSettingsMenuText = "CacheSettingsMenuText";
			public const string GenericCreateStatusText = "GenericCreateStatusText";
			public const string CacheManagerStatusText = "CacheManagerStatusText";
			public const string CacheSettingsStatusText = "CacheSettingsStatusText";
		}


	}
}
