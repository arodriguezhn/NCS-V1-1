// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Caching
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string EmptyParameterName
		{
			get { return Keys.GetString( Keys.EmptyParameterName ); }
		}
		public static string CachingInstrumentationEventSource
		{
			get { return Keys.GetString( Keys.CachingInstrumentationEventSource ); }
		}
		public static string CachingInstrumentationCounterCategory
		{
			get { return Keys.GetString( Keys.CachingInstrumentationCounterCategory ); }
		}
		public static string CachingInstrumentationCounterCategoryHelp
		{
			get { return Keys.GetString( Keys.CachingInstrumentationCounterCategoryHelp ); }
		}
		public static string PerfCounterTotalCacheEntries
		{
			get { return Keys.GetString( Keys.PerfCounterTotalCacheEntries ); }
		}
		public static string PerfCounterTotalCacheEntriesMsg
		{
			get { return Keys.GetString( Keys.PerfCounterTotalCacheEntriesMsg ); }
		}
		public static string PerfCounterCacheHitsSec
		{
			get { return Keys.GetString( Keys.PerfCounterCacheHitsSec ); }
		}
		public static string PerfCounterCacheHitsSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterCacheHitsSecMsg ); }
		}
		public static string PerfCounterCacheMissesSec
		{
			get { return Keys.GetString( Keys.PerfCounterCacheMissesSec ); }
		}
		public static string PerfCounterCacheMissesSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterCacheMissesSecMsg ); }
		}
		public static string PerfCounterCacheHitRatio
		{
			get { return Keys.GetString( Keys.PerfCounterCacheHitRatio ); }
		}
		public static string PerfCounterCacheHitRatioMsg
		{
			get { return Keys.GetString( Keys.PerfCounterCacheHitRatioMsg ); }
		}
		public static string PerfCounterCacheAccessAttempts
		{
			get { return Keys.GetString( Keys.PerfCounterCacheAccessAttempts ); }
		}
		public static string PerfCounterCacheAccessAttemptsMsg
		{
			get { return Keys.GetString( Keys.PerfCounterCacheAccessAttemptsMsg ); }
		}
		public static string PerfCounterCacheTurnoverRate
		{
			get { return Keys.GetString( Keys.PerfCounterCacheTurnoverRate ); }
		}
		public static string PerfCounterCacheTurnoverRateMsg
		{
			get { return Keys.GetString( Keys.PerfCounterCacheTurnoverRateMsg ); }
		}
		public static string ExceptionRangeAbsoluteTime
		{
			get { return Keys.GetString( Keys.ExceptionRangeAbsoluteTime ); }
		}
		public static string ExceptionNullTimeFormat
		{
			get { return Keys.GetString( Keys.ExceptionNullTimeFormat ); }
		}
		public static string ExceptionRangeTimeFormat
		{
			get { return Keys.GetString( Keys.ExceptionRangeTimeFormat ); }
		}
		public static string ExceptionInvalidExtendedFormatArguments
		{
			get { return Keys.GetString( Keys.ExceptionInvalidExtendedFormatArguments ); }
		}
		public static string ExceptionRangeMinute
		{
			get { return Keys.GetString( Keys.ExceptionRangeMinute ); }
		}
		public static string ExceptionRangeDayOfMonth
		{
			get { return Keys.GetString( Keys.ExceptionRangeDayOfMonth ); }
		}
		public static string ExceptionRangeMonth
		{
			get { return Keys.GetString( Keys.ExceptionRangeMonth ); }
		}
		public static string ExceptionRangeDay
		{
			get { return Keys.GetString( Keys.ExceptionRangeDay ); }
		}
		public static string ExceptionInvalidDay
		{
			get { return Keys.GetString( Keys.ExceptionInvalidDay ); }
		}
		public static string ExceptionRangeHour
		{
			get { return Keys.GetString( Keys.ExceptionRangeHour ); }
		}
		public static string ExceptionInvalidExtendedFormatTime
		{
			get { return Keys.GetString( Keys.ExceptionInvalidExtendedFormatTime ); }
		}
		public static string ExceptionEmptyFormat
		{
			get { return Keys.GetString( Keys.ExceptionEmptyFormat ); }
		}
		public static string ExceptionNullFormat
		{
			get { return Keys.GetString( Keys.ExceptionNullFormat ); }
		}
		public static string ExceptionNullDays
		{
			get { return Keys.GetString( Keys.ExceptionNullDays ); }
		}
		public static string ExceptionNullDaysOfWeek
		{
			get { return Keys.GetString( Keys.ExceptionNullDaysOfWeek ); }
		}
		public static string ExceptionNullHours
		{
			get { return Keys.GetString( Keys.ExceptionNullHours ); }
		}
		public static string ExceptionNullMinutes
		{
			get { return Keys.GetString( Keys.ExceptionNullMinutes ); }
		}
		public static string ExceptionNullMonths
		{
			get { return Keys.GetString( Keys.ExceptionNullMonths ); }
		}
		public static string ExceptionNullFileName
		{
			get { return Keys.GetString( Keys.ExceptionNullFileName ); }
		}
		public static string ExceptionEmptyFileName
		{
			get { return Keys.GetString( Keys.ExceptionEmptyFileName ); }
		}
		public static string ExceptionInvalidFileName
		{
			get { return Keys.GetString( Keys.ExceptionInvalidFileName ); }
		}
		public static string ExceptionRangeSlidingExpiration
		{
			get { return Keys.GetString( Keys.ExceptionRangeSlidingExpiration ); }
		}
		public static string ExceptionNullCacheManagerDataName
		{
			get { return Keys.GetString( Keys.ExceptionNullCacheManagerDataName ); }
		}
		public static string ExceptionMessageNoDefault
		{
			get { return Keys.GetString( Keys.ExceptionMessageNoDefault ); }
		}
		public static string UnknownFailureReason
		{
			get { return Keys.GetString( Keys.UnknownFailureReason ); }
		}
		public static string BackgroundSchedulerProducerConsumerQueueFailure
		{
			get { return Keys.GetString( Keys.BackgroundSchedulerProducerConsumerQueueFailure ); }
		}
		public static string CacheNotInitializedException
		{
			get { return Keys.GetString( Keys.CacheNotInitializedException ); }
		}
		public static string EmptyCacheManagerNameException
		{
			get { return Keys.GetString( Keys.EmptyCacheManagerNameException ); }
		}
		public static string UnableToFindCacheManagerInstance (string cacheManagerName)
		{
			return Keys.GetString( Keys.UnableToFindCacheManagerInstance, cacheManagerName );
		}
		public static string CannotInstantiateCacheStorage (string cacheManagerName)
		{
			return Keys.GetString( Keys.CannotInstantiateCacheStorage, cacheManagerName );
		}
		public static string CannotInstantiateCacheStorageType (string cacheStorageTypeName, string cacheManagerName)
		{
			return Keys.GetString( Keys.CannotInstantiateCacheStorageType, cacheStorageTypeName, cacheManagerName );
		}
		public static string CannotInstantiateCacheStorageWithNullName (string cacheManagerName)
		{
			return Keys.GetString( Keys.CannotInstantiateCacheStorageWithNullName, cacheManagerName );
		}
		public static string UnspecifiedExceptionWhileCreatingType (string cacheStorageTypeName, string cacheManagerName)
		{
			return Keys.GetString( Keys.UnspecifiedExceptionWhileCreatingType, cacheStorageTypeName, cacheManagerName );
		}
		public static string InvalidExpirationPollCycleTime
		{
			get { return Keys.GetString( Keys.InvalidExpirationPollCycleTime ); }
		}
		public static string InvalidPollingStopOperation
		{
			get { return Keys.GetString( Keys.InvalidPollingStopOperation ); }
		}
		public static string FailureToRemoveCacheItemInBackground
		{
			get { return Keys.GetString( Keys.FailureToRemoveCacheItemInBackground ); }
		}
		public static string FailureToSpawnUserSpecifiedRefreshAction
		{
			get { return Keys.GetString( Keys.FailureToSpawnUserSpecifiedRefreshAction ); }
		}
		public static string FailureWhileRunningUserSpecifiedRefreshAction
		{
			get { return Keys.GetString( Keys.FailureWhileRunningUserSpecifiedRefreshAction ); }
		}
		public static string IsolatedStoreAreaNameNullException (string isoStoreName)
		{
			return Keys.GetString( Keys.IsolatedStoreAreaNameNullException, isoStoreName );
		}
		public static string IsolatedStoreAreaNameEmptyException (string isoStoreName)
		{
			return Keys.GetString( Keys.IsolatedStoreAreaNameEmptyException, isoStoreName );
		}
		public static string WildcardAll
		{
			get { return Keys.GetString( Keys.WildcardAll ); }
		}
		public static string ArgumentDelimiter
		{
			get { return Keys.GetString( Keys.ArgumentDelimiter ); }
		}
		public static string BackingStoreFactoryName
		{
			get { return Keys.GetString( Keys.BackingStoreFactoryName ); }
		}
		public static string CacheManagerFactoryName
		{
			get { return Keys.GetString( Keys.CacheManagerFactoryName ); }
		}
		public static string StorageEncryptionFactoryName
		{
			get { return Keys.GetString( Keys.StorageEncryptionFactoryName ); }
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Caching.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Caching.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, Resources.CultureInfo );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, Resources.CultureInfo );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string EmptyParameterName = "EmptyParameterName";
			public const string CachingInstrumentationEventSource = "CachingInstrumentationEventSource";
			public const string CachingInstrumentationCounterCategory = "CachingInstrumentationCounterCategory";
			public const string CachingInstrumentationCounterCategoryHelp = "CachingInstrumentationCounterCategoryHelp";
			public const string PerfCounterTotalCacheEntries = "PerfCounterTotalCacheEntries";
			public const string PerfCounterTotalCacheEntriesMsg = "PerfCounterTotalCacheEntriesMsg";
			public const string PerfCounterCacheHitsSec = "PerfCounterCacheHitsSec";
			public const string PerfCounterCacheHitsSecMsg = "PerfCounterCacheHitsSecMsg";
			public const string PerfCounterCacheMissesSec = "PerfCounterCacheMissesSec";
			public const string PerfCounterCacheMissesSecMsg = "PerfCounterCacheMissesSecMsg";
			public const string PerfCounterCacheHitRatio = "PerfCounterCacheHitRatio";
			public const string PerfCounterCacheHitRatioMsg = "PerfCounterCacheHitRatioMsg";
			public const string PerfCounterCacheAccessAttempts = "PerfCounterCacheAccessAttempts";
			public const string PerfCounterCacheAccessAttemptsMsg = "PerfCounterCacheAccessAttemptsMsg";
			public const string PerfCounterCacheTurnoverRate = "PerfCounterCacheTurnoverRate";
			public const string PerfCounterCacheTurnoverRateMsg = "PerfCounterCacheTurnoverRateMsg";
			public const string ExceptionRangeAbsoluteTime = "ExceptionRangeAbsoluteTime";
			public const string ExceptionNullTimeFormat = "ExceptionNullTimeFormat";
			public const string ExceptionRangeTimeFormat = "ExceptionRangeTimeFormat";
			public const string ExceptionInvalidExtendedFormatArguments = "ExceptionInvalidExtendedFormatArguments";
			public const string ExceptionRangeMinute = "ExceptionRangeMinute";
			public const string ExceptionRangeDayOfMonth = "ExceptionRangeDayOfMonth";
			public const string ExceptionRangeMonth = "ExceptionRangeMonth";
			public const string ExceptionRangeDay = "ExceptionRangeDay";
			public const string ExceptionInvalidDay = "ExceptionInvalidDay";
			public const string ExceptionRangeHour = "ExceptionRangeHour";
			public const string ExceptionInvalidExtendedFormatTime = "ExceptionInvalidExtendedFormatTime";
			public const string ExceptionEmptyFormat = "ExceptionEmptyFormat";
			public const string ExceptionNullFormat = "ExceptionNullFormat";
			public const string ExceptionNullDays = "ExceptionNullDays";
			public const string ExceptionNullDaysOfWeek = "ExceptionNullDaysOfWeek";
			public const string ExceptionNullHours = "ExceptionNullHours";
			public const string ExceptionNullMinutes = "ExceptionNullMinutes";
			public const string ExceptionNullMonths = "ExceptionNullMonths";
			public const string ExceptionNullFileName = "ExceptionNullFileName";
			public const string ExceptionEmptyFileName = "ExceptionEmptyFileName";
			public const string ExceptionInvalidFileName = "ExceptionInvalidFileName";
			public const string ExceptionRangeSlidingExpiration = "ExceptionRangeSlidingExpiration";
			public const string ExceptionNullCacheManagerDataName = "ExceptionNullCacheManagerDataName";
			public const string ExceptionMessageNoDefault = "ExceptionMessageNoDefault";
			public const string UnknownFailureReason = "UnknownFailureReason";
			public const string BackgroundSchedulerProducerConsumerQueueFailure = "BackgroundSchedulerProducerConsumerQueueFailure";
			public const string CacheNotInitializedException = "CacheNotInitializedException";
			public const string EmptyCacheManagerNameException = "EmptyCacheManagerNameException";
			public const string UnableToFindCacheManagerInstance = "UnableToFindCacheManagerInstance";
			public const string CannotInstantiateCacheStorage = "CannotInstantiateCacheStorage";
			public const string CannotInstantiateCacheStorageType = "CannotInstantiateCacheStorageType";
			public const string CannotInstantiateCacheStorageWithNullName = "CannotInstantiateCacheStorageWithNullName";
			public const string UnspecifiedExceptionWhileCreatingType = "UnspecifiedExceptionWhileCreatingType";
			public const string InvalidExpirationPollCycleTime = "InvalidExpirationPollCycleTime";
			public const string InvalidPollingStopOperation = "InvalidPollingStopOperation";
			public const string FailureToRemoveCacheItemInBackground = "FailureToRemoveCacheItemInBackground";
			public const string FailureToSpawnUserSpecifiedRefreshAction = "FailureToSpawnUserSpecifiedRefreshAction";
			public const string FailureWhileRunningUserSpecifiedRefreshAction = "FailureWhileRunningUserSpecifiedRefreshAction";
			public const string IsolatedStoreAreaNameNullException = "IsolatedStoreAreaNameNullException";
			public const string IsolatedStoreAreaNameEmptyException = "IsolatedStoreAreaNameEmptyException";
			public const string WildcardAll = "WildcardAll";
			public const string ArgumentDelimiter = "ArgumentDelimiter";
			public const string BackingStoreFactoryName = "BackingStoreFactoryName";
			public const string CacheManagerFactoryName = "CacheManagerFactoryName";
			public const string StorageEncryptionFactoryName = "StorageEncryptionFactoryName";
		}


	}
}
