// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Logging
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string DistributionStrategyFactoryName
		{
			get { return Keys.GetString( Keys.DistributionStrategyFactoryName ); }
		}
		public static string EmailSinkMissingParameters
		{
			get { return Keys.GetString( Keys.EmailSinkMissingParameters ); }
		}
		public static string CategoryNotFound (string missingCategory, string defaultCategory)
		{
			return Keys.GetString( Keys.CategoryNotFound, missingCategory, defaultCategory );
		}
		public static string InvalidSink (string invalidSink)
		{
			return Keys.GetString( Keys.InvalidSink, invalidSink );
		}
		public static string InvalidSinkMessage (string body)
		{
			return Keys.GetString( Keys.InvalidSinkMessage, body );
		}
		public static string ProcessMessageFailed
		{
			get { return Keys.GetString( Keys.ProcessMessageFailed ); }
		}
		public static string ProcessMessageFailed2
		{
			get { return Keys.GetString( Keys.ProcessMessageFailed2 ); }
		}
		public static string ProcessMessageFailed3 (string contents)
		{
			return Keys.GetString( Keys.ProcessMessageFailed3, contents );
		}
		public static string SinkFailure (string exceptionString)
		{
			return Keys.GetString( Keys.SinkFailure, exceptionString );
		}
		public static string DefaultLogDestinationMessage
		{
			get { return Keys.GetString( Keys.DefaultLogDestinationMessage ); }
		}
		public static string DefaultLogDestinationFailed
		{
			get { return Keys.GetString( Keys.DefaultLogDestinationFailed ); }
		}
		public static string EventLogSinkMissingEventSource
		{
			get { return Keys.GetString( Keys.EventLogSinkMissingEventSource ); }
		}
		public static string FileSinkMissingConfiguration
		{
			get { return Keys.GetString( Keys.FileSinkMissingConfiguration ); }
		}
      public static string WSSinkMissingConfiguration
      {
         get { return Keys.GetString( Keys.WSSinkMissingConfiguration ); }
      }
		public static string DistEventLoggerMessagePrefix
		{
			get { return Keys.GetString( Keys.DistEventLoggerMessagePrefix ); }
		}
		public static string DistEventLoggerSummary
		{
			get { return Keys.GetString( Keys.DistEventLoggerSummary ); }
		}
		public static string EventLogAccessDenied (string log)
		{
			return Keys.GetString( Keys.EventLogAccessDenied, log );
		}
		public static string ActivatorCacheCannotCreateType (string type)
		{
			return Keys.GetString( Keys.ActivatorCacheCannotCreateType, type );
		}
		public static string FormatterFactoryName
		{
			get { return Keys.GetString( Keys.FormatterFactoryName ); }
		}
		public static string SinkFactoryName
		{
			get { return Keys.GetString( Keys.SinkFactoryName ); }
		}
		public static string MissingDefaultFormatter
		{
			get { return Keys.GetString( Keys.MissingDefaultFormatter ); }
		}
		public static string IntrinsicPropertyError (string msg)
		{
			return Keys.GetString( Keys.IntrinsicPropertyError, msg );
		}
		public static string DefaultTextFormat
		{
			get { return Keys.GetString( Keys.DefaultTextFormat ); }
		}
		public static string DefaultLogDestinationSinkName
		{
			get { return Keys.GetString( Keys.DefaultLogDestinationSinkName ); }
		}
		public static string ApplicationLogName
		{
			get { return Keys.GetString( Keys.ApplicationLogName ); }
		}
		public static string DistributorEventLoggerDefaultApplicationName
		{
			get { return Keys.GetString( Keys.DistributorEventLoggerDefaultApplicationName ); }
		}
		public static string InstrumentationEventSource
		{
			get { return Keys.GetString( Keys.InstrumentationEventSource ); }
		}
		public static string InstrumentationCounterCategory
		{
			get { return Keys.GetString( Keys.InstrumentationCounterCategory ); }
		}
		public static string InstrumentationCounterCategoryHelp
		{
			get { return Keys.GetString( Keys.InstrumentationCounterCategoryHelp ); }
		}
		public static string NumLogsWrittenSec
		{
			get { return Keys.GetString( Keys.NumLogsWrittenSec ); }
		}
		public static string NumLogsWrittenSecMsg
		{
			get { return Keys.GetString( Keys.NumLogsWrittenSecMsg ); }
		}
		public static string NumLogsDistributedSec
		{
			get { return Keys.GetString( Keys.NumLogsDistributedSec ); }
		}
		public static string NumLogsDistributedSecMsg
		{
			get { return Keys.GetString( Keys.NumLogsDistributedSecMsg ); }
		}
		public static string NumLogsDefaultSinkSec
		{
			get { return Keys.GetString( Keys.NumLogsDefaultSinkSec ); }
		}
		public static string NumLogsDefaultSinkSecMsg
		{
			get { return Keys.GetString( Keys.NumLogsDefaultSinkSecMsg ); }
		}
		public static string ExceptionCategoryFilterDataName
		{
			get { return Keys.GetString( Keys.ExceptionCategoryFilterDataName ); }
		}
		public static string ExceptionDestinationDataName
		{
			get { return Keys.GetString( Keys.ExceptionDestinationDataName ); }
		}
		public static string ComPlusInfo_ActivityId
		{
			get { return Keys.GetString( Keys.ComPlusInfo_ActivityId ); }
		}
		public static string ComPlusInfo_ApplicationId
		{
			get { return Keys.GetString( Keys.ComPlusInfo_ApplicationId ); }
		}
		public static string ComPlusInfo_DirectCallerAccountName
		{
			get { return Keys.GetString( Keys.ComPlusInfo_DirectCallerAccountName ); }
		}
		public static string ComPlusInfo_OriginalCallerAccountName
		{
			get { return Keys.GetString( Keys.ComPlusInfo_OriginalCallerAccountName ); }
		}
		public static string ComPlusInfo_TransactionID
		{
			get { return Keys.GetString( Keys.ComPlusInfo_TransactionID ); }
		}
		public static string ExtendedPropertyError (string msg)
		{
			return Keys.GetString( Keys.ExtendedPropertyError, msg );
		}
		public static string UnknownError
		{
			get { return Keys.GetString( Keys.UnknownError ); }
		}
		public static string DebugInfo_SchemaHelperAtString
		{
			get { return Keys.GetString( Keys.DebugInfo_SchemaHelperAtString ); }
		}
		public static string DebugInfo_SchemaHelperUnknownType
		{
			get { return Keys.GetString( Keys.DebugInfo_SchemaHelperUnknownType ); }
		}
		public static string DebugInfo_SchemaHelperLine (string file, int line)
		{
			return Keys.GetString( Keys.DebugInfo_SchemaHelperLine, file, line );
		}
		public static string DebugInfo_StackTraceSecurityException
		{
			get { return Keys.GetString( Keys.DebugInfo_StackTraceSecurityException ); }
		}
		public static string DebugInfo_StackTraceException
		{
			get { return Keys.GetString( Keys.DebugInfo_StackTraceException ); }
		}
		public static string DebugInfo_StackTrace
		{
			get { return Keys.GetString( Keys.DebugInfo_StackTrace ); }
		}
		public static string ManagedSecurity_AuthenticationType
		{
			get { return Keys.GetString( Keys.ManagedSecurity_AuthenticationType ); }
		}
		public static string ManagedSecurity_IdentityName
		{
			get { return Keys.GetString( Keys.ManagedSecurity_IdentityName ); }
		}
		public static string ManagedSecurity_IsAuthenticated
		{
			get { return Keys.GetString( Keys.ManagedSecurity_IsAuthenticated ); }
		}
		public static string UnmanagedSecurity_CurrentUser
		{
			get { return Keys.GetString( Keys.UnmanagedSecurity_CurrentUser ); }
		}
		public static string UnmanagedSecurity_ProcessAccountName
		{
			get { return Keys.GetString( Keys.UnmanagedSecurity_ProcessAccountName ); }
		}
		public static string Tracer_StartMessageFormat (string activity, string method, long ticks)
		{
			return Keys.GetString( Keys.Tracer_StartMessageFormat, activity, method, ticks );
		}
		public static string Tracer_EndMessageFormat (string activity, string method, long ticks, decimal elapsedTime)
		{
			return Keys.GetString( Keys.Tracer_EndMessageFormat, activity, method, ticks, elapsedTime );
		}
		public static string ExceptionSeverityNotDefined
		{
			get { return Keys.GetString( Keys.ExceptionSeverityNotDefined ); }
		}
		public static string ExceptionEnumNotDefined (string value, string type)
		{
			return Keys.GetString( Keys.ExceptionEnumNotDefined, value, type );
		}
		public static string ExceptionNoStrategiesDefined
		{
			get { return Keys.GetString( Keys.ExceptionNoStrategiesDefined ); }
		}
		public static string ExceptionNoDistributionStragegy (string distributionName)
		{
			return Keys.GetString( Keys.ExceptionNoDistributionStragegy, distributionName );
		}
		public static string ExceptionNoSinksDefined
		{
			get { return Keys.GetString( Keys.ExceptionNoSinksDefined ); }
		}
		public static string ExceptionNoSinkDefined (string sinkName)
		{
			return Keys.GetString( Keys.ExceptionNoSinkDefined, sinkName );
		}
		public static string ExceptionMsmqSinkMissingConfiguration
		{
			get { return Keys.GetString( Keys.ExceptionMsmqSinkMissingConfiguration ); }
		}
		public static string ExceptionMsmqStrategyMissingConfiguration
		{
			get { return Keys.GetString( Keys.ExceptionMsmqStrategyMissingConfiguration ); }
		}
		public static string ExceptionCategoryNotDefined (string categoryName)
		{
			return Keys.GetString( Keys.ExceptionCategoryNotDefined, categoryName );
		}
		public static string ExceptionFormatterNotDefined (string formatterName)
		{
			return Keys.GetString( Keys.ExceptionFormatterNotDefined, formatterName );
		}
		public static string ExceptionCannotLoadDefaultCategory (string defaultCategory)
		{
			return Keys.GetString( Keys.ExceptionCannotLoadDefaultCategory, defaultCategory );
		}
		public static string ExceptionCannotLoadDefaultFormatter (string defaultFormatter)
		{
			return Keys.GetString( Keys.ExceptionCannotLoadDefaultFormatter, defaultFormatter );
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Logging.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Logging.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, Resources.CultureInfo );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, Resources.CultureInfo );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string DistributionStrategyFactoryName = "DistributionStrategyFactoryName";
			public const string EmailSinkMissingParameters = "EmailSinkMissingParameters";
			public const string CategoryNotFound = "CategoryNotFound";
			public const string InvalidSink = "InvalidSink";
			public const string InvalidSinkMessage = "InvalidSinkMessage";
			public const string ProcessMessageFailed = "ProcessMessageFailed";
			public const string ProcessMessageFailed2 = "ProcessMessageFailed2";
			public const string ProcessMessageFailed3 = "ProcessMessageFailed3";
			public const string SinkFailure = "SinkFailure";
			public const string DefaultLogDestinationMessage = "DefaultLogDestinationMessage";
			public const string DefaultLogDestinationFailed = "DefaultLogDestinationFailed";
			public const string EventLogSinkMissingEventSource = "EventLogSinkMissingEventSource";
			public const string FileSinkMissingConfiguration = "FileSinkMissingConfiguration";
         public const string WSSinkMissingConfiguration = "WSSinkMissingConfiguration";
			public const string DistEventLoggerMessagePrefix = "DistEventLoggerMessagePrefix";
			public const string DistEventLoggerSummary = "DistEventLoggerSummary";
			public const string EventLogAccessDenied = "EventLogAccessDenied";
			public const string ActivatorCacheCannotCreateType = "ActivatorCacheCannotCreateType";
			public const string FormatterFactoryName = "FormatterFactoryName";
			public const string SinkFactoryName = "SinkFactoryName";
			public const string MissingDefaultFormatter = "MissingDefaultFormatter";
			public const string IntrinsicPropertyError = "IntrinsicPropertyError";
			public const string DefaultTextFormat = "DefaultTextFormat";
			public const string DefaultLogDestinationSinkName = "DefaultLogDestinationSinkName";
			public const string ApplicationLogName = "ApplicationLogName";
			public const string DistributorEventLoggerDefaultApplicationName = "DistributorEventLoggerDefaultApplicationName";
			public const string InstrumentationEventSource = "InstrumentationEventSource";
			public const string InstrumentationCounterCategory = "InstrumentationCounterCategory";
			public const string InstrumentationCounterCategoryHelp = "InstrumentationCounterCategoryHelp";
			public const string NumLogsWrittenSec = "NumLogsWrittenSec";
			public const string NumLogsWrittenSecMsg = "NumLogsWrittenSecMsg";
			public const string NumLogsDistributedSec = "NumLogsDistributedSec";
			public const string NumLogsDistributedSecMsg = "NumLogsDistributedSecMsg";
			public const string NumLogsDefaultSinkSec = "NumLogsDefaultSinkSec";
			public const string NumLogsDefaultSinkSecMsg = "NumLogsDefaultSinkSecMsg";
			public const string ExceptionCategoryFilterDataName = "ExceptionCategoryFilterDataName";
			public const string ExceptionDestinationDataName = "ExceptionDestinationDataName";
			public const string ComPlusInfo_ActivityId = "ComPlusInfo_ActivityId";
			public const string ComPlusInfo_ApplicationId = "ComPlusInfo_ApplicationId";
			public const string ComPlusInfo_DirectCallerAccountName = "ComPlusInfo_DirectCallerAccountName";
			public const string ComPlusInfo_OriginalCallerAccountName = "ComPlusInfo_OriginalCallerAccountName";
			public const string ComPlusInfo_TransactionID = "ComPlusInfo_TransactionID";
			public const string ExtendedPropertyError = "ExtendedPropertyError";
			public const string UnknownError = "UnknownError";
			public const string DebugInfo_SchemaHelperAtString = "DebugInfo_SchemaHelperAtString";
			public const string DebugInfo_SchemaHelperUnknownType = "DebugInfo_SchemaHelperUnknownType";
			public const string DebugInfo_SchemaHelperLine = "DebugInfo_SchemaHelperLine";
			public const string DebugInfo_StackTraceSecurityException = "DebugInfo_StackTraceSecurityException";
			public const string DebugInfo_StackTraceException = "DebugInfo_StackTraceException";
			public const string DebugInfo_StackTrace = "DebugInfo_StackTrace";
			public const string ManagedSecurity_AuthenticationType = "ManagedSecurity_AuthenticationType";
			public const string ManagedSecurity_IdentityName = "ManagedSecurity_IdentityName";
			public const string ManagedSecurity_IsAuthenticated = "ManagedSecurity_IsAuthenticated";
			public const string UnmanagedSecurity_CurrentUser = "UnmanagedSecurity_CurrentUser";
			public const string UnmanagedSecurity_ProcessAccountName = "UnmanagedSecurity_ProcessAccountName";
			public const string Tracer_StartMessageFormat = "Tracer_StartMessageFormat";
			public const string Tracer_EndMessageFormat = "Tracer_EndMessageFormat";
			public const string ExceptionSeverityNotDefined = "ExceptionSeverityNotDefined";
			public const string ExceptionEnumNotDefined = "ExceptionEnumNotDefined";
			public const string ExceptionNoStrategiesDefined = "ExceptionNoStrategiesDefined";
			public const string ExceptionNoDistributionStragegy = "ExceptionNoDistributionStragegy";
			public const string ExceptionNoSinksDefined = "ExceptionNoSinksDefined";
			public const string ExceptionNoSinkDefined = "ExceptionNoSinkDefined";
			public const string ExceptionMsmqSinkMissingConfiguration = "ExceptionMsmqSinkMissingConfiguration";
			public const string ExceptionMsmqStrategyMissingConfiguration = "ExceptionMsmqStrategyMissingConfiguration";
			public const string ExceptionCategoryNotDefined = "ExceptionCategoryNotDefined";
			public const string ExceptionFormatterNotDefined = "ExceptionFormatterNotDefined";
			public const string ExceptionCannotLoadDefaultCategory = "ExceptionCannotLoadDefaultCategory";
			public const string ExceptionCannotLoadDefaultFormatter = "ExceptionCannotLoadDefaultFormatter";
		}


	}
}
