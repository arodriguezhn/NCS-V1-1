// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Configuration.Design
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string CryptographyNodeName
		{
			get { return Keys.GetString( Keys.CryptographyNodeName ); }
		}
		public static string CryptographySectionCommandName
		{
			get { return Keys.GetString( Keys.CryptographySectionCommandName ); }
		}
		public static string HashProviderCollectionNodeName
		{
			get { return Keys.GetString( Keys.HashProviderCollectionNodeName ); }
		}
		public static string HashProviderCollectionCommandName
		{
			get { return Keys.GetString( Keys.HashProviderCollectionCommandName ); }
		}
		public static string SymmetricProviderCollectionNodeName
		{
			get { return Keys.GetString( Keys.SymmetricProviderCollectionNodeName ); }
		}
		public static string SymmetricProviderCollectionCommandName
		{
			get { return Keys.GetString( Keys.SymmetricProviderCollectionCommandName ); }
		}
		public static string HashProviderNodeName
		{
			get { return Keys.GetString( Keys.HashProviderNodeName ); }
		}
		public static string KeyedHashProviderNodeName
		{
			get { return Keys.GetString( Keys.KeyedHashProviderNodeName ); }
		}
		public static string CustomHashProviderNodeName
		{
			get { return Keys.GetString( Keys.CustomHashProviderNodeName ); }
		}
		public static string HMACSHA1HashProviderNodeName
		{
			get { return Keys.GetString( Keys.HMACSHA1HashProviderNodeName ); }
		}
		public static string SymmetricCryptoProviderNodeName
		{
			get { return Keys.GetString( Keys.SymmetricCryptoProviderNodeName ); }
		}
		public static string CustomSymmetricCryptoProviderNodeName
		{
			get { return Keys.GetString( Keys.CustomSymmetricCryptoProviderNodeName ); }
		}
		public static string SymmetricAlgorithmProviderNodeName
		{
			get { return Keys.GetString( Keys.SymmetricAlgorithmProviderNodeName ); }
		}
		public static string DpapiSymmetricCryptoProviderNodeName
		{
			get { return Keys.GetString( Keys.DpapiSymmetricCryptoProviderNodeName ); }
		}
		public static string HashAlgorithmProviderNodeName
		{
			get { return Keys.GetString( Keys.HashAlgorithmProviderNodeName ); }
		}
		public static string HashProviderTypeNameDescription
		{
			get { return Keys.GetString( Keys.HashProviderTypeNameDescription ); }
		}
		public static string CustomHashProviderNodeExtensionsDescription
		{
			get { return Keys.GetString( Keys.CustomHashProviderNodeExtensionsDescription ); }
		}
		public static string CustomSymmetricCryptoProviderExtensionsDescription
		{
			get { return Keys.GetString( Keys.CustomSymmetricCryptoProviderExtensionsDescription ); }
		}
		public static string CustomSymmetricCryptoProviderTypeNameDescription
		{
			get { return Keys.GetString( Keys.CustomSymmetricCryptoProviderTypeNameDescription ); }
		}
		public static string DpapiSymmetricCryptoProviderNodeModeDescription
		{
			get { return Keys.GetString( Keys.DpapiSymmetricCryptoProviderNodeModeDescription ); }
		}
		public static string KeyManagerEditorRequiresKeyInfoProperty
		{
			get { return Keys.GetString( Keys.KeyManagerEditorRequiresKeyInfoProperty ); }
		}
		public static string KeyManagerUIKeyBoxEncrypted
		{
			get { return Keys.GetString( Keys.KeyManagerUIKeyBoxEncrypted ); }
		}
		public static string Bit
		{
			get { return Keys.GetString( Keys.Bit ); }
		}
		public static string KeyManagerUICurrentKeySizeCaption
		{
			get { return Keys.GetString( Keys.KeyManagerUICurrentKeySizeCaption ); }
		}
		public static string KeyManagerUIInvalidKey
		{
			get { return Keys.GetString( Keys.KeyManagerUIInvalidKey ); }
		}
		public static string CategoryGeneral
		{
			get { return Keys.GetString( Keys.CategoryGeneral ); }
		}
		public static string ExportFileFilter
		{
			get { return Keys.GetString( Keys.ExportFileFilter ); }
		}
		public static string ExportDialogTitle
		{
			get { return Keys.GetString( Keys.ExportDialogTitle ); }
		}
		public static string ExportDialogErrorTitle
		{
			get { return Keys.GetString( Keys.ExportDialogErrorTitle ); }
		}
		public static string ExportPasswordsDoNotMatch
		{
			get { return Keys.GetString( Keys.ExportPasswordsDoNotMatch ); }
		}
		public static string ExportPasswordMinLength (string min)
		{
			return Keys.GetString( Keys.ExportPasswordMinLength, min );
		}
		public static string ExportSuccessfulTitle
		{
			get { return Keys.GetString( Keys.ExportSuccessfulTitle ); }
		}
		public static string ExportSuccessful
		{
			get { return Keys.GetString( Keys.ExportSuccessful ); }
		}
		public static string ExportDirectoryInvalid
		{
			get { return Keys.GetString( Keys.ExportDirectoryInvalid ); }
		}
		public static string ImportDialogErrorTitle
		{
			get { return Keys.GetString( Keys.ImportDialogErrorTitle ); }
		}
		public static string ImportSourceFileInvalid
		{
			get { return Keys.GetString( Keys.ImportSourceFileInvalid ); }
		}
		public static string ImportDecryptError
		{
			get { return Keys.GetString( Keys.ImportDecryptError ); }
		}
		public static string ImportDecryptFormatError
		{
			get { return Keys.GetString( Keys.ImportDecryptFormatError ); }
		}
		public static string ImportSuccessfulTitle
		{
			get { return Keys.GetString( Keys.ImportSuccessfulTitle ); }
		}
		public static string ImportSuccessful
		{
			get { return Keys.GetString( Keys.ImportSuccessful ); }
		}
		public static string ImportPasswordInvalidTitle
		{
			get { return Keys.GetString( Keys.ImportPasswordInvalidTitle ); }
		}
		public static string ImportPasswordInvalid
		{
			get { return Keys.GetString( Keys.ImportPasswordInvalid ); }
		}
		public static string DecryptPasswordCheckFailure
		{
			get { return Keys.GetString( Keys.DecryptPasswordCheckFailure ); }
		}
		public static string InvalidExportDestination
		{
			get { return Keys.GetString( Keys.InvalidExportDestination ); }
		}
		public static string InvalidImportSource
		{
			get { return Keys.GetString( Keys.InvalidImportSource ); }
		}
		public static string MissingPassword
		{
			get { return Keys.GetString( Keys.MissingPassword ); }
		}
		public static string DPAPIModeRequiredErrorMessage
		{
			get { return Keys.GetString( Keys.DPAPIModeRequiredErrorMessage ); }
		}
		public static string GenericCreateStatusText (string name)
		{
			return Keys.GetString( Keys.GenericCreateStatusText, name );
		}
		public static string OverwriteExportFileMessage (string file)
		{
			return Keys.GetString( Keys.OverwriteExportFileMessage, file );
		}
		public static string OverwriteExportFileCaption
		{
			get { return Keys.GetString( Keys.OverwriteExportFileCaption ); }
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Configuration.Design.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.Configuration.Design.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, Resources.CultureInfo );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, Resources.CultureInfo );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string CryptographyNodeName = "CryptographyNodeName";
			public const string CryptographySectionCommandName = "CryptographySectionCommandName";
			public const string HashProviderCollectionNodeName = "HashProviderCollectionNodeName";
			public const string HashProviderCollectionCommandName = "HashProviderCollectionCommandName";
			public const string SymmetricProviderCollectionNodeName = "SymmetricProviderCollectionNodeName";
			public const string SymmetricProviderCollectionCommandName = "SymmetricProviderCollectionCommandName";
			public const string HashProviderNodeName = "HashProviderNodeName";
			public const string KeyedHashProviderNodeName = "KeyedHashProviderNodeName";
			public const string CustomHashProviderNodeName = "CustomHashProviderNodeName";
			public const string HMACSHA1HashProviderNodeName = "HMACSHA1HashProviderNodeName";
			public const string SymmetricCryptoProviderNodeName = "SymmetricCryptoProviderNodeName";
			public const string CustomSymmetricCryptoProviderNodeName = "CustomSymmetricCryptoProviderNodeName";
			public const string SymmetricAlgorithmProviderNodeName = "SymmetricAlgorithmProviderNodeName";
			public const string DpapiSymmetricCryptoProviderNodeName = "DpapiSymmetricCryptoProviderNodeName";
			public const string HashAlgorithmProviderNodeName = "HashAlgorithmProviderNodeName";
			public const string HashProviderTypeNameDescription = "HashProviderTypeNameDescription";
			public const string CustomHashProviderNodeExtensionsDescription = "CustomHashProviderNodeExtensionsDescription";
			public const string CustomSymmetricCryptoProviderExtensionsDescription = "CustomSymmetricCryptoProviderExtensionsDescription";
			public const string CustomSymmetricCryptoProviderTypeNameDescription = "CustomSymmetricCryptoProviderTypeNameDescription";
			public const string DpapiSymmetricCryptoProviderNodeModeDescription = "DpapiSymmetricCryptoProviderNodeModeDescription";
			public const string KeyManagerEditorRequiresKeyInfoProperty = "KeyManagerEditorRequiresKeyInfoProperty";
			public const string KeyManagerUIKeyBoxEncrypted = "KeyManagerUIKeyBoxEncrypted";
			public const string Bit = "Bit";
			public const string KeyManagerUICurrentKeySizeCaption = "KeyManagerUICurrentKeySizeCaption";
			public const string KeyManagerUIInvalidKey = "KeyManagerUIInvalidKey";
			public const string CategoryGeneral = "CategoryGeneral";
			public const string ExportFileFilter = "ExportFileFilter";
			public const string ExportDialogTitle = "ExportDialogTitle";
			public const string ExportDialogErrorTitle = "ExportDialogErrorTitle";
			public const string ExportPasswordsDoNotMatch = "ExportPasswordsDoNotMatch";
			public const string ExportPasswordMinLength = "ExportPasswordMinLength";
			public const string ExportSuccessfulTitle = "ExportSuccessfulTitle";
			public const string ExportSuccessful = "ExportSuccessful";
			public const string ExportDirectoryInvalid = "ExportDirectoryInvalid";
			public const string ImportDialogErrorTitle = "ImportDialogErrorTitle";
			public const string ImportSourceFileInvalid = "ImportSourceFileInvalid";
			public const string ImportDecryptError = "ImportDecryptError";
			public const string ImportDecryptFormatError = "ImportDecryptFormatError";
			public const string ImportSuccessfulTitle = "ImportSuccessfulTitle";
			public const string ImportSuccessful = "ImportSuccessful";
			public const string ImportPasswordInvalidTitle = "ImportPasswordInvalidTitle";
			public const string ImportPasswordInvalid = "ImportPasswordInvalid";
			public const string DecryptPasswordCheckFailure = "DecryptPasswordCheckFailure";
			public const string InvalidExportDestination = "InvalidExportDestination";
			public const string InvalidImportSource = "InvalidImportSource";
			public const string MissingPassword = "MissingPassword";
			public const string DPAPIModeRequiredErrorMessage = "DPAPIModeRequiredErrorMessage";
			public const string GenericCreateStatusText = "GenericCreateStatusText";
			public const string OverwriteExportFileMessage = "OverwriteExportFileMessage";
			public const string OverwriteExportFileCaption = "OverwriteExportFileCaption";
		}


	}
}
