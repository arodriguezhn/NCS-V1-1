// WARNING:
// This file generated by the Microsoft DataWarehouse String Resource Tool 1.13.5000.0
// from information in SR.strings.   
// DO NO MODIFY THIS FILE'S CONTENTS, THEY WILL BE OVERWRITTEN
//
namespace Microsoft.Practices.EnterpriseLibrary.Security.Cryptography
{
	using System;
	using System.Resources;
	using System.Globalization;

	internal class SR
	{
		public static string MissingPassword
		{
			get { return Keys.GetString( Keys.MissingPassword ); }
		}
		public static string MustUseKeyedHashAlgorithmProvider
		{
			get { return Keys.GetString( Keys.MustUseKeyedHashAlgorithmProvider ); }
		}
		public static string SymmetricCryptoFactory
		{
			get { return Keys.GetString( Keys.SymmetricCryptoFactory ); }
		}
		public static string HashFactory
		{
			get { return Keys.GetString( Keys.HashFactory ); }
		}
		public static string ExceptionCreatingHashAlgorithmInstance
		{
			get { return Keys.GetString( Keys.ExceptionCreatingHashAlgorithmInstance ); }
		}
		public static string ExceptionCreatingSymmetricAlgorithmInstance
		{
			get { return Keys.GetString( Keys.ExceptionCreatingSymmetricAlgorithmInstance ); }
		}
		public static string ExceptionCastingSymmetricAlgorithmInstance
		{
			get { return Keys.GetString( Keys.ExceptionCastingSymmetricAlgorithmInstance ); }
		}
		public static string ExceptionValidatingDataArgument
		{
			get { return Keys.GetString( Keys.ExceptionValidatingDataArgument ); }
		}
		public static string ExceptionDecrypting
		{
			get { return Keys.GetString( Keys.ExceptionDecrypting ); }
		}
		public static string ExceptionNoSymmetricCryptoProvider (string name)
		{
			return Keys.GetString( Keys.ExceptionNoSymmetricCryptoProvider, name );
		}
		public static string ExceptionCryptoSettingsMissing
		{
			get { return Keys.GetString( Keys.ExceptionCryptoSettingsMissing ); }
		}
		public static string ExceptionNoCryptoProvider (string name)
		{
			return Keys.GetString( Keys.ExceptionNoCryptoProvider, name );
		}
		public static string ExceptionNoHashProvider (string name)
		{
			return Keys.GetString( Keys.ExceptionNoHashProvider, name );
		}
		public static string InstrumentationEventSource
		{
			get { return Keys.GetString( Keys.InstrumentationEventSource ); }
		}
		public static string InstrumentationCounterCategory
		{
			get { return Keys.GetString( Keys.InstrumentationCounterCategory ); }
		}
		public static string InstrumentationCounterCategoryHelp
		{
			get { return Keys.GetString( Keys.InstrumentationCounterCategoryHelp ); }
		}
		public static string PerfCounterNumSymmEncryptionSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterNumSymmEncryptionSecMsg ); }
		}
		public static string PerfCounterNumSymmDecryptionSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterNumSymmDecryptionSecMsg ); }
		}
		public static string PerfCounterNumCreateHashSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterNumCreateHashSecMsg ); }
		}
		public static string PerfCounterNumCheckHashSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterNumCheckHashSecMsg ); }
		}
		public static string PerfCounterNumCheckHashFailureSecMsg
		{
			get { return Keys.GetString( Keys.PerfCounterNumCheckHashFailureSecMsg ); }
		}

		internal class Keys 
		{
			static ResourceManager resourceManager = 
				new ResourceManager("Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.SR", typeof(Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.SR).Module.Assembly );

			public static string GetString( string key )
			{
				return resourceManager.GetString( key, Resources.CultureInfo );
			}
			public static string GetString( string key, params object[] args )
			{
				string msg = resourceManager.GetString( key, Resources.CultureInfo );
				msg = string.Format( msg, args );
				return msg;
			}

			public const string MissingPassword = "MissingPassword";
			public const string MustUseKeyedHashAlgorithmProvider = "MustUseKeyedHashAlgorithmProvider";
			public const string SymmetricCryptoFactory = "SymmetricCryptoFactory";
			public const string HashFactory = "HashFactory";
			public const string ExceptionCreatingHashAlgorithmInstance = "ExceptionCreatingHashAlgorithmInstance";
			public const string ExceptionCreatingSymmetricAlgorithmInstance = "ExceptionCreatingSymmetricAlgorithmInstance";
			public const string ExceptionCastingSymmetricAlgorithmInstance = "ExceptionCastingSymmetricAlgorithmInstance";
			public const string ExceptionValidatingDataArgument = "ExceptionValidatingDataArgument";
			public const string ExceptionDecrypting = "ExceptionDecrypting";
			public const string ExceptionNoSymmetricCryptoProvider = "ExceptionNoSymmetricCryptoProvider";
			public const string ExceptionCryptoSettingsMissing = "ExceptionCryptoSettingsMissing";
			public const string ExceptionNoCryptoProvider = "ExceptionNoCryptoProvider";
			public const string ExceptionNoHashProvider = "ExceptionNoHashProvider";
			public const string InstrumentationEventSource = "InstrumentationEventSource";
			public const string InstrumentationCounterCategory = "InstrumentationCounterCategory";
			public const string InstrumentationCounterCategoryHelp = "InstrumentationCounterCategoryHelp";
			public const string PerfCounterNumSymmEncryptionSecMsg = "PerfCounterNumSymmEncryptionSecMsg";
			public const string PerfCounterNumSymmDecryptionSecMsg = "PerfCounterNumSymmDecryptionSecMsg";
			public const string PerfCounterNumCreateHashSecMsg = "PerfCounterNumCreateHashSecMsg";
			public const string PerfCounterNumCheckHashSecMsg = "PerfCounterNumCheckHashSecMsg";
			public const string PerfCounterNumCheckHashFailureSecMsg = "PerfCounterNumCheckHashFailureSecMsg";
		}


	}
}
